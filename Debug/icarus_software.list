
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6d0  0800b6d0  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6d0  0800b6d0  0001b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d8  0800b6d8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6dc  0800b6dc  0001b6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800b6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a40  20000050  0800b730  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008a90  0800b730  00028a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002828c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ddf  00000000  00000000  0004830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  0004e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0004fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283c8  00000000  00000000  00051598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212fe  00000000  00000000  00079960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3c91  00000000  00000000  0009ac5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007048  00000000  00000000  0017e944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b43c 	.word	0x0800b43c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	0800b43c 	.word	0x0800b43c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	20000070 	.word	0x20000070
 8000590:	20007f18 	.word	0x20007f18
 8000594:	2000006c 	.word	0x2000006c

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 fd10 	bl	8003ff4 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fded 	bl	80041b4 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 ff67 	bl	80044b0 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200083c0 	.word	0x200083c0
 8000614:	20007ee4 	.word	0x20007ee4

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f858 	bl	80006d4 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20007ec8 	.word	0x20007ec8

08000638 <can_msgPending>:

uint32_t can_msgPending() {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <can_msgPending+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <can_msgPending+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3340      	adds	r3, #64	; 0x40
 8000654:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000070 	.word	0x20000070
 8000668:	2000006c 	.word	0x2000006c

0800066c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000682:	f7ff ffd9 	bl	8000638 <can_msgPending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <can_readBuffer+0x60>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <can_readBuffer+0x64>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <can_readBuffer+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff2e 	bl	8000508 <pointer_inc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <can_readBuffer+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	461c      	mov	r4, r3
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000006c 	.word	0x2000006c
 80006d0:	20007f18 	.word	0x20007f18

080006d4 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006da:	2100      	movs	r1, #0
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <can_readFrame+0xb4>)
 80006de:	f003 febf 	bl	8004460 <HAL_CAN_GetRxFifoFillLevel>
 80006e2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d049      	beq.n	800077e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <can_readFrame+0xb8>)
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <can_readFrame+0xbc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <can_readFrame+0xb4>)
 80006f2:	f003 fda3 	bl	800423c <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <can_readFrame+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <can_readFrame+0xc0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <can_readFrame+0xb8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	4413      	add	r3, r2
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <can_readFrame+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <can_readFrame+0xc0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <can_readFrame+0xb8>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4413      	add	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <can_readFrame+0xc0>)
 800071a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <can_readFrame+0xc0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <can_readFrame+0xb8>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4413      	add	r3, r2
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <can_readFrame+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <can_readFrame+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <can_readFrame+0xb8>)
 8000732:	78d2      	ldrb	r2, [r2, #3]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <can_readFrame+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <can_readFrame+0xb8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <can_readFrame+0xc0>)
 8000740:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <can_readFrame+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <can_readFrame+0xc0>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readFrame+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	4413      	add	r3, r2
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <can_readFrame+0xc0>)
 8000756:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <can_readFrame+0xc0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <can_readFrame+0xb8>)
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	4413      	add	r3, r2
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <can_readFrame+0xc0>)
 8000766:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <can_readFrame+0xc0>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <can_readFrame+0xb8>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4413      	add	r3, r2
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <can_readFrame+0xc0>)
 8000774:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_readFrame+0xbc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <can_readFrame+0xc0>)
 800077c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200083c0 	.word	0x200083c0
 800078c:	20007edc 	.word	0x20007edc
 8000790:	20007efc 	.word	0x20007efc
 8000794:	20007ec8 	.word	0x20007ec8

08000798 <can_init>:


void can_init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fefb 	bl	8000598 <CAN_Config>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <can_send_thread>:


void can_send_thread(void * arg) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80007b0:	f009 fea2 	bl	800a4f8 <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <can_send_thread+0x20>)
 80007b8:	6013      	str	r3, [r2, #0]

	for(;;) {

		//SEND DATA HERE

		vTaskDelayUntil( &last_wake_time, period );
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <can_send_thread+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <can_send_thread+0x20>)
 80007c2:	f009 fcdd 	bl	800a180 <vTaskDelayUntil>
 80007c6:	e7f8      	b.n	80007ba <can_send_thread+0x12>
 80007c8:	20000074 	.word	0x20000074
 80007cc:	0800b6a8 	.word	0x0800b6a8

080007d0 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 80007d8:	f000 fcf8 	bl	80011cc <led_init>

	init_control(&control);
 80007dc:	482c      	ldr	r0, [pc, #176]	; (8000890 <control_thread+0xc0>)
 80007de:	f000 f8ae 	bl	800093e <init_control>

	static SERVO_INST_t tvc_servo;

	servo_global_init();
 80007e2:	f001 f98d 	bl	8001b00 <servo_global_init>

	servo_init(&tvc_servo, 1);
 80007e6:	2101      	movs	r1, #1
 80007e8:	482a      	ldr	r0, [pc, #168]	; (8000894 <control_thread+0xc4>)
 80007ea:	f001 f94f 	bl	8001a8c <servo_init>

	servo_config(&tvc_servo);
 80007ee:	4829      	ldr	r0, [pc, #164]	; (8000894 <control_thread+0xc4>)
 80007f0:	f001 fc16 	bl	8002020 <servo_config>

	control.tvc_servo = &tvc_servo;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <control_thread+0xc0>)
 80007f6:	4a27      	ldr	r2, [pc, #156]	; (8000894 <control_thread+0xc4>)
 80007f8:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 80007fa:	4825      	ldr	r0, [pc, #148]	; (8000890 <control_thread+0xc0>)
 80007fc:	f000 f8b0 	bl	8000960 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000800:	f009 fe7a 	bl	800a4f8 <xTaskGetTickCount>
 8000804:	4603      	mov	r3, r0
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <control_thread+0xc8>)
 8000808:	6013      	str	r3, [r2, #0]
	for(;;) {


		static uint8_t lol = 0;
		static uint16_t cnt = 0;
		if(cnt++ > 10) {
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <control_thread+0xcc>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	b291      	uxth	r1, r2
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <control_thread+0xcc>)
 8000814:	8011      	strh	r1, [r2, #0]
 8000816:	2b0a      	cmp	r3, #10
 8000818:	d90c      	bls.n	8000834 <control_thread+0x64>
			lol = !lol;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <control_thread+0xd0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf0c      	ite	eq
 8000822:	2301      	moveq	r3, #1
 8000824:	2300      	movne	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <control_thread+0xd0>)
 800082c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <control_thread+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	801a      	strh	r2, [r3, #0]
		}

		if(lol) {
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <control_thread+0xd0>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <control_thread+0x7c>
			servo_enable_led(control.tvc_servo, NULL);
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <control_thread+0xc0>)
 800083e:	6998      	ldr	r0, [r3, #24]
 8000840:	2300      	movs	r3, #0
 8000842:	2201      	movs	r2, #1
 8000844:	2141      	movs	r1, #65	; 0x41
 8000846:	f001 fae1 	bl	8001e0c <servo_write_u8>
 800084a:	e006      	b.n	800085a <control_thread+0x8a>
		} else {
			servo_disable_led(control.tvc_servo, NULL);
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <control_thread+0xc0>)
 800084e:	6998      	ldr	r0, [r3, #24]
 8000850:	2300      	movs	r3, #0
 8000852:	2200      	movs	r2, #0
 8000854:	2141      	movs	r1, #65	; 0x41
 8000856:	f001 fad9 	bl	8001e0c <servo_write_u8>
		}


		control_update(&control);
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <control_thread+0xc0>)
 800085c:	f000 f826 	bl	80008ac <control_update>


		if(control.state < CS_NUM && control.state > 0) {
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <control_thread+0xc0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d80b      	bhi.n	8000880 <control_thread+0xb0>
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <control_thread+0xc0>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <control_thread+0xb0>
			control_fcn[control.state](&control);
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <control_thread+0xc0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <control_thread+0xd4>)
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <control_thread+0xc0>)
 800087e:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <control_thread+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <control_thread+0xc8>)
 8000888:	f009 fc7a 	bl	800a180 <vTaskDelayUntil>
	for(;;) {
 800088c:	e7bd      	b.n	800080a <control_thread+0x3a>
 800088e:	bf00      	nop
 8000890:	20000078 	.word	0x20000078
 8000894:	200000ac 	.word	0x200000ac
 8000898:	20001148 	.word	0x20001148
 800089c:	2000114c 	.word	0x2000114c
 80008a0:	2000114e 	.word	0x2000114e
 80008a4:	20000020 	.word	0x20000020
 80008a8:	0800b6ac 	.word	0x0800b6ac

080008ac <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 80008bc:	f003 f820 	bl	8003900 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	605a      	str	r2, [r3, #4]
	control->iter++;
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	7c1b      	ldrb	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d016      	beq.n	8000906 <control_update+0x5a>
		control->counter -= (control->time - control->last_time);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4619      	mov	r1, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	440b      	add	r3, r1
 80008ea:	461a      	mov	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	60da      	str	r2, [r3, #12]
	}

	while(can_msgPending()) {
 80008f0:	e009      	b.n	8000906 <control_update+0x5a>
		control->msg = can_readBuffer();
 80008f2:	697c      	ldr	r4, [r7, #20]
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff feb8 	bl	800066c <can_readBuffer>
 80008fc:	3424      	adds	r4, #36	; 0x24
 80008fe:	463b      	mov	r3, r7
 8000900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(can_msgPending()) {
 8000906:	f7ff fe97 	bl	8000638 <can_msgPending>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f0      	bne.n	80008f2 <control_update+0x46>

		}
	}

	//read servo parameters
	servo_sync(control->tvc_servo);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb3c 	bl	8001f92 <servo_sync>


	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 800091a:	2101      	movs	r1, #1
 800091c:	6978      	ldr	r0, [r7, #20]
 800091e:	f000 f8cf 	bl	8000ac0 <control_sched_should_run>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <control_update+0x8a>
		init_abort(control);
 8000928:	6978      	ldr	r0, [r7, #20]
 800092a:	f000 f85a 	bl	80009e2 <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 800092e:	2101      	movs	r1, #1
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	f000 f8da 	bl	8000aea <control_sched_done>
	}
}
 8000936:	bf00      	nop
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}

0800093e <init_control>:

static void init_control(CONTROL_INST_t * control) {
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	control->counter_active = 0;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	741a      	strb	r2, [r3, #16]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 800096e:	2200      	movs	r2, #0
 8000970:	21ff      	movs	r1, #255	; 0xff
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fc4e 	bl	8001214 <led_set_color>
	storage_disable();
 8000978:	f001 fc90 	bl	800229c <storage_disable>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <idle>:

static void idle(CONTROL_INST_t * control) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
 800098c:	2102      	movs	r1, #2
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f896 	bl	8000ac0 <control_sched_should_run>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00b      	beq.n	80009b2 <idle+0x2e>
		servo_move(control->tvc_servo, control->tvc_mov_target);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4610      	mov	r0, r2
 80009a6:	f001 fb77 	bl	8002098 <servo_move>
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
 80009aa:	2102      	movs	r1, #2
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f89c 	bl	8000aea <control_sched_done>
	}

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <boot>:
static void init_boot(CONTROL_INST_t * control) {
	//global enable
	//to boot the rpi
}

static void boot(CONTROL_INST_t * control) {
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <compute>:

static void init_compute(CONTROL_INST_t * control) {
	//start sending data to raspberry pi
}

static void compute(CONTROL_INST_t * control) {
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]

}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 80009ea:	227f      	movs	r2, #127	; 0x7f
 80009ec:	2100      	movs	r1, #0
 80009ee:	207f      	movs	r0, #127	; 0x7f
 80009f0:	f000 fc10 	bl	8001214 <led_set_color>
	control->state = CS_ABORT;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2203      	movs	r2, #3
 80009f8:	701a      	strb	r2, [r3, #0]
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fb48 	bl	8002098 <servo_move>
	control->counter_active=0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8000a0e:	f001 fc45 	bl	800229c <storage_disable>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_abort>:

static void _abort(CONTROL_INST_t * control) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8000a22:	2103      	movs	r1, #3
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f84b 	bl	8000ac0 <control_sched_should_run>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <_abort+0x24>
		init_idle(control);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff95 	bl	8000960 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8000a36:	2103      	movs	r1, #3
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f856 	bl	8000aea <control_sched_done>
	}
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	f000 fbde 	bl	8001214 <led_set_color>
	control->state = CS_ERROR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8000a64:	f001 fc1a 	bl	800229c <storage_disable>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <error>:

static void error(CONTROL_INST_t * control) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8000a78:	2103      	movs	r1, #3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f820 	bl	8000ac0 <control_sched_should_run>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <error+0x24>
		init_idle(control);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff6a 	bl	8000960 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f82b 	bl	8000aea <control_sched_done>
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <control_move_tvc+0x20>)
 8000aa8:	f000 f838 	bl	8000b1c <control_sched_set>
	control.tvc_mov_target = target;
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <control_move_tvc+0x20>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	61d3      	str	r3, [r2, #28]
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000078 	.word	0x20000078

08000ac0 <control_sched_should_run>:

	return status;
}


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad2:	78fa      	ldrb	r2, [r7, #3]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000afc:	78fa      	ldrb	r2, [r7, #3]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d104      	bne.n	8000b0c <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		init_error(control);
	}
}
 8000b0a:	e002      	b.n	8000b12 <control_sched_done+0x28>
		init_error(control);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff9a 	bl	8000a46 <init_error>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	if(control->sched == CONTROL_SCHED_NOTHING) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d11c      	bne.n	8000b6c <control_sched_set+0x50>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e016      	b.n	8000b66 <control_sched_set+0x4a>
			if(sched_allowed[control->state][i] == num) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	7bfa      	ldrb	r2, [r7, #15]
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <control_sched_set+0x5c>)
 8000b42:	4603      	mov	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4403      	add	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	440b      	add	r3, r1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d104      	bne.n	8000b60 <control_sched_set+0x44>
				control->sched = num;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	78fa      	ldrb	r2, [r7, #3]
 8000b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				return;
 8000b5e:	e005      	b.n	8000b6c <control_sched_set+0x50>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3301      	adds	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	d9e5      	bls.n	8000b38 <control_sched_set+0x1c>
			}
		}
	}
}
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000

08000b7c <util_decode_u32>:

static inline uint16_t util_decode_u16(uint8_t * data) {
	return (uint16_t) data[0] | data[1] << 8;
}

static inline uint32_t util_decode_u32(uint8_t * data) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	4313      	orrs	r3, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	3202      	adds	r2, #2
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	3203      	adds	r2, #3
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	0612      	lsls	r2, r2, #24
 8000ba6:	4313      	orrs	r3, r2
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3303      	adds	r3, #3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	061b      	lsls	r3, r3, #24
 8000bde:	4313      	orrs	r3, r2
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	78fa      	ldrb	r2, [r7, #3]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fc5b 	bl	80014c0 <msv2_decode_fragment>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d15e      	bne.n	8000cd2 <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	7a1b      	ldrb	r3, [r3, #8]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <debug_decode_fcn+0xf0>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d22e      	bcs.n	8000c80 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	7a1b      	ldrb	r3, [r3, #8]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <debug_decode_fcn+0xf4>)
 8000c2a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f103 0012 	add.w	r0, r3, #18
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	89d9      	ldrh	r1, [r3, #14]
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <debug_decode_fcn+0xf8>)
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <debug_decode_fcn+0xfc>)
 8000c3c:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	1d18      	adds	r0, r3, #4
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	7a19      	ldrb	r1, [r3, #8]
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <debug_decode_fcn+0xf8>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <debug_decode_fcn+0xfc>)
 8000c52:	f000 fb4f 	bl	80012f4 <msv2_create_frame>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <debug_decode_fcn+0x100>)
 8000c5c:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000c64:	3418      	adds	r4, #24
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fd1c 	bl	80016a8 <msv2_tx_data>
 8000c70:	4601      	mov	r1, r0
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <debug_decode_fcn+0x100>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 fe2b 	bl	80018d4 <serial_send>
 8000c7e:	e028      	b.n	8000cd2 <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <debug_decode_fcn+0xfc>)
 8000c82:	22be      	movs	r2, #190	; 0xbe
 8000c84:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <debug_decode_fcn+0xfc>)
 8000c88:	22eb      	movs	r2, #235	; 0xeb
 8000c8a:	705a      	strb	r2, [r3, #1]
			length = 2;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <debug_decode_fcn+0xf8>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1d18      	adds	r0, r3, #4
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	7a19      	ldrb	r1, [r3, #8]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <debug_decode_fcn+0xf8>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	085b      	lsrs	r3, r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <debug_decode_fcn+0xfc>)
 8000ca6:	f000 fb25 	bl	80012f4 <msv2_create_frame>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <debug_decode_fcn+0x100>)
 8000cb0:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000cb8:	3418      	adds	r4, #24
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fcf2 	bl	80016a8 <msv2_tx_data>
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <debug_decode_fcn+0x100>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f000 fe01 	bl	80018d4 <serial_send>
		}
	}

	return tmp;
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	2000003c 	.word	0x2000003c
 8000ce0:	20000034 	.word	0x20000034
 8000ce4:	20001350 	.word	0x20001350
 8000ce8:	20001150 	.word	0x20001150
 8000cec:	20001352 	.word	0x20001352

08000cf0 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fae5 	bl	80012cc <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000d08:	3018      	adds	r0, #24
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <debug_init+0x3c>)
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <debug_init+0x40>)
 8000d10:	f000 fda0 	bl	8001854 <serial_init>
	debug->id = id_counter++;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <debug_init+0x44>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	4906      	ldr	r1, [pc, #24]	; (8000d34 <debug_init+0x44>)
 8000d1c:	600a      	str	r2, [r1, #0]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	08000bed 	.word	0x08000bed
 8000d30:	2000884c 	.word	0x2000884c
 8000d34:	20001354 	.word	0x20001354

08000d38 <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	460b      	mov	r3, r1
 8000d46:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d11b      	bne.n	8000d86 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff ff14 	bl	8000b7c <util_decode_u32>
 8000d54:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	75fb      	strb	r3, [r7, #23]
 8000d5a:	e00e      	b.n	8000d7a <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 8000d5c:	7dfa      	ldrb	r2, [r7, #23]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	441a      	add	r2, r3
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
 8000d64:	015b      	lsls	r3, r3, #5
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	440b      	add	r3, r1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f001 fa7c 	bl	800226c <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	3301      	adds	r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d9ed      	bls.n	8000d5c <debug_download+0x24>
		}
		*resp_len = 32*5;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	22a0      	movs	r2, #160	; 0xa0
 8000d84:	801a      	strh	r2, [r3, #0]
	}
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8000d9e:	897b      	ldrh	r3, [r7, #10]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d111      	bne.n	8000dc8 <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff ff05 	bl	8000bb4 <util_decode_i32>
 8000daa:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff fe75 	bl	8000a9c <control_move_tvc>
		resp[0] = OK_LO;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	22c5      	movs	r2, #197	; 0xc5
 8000db6:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	225c      	movs	r2, #92	; 0x5c
 8000dbe:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8000dc6:	e009      	b.n	8000ddc <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	22ce      	movs	r2, #206	; 0xce
 8000dcc:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	22ec      	movs	r2, #236	; 0xec
 8000dd4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	801a      	strh	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <calc_crc>:

/**********************
 *	DECLARATIONS
 **********************/

static uint16_t calc_crc(uint16_t crc_accum, uint8_t * data_blk_ptr, uint16_t data_blk_size) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	463b      	mov	r3, r7
 8000dee:	6019      	str	r1, [r3, #0]
 8000df0:	4611      	mov	r1, r2
 8000df2:	1dbb      	adds	r3, r7, #6
 8000df4:	4602      	mov	r2, r0
 8000df6:	801a      	strh	r2, [r3, #0]
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <calc_crc+0x98>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	4611      	mov	r1, r2
 8000e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	f00a faff 	bl	800b410 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000e18:	e023      	b.n	8000e62 <calc_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000e1a:	1dbb      	adds	r3, r7, #6
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000e26:	4639      	mov	r1, r7
 8000e28:	6809      	ldr	r1, [r1, #0]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4053      	eors	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4053      	eors	r3, r2
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 8000e58:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3d5      	bcc.n	8000e1a <calc_crc+0x36>
    }

    return crc_accum;
 8000e6e:	1dbb      	adds	r3, r7, #6
 8000e70:	881b      	ldrh	r3, [r3, #0]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0800b454 	.word	0x0800b454

08000e80 <dsv2_init>:


void dsv2_init(DSV2_INST_t * dsv2) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	dsv2->id = id_counter++;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <dsv2_init+0x24>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <dsv2_init+0x24>)
 8000e90:	600a      	str	r2, [r1, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20001358 	.word	0x20001358

08000ea8 <dsv2_create_frame>:

uint16_t dsv2_create_frame(DSV2_INST_t * dsv2, uint8_t dev_id, uint16_t data_len, uint8_t inst, uint8_t * data) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	70fb      	strb	r3, [r7, #3]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	803b      	strh	r3, [r7, #0]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	70bb      	strb	r3, [r7, #2]
	dsv2->tx.data[0] = H1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[1] = H2;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	22ff      	movs	r2, #255	; 0xff
 8000ece:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
	dsv2->tx.data[2] = H3;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	22fd      	movs	r2, #253	; 0xfd
 8000ed6:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
	dsv2->tx.data[3] = H4;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
	dsv2->tx.data[4] = dev_id;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78fa      	ldrb	r2, [r7, #3]
 8000ee6:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
	dsv2->tx.data[5] = (data_len+3) & 0xff;
 8000eea:	883b      	ldrh	r3, [r7, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3303      	adds	r3, #3
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
	dsv2->tx.data[6] = (data_len+3)>>8;
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	3303      	adds	r3, #3
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
	dsv2->tx.data[7] = inst;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	78ba      	ldrb	r2, [r7, #2]
 8000f0a:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
	uint16_t counter=8;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 0; i < data_len; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	81bb      	strh	r3, [r7, #12]
 8000f16:	e00e      	b.n	8000f36 <dsv2_create_frame+0x8e>
		dsv2->tx.data[counter++] = data[i];
 8000f18:	89bb      	ldrh	r3, [r7, #12]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	441a      	add	r2, r3
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	1c59      	adds	r1, r3, #1
 8000f22:	81f9      	strh	r1, [r7, #14]
 8000f24:	4619      	mov	r1, r3
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	for(uint16_t i = 0; i < data_len; i++) {
 8000f30:	89bb      	ldrh	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	81bb      	strh	r3, [r7, #12]
 8000f36:	89ba      	ldrh	r2, [r7, #12]
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3ec      	bcc.n	8000f18 <dsv2_create_frame+0x70>
	}
	uint16_t crc = calc_crc(0, dsv2->tx.data, data_len + 8);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f603 0118 	addw	r1, r3, #2072	; 0x818
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	3308      	adds	r3, #8
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ff49 	bl	8000de4 <calc_crc>
 8000f52:	4603      	mov	r3, r0
 8000f54:	817b      	strh	r3, [r7, #10]
	dsv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	81fa      	strh	r2, [r7, #14]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	897b      	ldrh	r3, [r7, #10]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	440b      	add	r3, r1
 8000f66:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[counter++] = crc>>8;
 8000f6a:	897b      	ldrh	r3, [r7, #10]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	1c59      	adds	r1, r3, #1
 8000f74:	81f9      	strh	r1, [r7, #14]
 8000f76:	4619      	mov	r1, r3
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	return counter;
 8000f82:	89fb      	ldrh	r3, [r7, #14]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <dsv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
DSV2_ERROR_t dsv2_decode_fragment(DSV2_INST_t * dsv2, uint8_t d) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
		dsv2->rx.restart_state = DSV2_WAITING_H2;
		dsv2->rx.crc_data[0] = d;
	}
	*/

    if(dsv2->rx.state == DSV2_WAITING_H1 && d == H1) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7adb      	ldrb	r3, [r3, #11]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <dsv2_decode_fragment+0x2c>
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d108      	bne.n	8000fb8 <dsv2_decode_fragment+0x2c>
    	dsv2->rx.state = DSV2_WAITING_H2;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	72da      	strb	r2, [r3, #11]
    	dsv2->rx.crc_data[0] = d;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    	return DSV2_PROGRESS;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0eb      	b.n	8001190 <dsv2_decode_fragment+0x204>
    }
    if(dsv2->rx.state == DSV2_WAITING_H2 && d == H2) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7adb      	ldrb	r3, [r3, #11]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10b      	bne.n	8000fd8 <dsv2_decode_fragment+0x4c>
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d108      	bne.n	8000fd8 <dsv2_decode_fragment+0x4c>
		dsv2->rx.state = DSV2_WAITING_H3;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[1] = d;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
		return DSV2_PROGRESS;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0db      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H3 && d == H3) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7adb      	ldrb	r3, [r3, #11]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d10b      	bne.n	8000ff8 <dsv2_decode_fragment+0x6c>
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	2bfd      	cmp	r3, #253	; 0xfd
 8000fe4:	d108      	bne.n	8000ff8 <dsv2_decode_fragment+0x6c>
		dsv2->rx.state = DSV2_WAITING_H4;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[2] = d;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
		return DSV2_PROGRESS;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0cb      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H4 && d == H4) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7adb      	ldrb	r3, [r3, #11]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d10b      	bne.n	8001018 <dsv2_decode_fragment+0x8c>
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d108      	bne.n	8001018 <dsv2_decode_fragment+0x8c>
		dsv2->rx.state = DSV2_WAITING_ID;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2204      	movs	r2, #4
 800100a:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[3] = d;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
		return DSV2_PROGRESS;
 8001014:	2301      	movs	r3, #1
 8001016:	e0bb      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_ID) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7adb      	ldrb	r3, [r3, #11]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d10b      	bne.n	8001038 <dsv2_decode_fragment+0xac>
		dsv2->rx.state = DSV2_WAITING_LEN1;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2205      	movs	r2, #5
 8001024:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[4] = d;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	78fa      	ldrb	r2, [r7, #3]
 800102a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		dsv2->rx.dev_id = d;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	711a      	strb	r2, [r3, #4]
		return DSV2_PROGRESS;
 8001034:	2301      	movs	r3, #1
 8001036:	e0ab      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN1) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7adb      	ldrb	r3, [r3, #11]
 800103c:	2b05      	cmp	r3, #5
 800103e:	d10c      	bne.n	800105a <dsv2_decode_fragment+0xce>
		dsv2->rx.state = DSV2_WAITING_LEN2;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2206      	movs	r2, #6
 8001044:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[5] = d;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		dsv2->rx.data_len = d;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8001056:	2301      	movs	r3, #1
 8001058:	e09a      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN2) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7adb      	ldrb	r3, [r3, #11]
 800105e:	2b06      	cmp	r3, #6
 8001060:	d113      	bne.n	800108a <dsv2_decode_fragment+0xfe>
		dsv2->rx.state = DSV2_WAITING_INST;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2207      	movs	r2, #7
 8001066:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[6] = d;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	78fa      	ldrb	r2, [r7, #3]
 800106c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		dsv2->rx.data_len |= d<<8;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	88db      	ldrh	r3, [r3, #6]
 8001074:	b21a      	sxth	r2, r3
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21b      	sxth	r3, r3
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8001086:	2301      	movs	r3, #1
 8001088:	e082      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_INST) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7adb      	ldrb	r3, [r3, #11]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d115      	bne.n	80010be <dsv2_decode_fragment+0x132>
		dsv2->rx.state = DSV2_WAITING_DATA;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2208      	movs	r2, #8
 8001096:	72da      	strb	r2, [r3, #11]
		dsv2->rx.counter = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	821a      	strh	r2, [r3, #16]
		dsv2->rx.crc_data[7] = d;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
		dsv2->rx.inst = d;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	729a      	strb	r2, [r3, #10]
		if(dsv2->rx.inst != 85) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7a9b      	ldrb	r3, [r3, #10]
 80010b0:	2b55      	cmp	r3, #85	; 0x55
 80010b2:	d002      	beq.n	80010ba <dsv2_decode_fragment+0x12e>
			dsv2->rx.state = DSV2_WAITING_H1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e068      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_DATA) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7adb      	ldrb	r3, [r3, #11]
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11f      	bne.n	8001106 <dsv2_decode_fragment+0x17a>
		dsv2->rx.crc_data[dsv2->rx.counter + 8] = d;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	8a1b      	ldrh	r3, [r3, #16]
 80010ca:	3308      	adds	r3, #8
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
		dsv2->rx.data[dsv2->rx.counter++] = d;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	8a1b      	ldrh	r3, [r3, #16]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	b291      	uxth	r1, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	8211      	strh	r1, [r2, #16]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	749a      	strb	r2, [r3, #18]
		if(dsv2->rx.counter == dsv2->rx.data_len-3) {  //DATA LENGTH CONTAINS INST, ERR AND CRC
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	8a1b      	ldrh	r3, [r3, #16]
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	88db      	ldrh	r3, [r3, #6]
 80010f6:	3b03      	subs	r3, #3
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d102      	bne.n	8001102 <dsv2_decode_fragment+0x176>
			dsv2->rx.state = DSV2_WAITING_CRC1;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2209      	movs	r2, #9
 8001100:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 8001102:	2301      	movs	r3, #1
 8001104:	e044      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC1) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7adb      	ldrb	r3, [r3, #11]
 800110a:	2b09      	cmp	r3, #9
 800110c:	d108      	bne.n	8001120 <dsv2_decode_fragment+0x194>
		dsv2->rx.state = DSV2_WAITING_CRC2;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	220a      	movs	r2, #10
 8001112:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc = d;
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	811a      	strh	r2, [r3, #8]
		return DSV2_PROGRESS;
 800111c:	2301      	movs	r3, #1
 800111e:	e037      	b.n	8001190 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC2) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7adb      	ldrb	r3, [r3, #11]
 8001124:	2b0a      	cmp	r3, #10
 8001126:	d12c      	bne.n	8001182 <dsv2_decode_fragment+0x1f6>
		dsv2->rx.state = DSV2_WAITING_H1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc |= d<<8;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	891b      	ldrh	r3, [r3, #8]
 8001132:	b21a      	sxth	r2, r3
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	811a      	strh	r2, [r3, #8]

		uint16_t crc = calc_crc(0, dsv2->rx.crc_data, dsv2->rx.data_len + 5);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f203 4112 	addw	r1, r3, #1042	; 0x412
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	88db      	ldrh	r3, [r3, #6]
 800114e:	3305      	adds	r3, #5
 8001150:	b29b      	uxth	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fe45 	bl	8000de4 <calc_crc>
 800115a:	4603      	mov	r3, r0
 800115c:	81fb      	strh	r3, [r7, #14]
		dsv2->rx.counter = 0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	821a      	strh	r2, [r3, #16]

		if(dsv2->rx.inst == 85) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a9b      	ldrb	r3, [r3, #10]
 8001168:	2b55      	cmp	r3, #85	; 0x55
 800116a:	d108      	bne.n	800117e <dsv2_decode_fragment+0x1f2>
			if(crc == dsv2->rx.crc) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	429a      	cmp	r2, r3
 8001174:	d101      	bne.n	800117a <dsv2_decode_fragment+0x1ee>
				return DSV2_SUCCESS;
 8001176:	2300      	movs	r3, #0
 8001178:	e00a      	b.n	8001190 <dsv2_decode_fragment+0x204>
			}else {
				return DSV2_WRONG_CRC;
 800117a:	2302      	movs	r3, #2
 800117c:	e008      	b.n	8001190 <dsv2_decode_fragment+0x204>
			}
		} else {
			return DSV2_PROGRESS;
 800117e:	2301      	movs	r3, #1
 8001180:	e006      	b.n	8001190 <dsv2_decode_fragment+0x204>




	}
	dsv2->rx.state = DSV2_WAITING_H1;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	72da      	strb	r2, [r3, #11]
	dsv2->rx.counter = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	821a      	strh	r2, [r3, #16]
	return DSV2_ERROR;
 800118e:	2303      	movs	r3, #3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <dsv2_rx_data>:

uint8_t * dsv2_rx_data(DSV2_INST_t * dsv2) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	return dsv2->rx.data;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3312      	adds	r3, #18
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <dsv2_tx_data>:

uint8_t * dsv2_tx_data(DSV2_INST_t * dsv2) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	return dsv2->tx.data;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f603 0318 	addw	r3, r3, #2072	; 0x818
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <led_init+0x44>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <led_init+0x44>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <led_init+0x44>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <led_init+0x44>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <led_init+0x44>)
 80011f6:	f006 fccf 	bl	8007b98 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <led_init+0x44>)
 80011fe:	f006 fccb 	bl	8007b98 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001202:	2108      	movs	r1, #8
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <led_init+0x44>)
 8001206:	f006 fcc7 	bl	8007b98 <HAL_TIMEx_PWMN_Start>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200086cc 	.word	0x200086cc

08001214 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <led_set_color+0x38>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <led_set_color+0x38>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <led_set_color+0x38>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	797a      	ldrb	r2, [r7, #5]
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200086cc 	.word	0x200086cc

08001250 <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001260:	e028      	b.n	80012b4 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001266:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1c9a      	adds	r2, r3, #2
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001272:	89bb      	ldrh	r3, [r7, #12]
 8001274:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800127c:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 800127e:	89bb      	ldrh	r3, [r7, #12]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001284:	897a      	ldrh	r2, [r7, #10]
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	4013      	ands	r3, r2
 800128a:	b29b      	uxth	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <calc_field_CRC+0x46>
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	3301      	adds	r3, #1
 8001294:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001296:	893b      	ldrh	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <calc_field_CRC+0x58>
 800129c:	89bb      	ldrh	r3, [r7, #12]
 800129e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1de      	bne.n	8001272 <calc_field_CRC+0x22>
	while (length--) {
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	807a      	strh	r2, [r7, #2]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1d1      	bne.n	8001262 <calc_field_CRC+0x12>

	}
	return crc;
 80012be:	89bb      	ldrh	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <msv2_init+0x24>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	4905      	ldr	r1, [pc, #20]	; (80012f0 <msv2_init+0x24>)
 80012dc:	600a      	str	r2, [r1, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000135c 	.word	0x2000135c

080012f4 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	72fb      	strb	r3, [r7, #11]
 8001302:	4613      	mov	r3, r2
 8001304:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001306:	7abb      	ldrb	r3, [r7, #10]
 8001308:	b29b      	uxth	r3, r3
 800130a:	3302      	adds	r3, #2
 800130c:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7aba      	ldrb	r2, [r7, #10]
 8001312:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	7afa      	ldrb	r2, [r7, #11]
 800131a:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2290      	movs	r2, #144	; 0x90
 8001322:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2202      	movs	r2, #2
 800132a:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	7aba      	ldrb	r2, [r7, #10]
 800133a:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 800133e:	7abb      	ldrb	r3, [r7, #10]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8001354:	2304      	movs	r3, #4
 8001356:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	82bb      	strh	r3, [r7, #20]
 800135c:	e05b      	b.n	8001416 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 800135e:	8abb      	ldrh	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	441a      	add	r2, r3
 8001368:	8afb      	ldrh	r3, [r7, #22]
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	82f9      	strh	r1, [r7, #22]
 800136e:	4619      	mov	r1, r3
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	440b      	add	r3, r1
 8001376:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	3b01      	subs	r3, #1
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001386:	2b90      	cmp	r3, #144	; 0x90
 8001388:	d108      	bne.n	800139c <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	82fa      	strh	r2, [r7, #22]
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	2290      	movs	r2, #144	; 0x90
 8001398:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 800139c:	8abb      	ldrh	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3301      	adds	r3, #1
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	441a      	add	r2, r3
 80013a6:	8afb      	ldrh	r3, [r7, #22]
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	82f9      	strh	r1, [r7, #22]
 80013ac:	4619      	mov	r1, r3
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 80013b8:	8afb      	ldrh	r3, [r7, #22]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80013c4:	2b90      	cmp	r3, #144	; 0x90
 80013c6:	d108      	bne.n	80013da <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	82fa      	strh	r2, [r7, #22]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	2290      	movs	r2, #144	; 0x90
 80013d6:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	3301      	adds	r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	8abb      	ldrh	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	440b      	add	r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	8abb      	ldrh	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	b291      	uxth	r1, r2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8001410:	8abb      	ldrh	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	82bb      	strh	r3, [r7, #20]
 8001416:	7abb      	ldrb	r3, [r7, #10]
 8001418:	b29b      	uxth	r3, r3
 800141a:	8aba      	ldrh	r2, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	d39e      	bcc.n	800135e <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8001420:	8a7b      	ldrh	r3, [r7, #18]
 8001422:	3b01      	subs	r3, #1
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	2200      	movs	r2, #0
 8001430:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8001438:	8a7a      	ldrh	r2, [r7, #18]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff07 	bl	8001250 <calc_field_CRC>
 8001442:	4603      	mov	r3, r0
 8001444:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	82fa      	strh	r2, [r7, #22]
 800144c:	4619      	mov	r1, r3
 800144e:	8a3b      	ldrh	r3, [r7, #16]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	440b      	add	r3, r1
 8001456:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 800145a:	8afb      	ldrh	r3, [r7, #22]
 800145c:	3b01      	subs	r3, #1
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001466:	2b90      	cmp	r3, #144	; 0x90
 8001468:	d108      	bne.n	800147c <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 800146a:	8afb      	ldrh	r3, [r7, #22]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	82fa      	strh	r2, [r7, #22]
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	2290      	movs	r2, #144	; 0x90
 8001478:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 800147c:	8a3b      	ldrh	r3, [r7, #16]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	8afb      	ldrh	r3, [r7, #22]
 8001484:	1c59      	adds	r1, r3, #1
 8001486:	82f9      	strh	r1, [r7, #22]
 8001488:	4619      	mov	r1, r3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	440b      	add	r3, r1
 8001490:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001494:	8afb      	ldrh	r3, [r7, #22]
 8001496:	3b01      	subs	r3, #1
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80014a0:	2b90      	cmp	r3, #144	; 0x90
 80014a2:	d108      	bne.n	80014b6 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 80014a4:	8afb      	ldrh	r3, [r7, #22]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	82fa      	strh	r2, [r7, #22]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	2290      	movs	r2, #144	; 0x90
 80014b2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 80014b6:	8afb      	ldrh	r3, [r7, #22]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a5b      	ldrb	r3, [r3, #9]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10a      	bne.n	80014ea <msv2_decode_fragment+0x2a>
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0da      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7a1b      	ldrb	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <msv2_decode_fragment+0x42>
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b90      	cmp	r3, #144	; 0x90
 80014f6:	d104      	bne.n	8001502 <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0ce      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b90      	cmp	r3, #144	; 0x90
 8001506:	d108      	bne.n	800151a <msv2_decode_fragment+0x5a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7a5b      	ldrb	r3, [r3, #9]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001516:	2301      	movs	r3, #1
 8001518:	e0c2      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	2b90      	cmp	r3, #144	; 0x90
 800151e:	d106      	bne.n	800152e <msv2_decode_fragment+0x6e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7a5b      	ldrb	r3, [r3, #9]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d102      	bne.n	800152e <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7a1b      	ldrb	r3, [r3, #8]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <msv2_decode_fragment+0x86>
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d104      	bne.n	8001546 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001542:	2301      	movs	r3, #1
 8001544:	e0ac      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a1b      	ldrb	r3, [r3, #8]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	78fa      	ldrb	r2, [r7, #3]
 8001552:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800155a:	2301      	movs	r3, #1
 800155c:	e0a0      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7a1b      	ldrb	r3, [r3, #8]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d11d      	bne.n	80015a2 <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	b29b      	uxth	r3, r3
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	795b      	ldrb	r3, [r3, #5]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07e      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a1b      	ldrb	r3, [r3, #8]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d136      	bne.n	8001618 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	899b      	ldrh	r3, [r3, #12]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	899b      	ldrh	r3, [r3, #12]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	7b9b      	ldrb	r3, [r3, #14]
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b291      	uxth	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	460a      	mov	r2, r1
 80015f4:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	899b      	ldrh	r3, [r3, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	899a      	ldrh	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	895b      	ldrh	r3, [r3, #10]
 800160a:	429a      	cmp	r2, r3
 800160c:	d102      	bne.n	8001614 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2205      	movs	r2, #5
 8001612:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8001614:	2301      	movs	r3, #1
 8001616:	e043      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d108      	bne.n	8001632 <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2206      	movs	r2, #6
 800162c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800162e:	2301      	movs	r3, #1
 8001630:	e036      	b.n	80016a0 <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7a1b      	ldrb	r3, [r3, #8]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d12e      	bne.n	8001698 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	88db      	ldrh	r3, [r3, #6]
 800163e:	b21a      	sxth	r2, r3
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	3301      	adds	r3, #1
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	2200      	movs	r2, #0
 8001668:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	b29b      	uxth	r3, r3
 8001676:	3302      	adds	r3, #2
 8001678:	b29b      	uxth	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	4610      	mov	r0, r2
 800167e:	f7ff fde7 	bl	8001250 <calc_field_CRC>
 8001682:	4603      	mov	r3, r0
 8001684:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	88db      	ldrh	r3, [r3, #6]
 800168a:	89fa      	ldrh	r2, [r7, #14]
 800168c:	429a      	cmp	r2, r3
 800168e:	d101      	bne.n	8001694 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 8001690:	2300      	movs	r3, #0
 8001692:	e005      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8001694:	2302      	movs	r3, #2
 8001696:	e003      	b.n	80016a0 <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	b288      	uxth	r0, r1
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	8008      	strh	r0, [r1, #0]
 8001710:	4413      	add	r3, r2
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	881a      	ldrh	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	889b      	ldrh	r3, [r3, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d102      	bne.n	8001728 <util_buffer_u8_add+0x34>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	885b      	ldrh	r3, [r3, #2]
 8001744:	1c59      	adds	r1, r3, #1
 8001746:	b288      	uxth	r0, r1
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	8048      	strh	r0, [r1, #2]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	885a      	ldrh	r2, [r3, #2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d102      	bne.n	8001764 <util_buffer_u8_get+0x30>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	805a      	strh	r2, [r3, #2]
	return tmp;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	885a      	ldrh	r2, [r3, #2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	81fb      	strh	r3, [r7, #14]
 80017a4:	e021      	b.n	80017ea <HAL_UART_RxCpltCallback+0x52>
		if(serial_devices[i]->uart == huart) {
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_UART_RxCpltCallback+0x7c>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d116      	bne.n	80017e4 <HAL_UART_RxCpltCallback+0x4c>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_UART_RxCpltCallback+0x7c>)
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	f103 0210 	add.w	r2, r3, #16
 80017c2:	89fb      	ldrh	r3, [r7, #14]
 80017c4:	4913      	ldr	r1, [pc, #76]	; (8001814 <HAL_UART_RxCpltCallback+0x7c>)
 80017c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ca:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff ff8f 	bl	80016f4 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_UART_RxCpltCallback+0x80>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <HAL_UART_RxCpltCallback+0x84>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 f8e9 	bl	80099b4 <xQueueGiveFromISR>
			break;
 80017e2:	e007      	b.n	80017f4 <HAL_UART_RxCpltCallback+0x5c>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	3301      	adds	r3, #1
 80017e8:	81fb      	strh	r3, [r7, #14]
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_UART_RxCpltCallback+0x88>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	89fa      	ldrh	r2, [r7, #14]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3d8      	bcc.n	80017a6 <HAL_UART_RxCpltCallback+0xe>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_UART_RxCpltCallback+0x84>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_UART_RxCpltCallback+0x74>
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_UART_RxCpltCallback+0x8c>)
 80017fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	f3bf 8f6f 	isb	sy
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20001360 	.word	0x20001360
 8001818:	200013a4 	.word	0x200013a4
 800181c:	200013f0 	.word	0x200013f0
 8001820:	200013a0 	.word	0x200013a0
 8001824:	e000ed04 	.word	0xe000ed04

08001828 <serial_global_init>:



void serial_global_init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 800182e:	2303      	movs	r3, #3
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <serial_global_init+0x24>)
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2001      	movs	r0, #1
 800183a:	f007 fef5 	bl	8009628 <xQueueGenericCreateStatic>
 800183e:	4603      	mov	r3, r0
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <serial_global_init+0x28>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200013a8 	.word	0x200013a8
 8001850:	200013a4 	.word	0x200013a4

08001854 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <serial_init+0x78>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f103 0010 	add.w	r0, r3, #16
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	331c      	adds	r3, #28
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff ff18 	bl	80016c2 <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <serial_init+0x78>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	d80e      	bhi.n	80018b8 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	68b8      	ldr	r0, [r7, #8]
 80018a6:	f006 fbb7 	bl	8008018 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <serial_init+0x78>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <serial_init+0x7c>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <serial_init+0x78>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <serial_init+0x78>)
 80018c2:	801a      	strh	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200013a0 	.word	0x200013a0
 80018d0:	20001360 	.word	0x20001360

080018d4 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 fb28 	bl	8007f40 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <serial_thread>:


void serial_thread(void * arg) {
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

	serial_global_init();
 8001900:	f7ff ff92 	bl	8001828 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <serial_thread+0x7c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800190c:	4618      	mov	r0, r3
 800190e:	f008 f8df 	bl	8009ad0 <xQueueSemaphoreTake>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1f5      	bne.n	8001904 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	81fb      	strh	r3, [r7, #14]
 800191c:	e023      	b.n	8001966 <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <serial_thread+0x80>)
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	68dc      	ldr	r4, [r3, #12]
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <serial_thread+0x80>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	689d      	ldr	r5, [r3, #8]
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	4a10      	ldr	r2, [pc, #64]	; (8001978 <serial_thread+0x80>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	3310      	adds	r3, #16
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fef9 	bl	8001734 <util_buffer_u8_get>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	4628      	mov	r0, r5
 8001948:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <serial_thread+0x80>)
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	3310      	adds	r3, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff0c 	bl	8001772 <util_buffer_u8_isempty>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0de      	beq.n	800191e <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	3301      	adds	r3, #1
 8001964:	81fb      	strh	r3, [r7, #14]
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <serial_thread+0x84>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	89fa      	ldrh	r2, [r7, #14]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3ec      	bcc.n	800194a <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8001970:	e7c8      	b.n	8001904 <serial_thread+0xc>
 8001972:	bf00      	nop
 8001974:	200013a4 	.word	0x200013a4
 8001978:	20001360 	.word	0x20001360
 800197c:	200013a0 	.word	0x200013a0

08001980 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3301      	adds	r3, #1
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3302      	adds	r3, #2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3303      	adds	r3, #3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	121a      	asrs	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	141a      	asrs	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3302      	adds	r3, #2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	161a      	asrs	r2, r3, #24
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3303      	adds	r3, #3
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <util_decode_u8>:
static inline uint8_t util_decode_u8(uint8_t * data) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	return data[0];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <util_decode_u16>:
static inline uint16_t util_decode_u16(uint8_t * data) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	b29b      	uxth	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <util_decode_i8>:
static inline int8_t util_decode_i8(uint8_t * data) {
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return data[0];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b25b      	sxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3303      	adds	r3, #3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	4313      	orrs	r3, r2
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <servo_init>:
/**********************
 *	DECLARATIONS
 **********************/


void servo_init(SERVO_INST_t * servo, uint8_t dev_id) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
	static uint32_t id_counter = 0;
	servo->id = id_counter++;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <servo_init+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4915      	ldr	r1, [pc, #84]	; (8001af4 <servo_init+0x68>)
 8001aa0:	600a      	str	r2, [r1, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]

	servo->dev_id = dev_id;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001aac:	331c      	adds	r3, #28
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	701a      	strb	r2, [r3, #0]
	servo_list[servo_count++] = servo;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <servo_init+0x6c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <servo_init+0x6c>)
 8001abc:	7011      	strb	r1, [r2, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <servo_init+0x70>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	servo->rx_sem = xSemaphoreCreateBinaryStatic(&servo->rx_sem_buffer);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ace:	3308      	adds	r3, #8
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	9200      	str	r2, [sp, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f007 fda5 	bl	8009628 <xQueueGenericCreateStatic>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200024bc 	.word	0x200024bc
 8001af8:	20001434 	.word	0x20001434
 8001afc:	200013f4 	.word	0x200013f4

08001b00 <servo_global_init>:

void servo_global_init(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	dsv2_init(&servo_dsv2);
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <servo_global_init+0x28>)
 8001b06:	f7ff f9bb 	bl	8000e80 <dsv2_init>
	serial_init(&servo_serial, &DYNAMIXEL_UART, &servo_dsv2, servo_decode_fcn);
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <servo_global_init+0x2c>)
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <servo_global_init+0x28>)
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <servo_global_init+0x30>)
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <servo_global_init+0x34>)
 8001b12:	f7ff fe9f 	bl	8001854 <serial_init>
	servo_busy_sem = xSemaphoreCreateMutexStatic(&servo_busy_sem_buffer);
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <servo_global_init+0x38>)
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f007 fe32 	bl	8009782 <xQueueCreateMutexStatic>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <servo_global_init+0x3c>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20001858 	.word	0x20001858
 8001b2c:	08001b41 	.word	0x08001b41
 8001b30:	20008a0c 	.word	0x20008a0c
 8001b34:	20001438 	.word	0x20001438
 8001b38:	20002474 	.word	0x20002474
 8001b3c:	20002470 	.word	0x20002470

08001b40 <servo_decode_fcn>:

SERIAL_RET_t servo_decode_fcn(void * inst, uint8_t data) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
	DSV2_INST_t * dsv2 = (DSV2_INST_t * ) inst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	613b      	str	r3, [r7, #16]
	DSV2_ERROR_t tmp = dsv2_decode_fragment(dsv2, data);
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	6938      	ldr	r0, [r7, #16]
 8001b56:	f7ff fa19 	bl	8000f8c <dsv2_decode_fragment>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
	//this should release the semaphore corresponding the the right epos board if bridged
	if(tmp == DSV2_SUCCESS || tmp == DSV2_WRONG_CRC) {
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <servo_decode_fcn+0x2a>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d128      	bne.n	8001bbc <servo_decode_fcn+0x7c>
		if(dsv2->rx.inst == 0x55) { // ONLY HANDLE STATUS PACKETS
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	7a9b      	ldrb	r3, [r3, #10]
 8001b6e:	2b55      	cmp	r3, #85	; 0x55
 8001b70:	d124      	bne.n	8001bbc <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	75fb      	strb	r3, [r7, #23]
 8001b76:	e01c      	b.n	8001bb2 <servo_decode_fcn+0x72>
				if(servo_list[i]->dev_id == dsv2->rx.dev_id) {
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <servo_decode_fcn+0x88>)
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001b84:	331c      	adds	r3, #28
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10d      	bne.n	8001bac <servo_decode_fcn+0x6c>
					xSemaphoreGive(servo_list[i]->rx_sem);
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <servo_decode_fcn+0x88>)
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f007 fe07 	bl	80097b8 <xQueueGenericSend>
					break;
 8001baa:	e007      	b.n	8001bbc <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <servo_decode_fcn+0x8c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	7dfa      	ldrb	r2, [r7, #23]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3dd      	bcc.n	8001b78 <servo_decode_fcn+0x38>
				}
			}
		}
	}
	return tmp;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200013f4 	.word	0x200013f4
 8001bcc:	20001434 	.word	0x20001434

08001bd0 <servo_read>:
/*
 * address of the object
 * length to read
 * data to read into
 */
SERVO_ERROR_t servo_read(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	4613      	mov	r3, r2
 8001be0:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <servo_read+0x118>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	21c8      	movs	r1, #200	; 0xc8
 8001be8:	4618      	mov	r0, r3
 8001bea:	f007 ff71 	bl	8009ad0 <xQueueSemaphoreTake>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d174      	bne.n	8001cde <servo_read+0x10e>
		static uint8_t send_data[MAX_READ_LEN];
		send_data[0] = address & 0xff;
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <servo_read+0x11c>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <servo_read+0x11c>)
 8001c06:	705a      	strb	r2, [r3, #1]
		send_data[2] = length & 0xff;
 8001c08:	893b      	ldrh	r3, [r7, #8]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <servo_read+0x11c>)
 8001c0e:	709a      	strb	r2, [r3, #2]
		send_data[3] = length>>8;
 8001c10:	893b      	ldrh	r3, [r7, #8]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <servo_read+0x11c>)
 8001c1a:	70da      	strb	r2, [r3, #3]
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, MAX_READ_LEN, READ_INST, send_data);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001c22:	331c      	adds	r3, #28
 8001c24:	7819      	ldrb	r1, [r3, #0]
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <servo_read+0x11c>)
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <servo_read+0x120>)
 8001c30:	f7ff f93a 	bl	8000ea8 <dsv2_create_frame>
 8001c34:	4603      	mov	r3, r0
 8001c36:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 8001c38:	482d      	ldr	r0, [pc, #180]	; (8001cf0 <servo_read+0x120>)
 8001c3a:	f7ff fab9 	bl	80011b0 <dsv2_tx_data>
 8001c3e:	4601      	mov	r1, r0
 8001c40:	8abb      	ldrh	r3, [r7, #20]
 8001c42:	461a      	mov	r2, r3
 8001c44:	482b      	ldr	r0, [pc, #172]	; (8001cf4 <servo_read+0x124>)
 8001c46:	f7ff fe45 	bl	80018d4 <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	210a      	movs	r1, #10
 8001c56:	4618      	mov	r0, r3
 8001c58:	f007 ff3a 	bl	8009ad0 <xQueueSemaphoreTake>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d134      	bne.n	8001ccc <servo_read+0xfc>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <servo_read+0x120>)
 8001c64:	f7ff fa98 	bl	8001198 <dsv2_rx_data>
 8001c68:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <servo_read+0xa8>
				*err = recieved_data[0];
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t i = 0; i < length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	75fb      	strb	r3, [r7, #23]
 8001c7c:	e00b      	b.n	8001c96 <servo_read+0xc6>
				data[i] = recieved_data[i+1];
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	3301      	adds	r3, #1
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	441a      	add	r2, r3
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	440b      	add	r3, r1
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < length; i++){
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	3301      	adds	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	893a      	ldrh	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8ee      	bhi.n	8001c7e <servo_read+0xae>
			}
			if(*err == 0) {
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d108      	bne.n	8001cba <servo_read+0xea>
				xSemaphoreGive(servo_busy_sem);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <servo_read+0x118>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f007 fd81 	bl	80097b8 <xQueueGenericSend>
				return SERVO_SUCCESS;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e012      	b.n	8001ce0 <servo_read+0x110>
			} else {
				xSemaphoreGive(servo_busy_sem);
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <servo_read+0x118>)
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f007 fd78 	bl	80097b8 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e009      	b.n	8001ce0 <servo_read+0x110>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <servo_read+0x118>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f007 fd6f 	bl	80097b8 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <servo_read+0x110>
		}
	} else {
		return SERVO_BUSY;
 8001cde:	2304      	movs	r3, #4
	}
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20002470 	.word	0x20002470
 8001cec:	200024c0 	.word	0x200024c0
 8001cf0:	20001858 	.word	0x20001858
 8001cf4:	20001438 	.word	0x20001438

08001cf8 <servo_write>:
/*
 * address of the object
 * length of the data to write
 * data to write
 */
SERVO_ERROR_t servo_write(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	817b      	strh	r3, [r7, #10]
 8001d06:	4613      	mov	r3, r2
 8001d08:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <servo_write+0x104>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	21c8      	movs	r1, #200	; 0xc8
 8001d10:	4618      	mov	r0, r3
 8001d12:	f007 fedd 	bl	8009ad0 <xQueueSemaphoreTake>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d16a      	bne.n	8001df2 <servo_write+0xfa>
		static uint8_t send_data[MAX_WRITE_LEN];
		send_data[0] = address & 0xff;
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <servo_write+0x108>)
 8001d22:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <servo_write+0x108>)
 8001d2e:	705a      	strb	r2, [r3, #1]
		for(uint16_t i = 0; i < length; i++) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	82fb      	strh	r3, [r7, #22]
 8001d34:	e00a      	b.n	8001d4c <servo_write+0x54>
			send_data[2 + i] = data[i];
 8001d36:	8afb      	ldrh	r3, [r7, #22]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	7811      	ldrb	r1, [r2, #0]
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <servo_write+0x108>)
 8001d44:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i = 0; i < length; i++) {
 8001d46:	8afb      	ldrh	r3, [r7, #22]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	82fb      	strh	r3, [r7, #22]
 8001d4c:	8afa      	ldrh	r2, [r7, #22]
 8001d4e:	893b      	ldrh	r3, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3f0      	bcc.n	8001d36 <servo_write+0x3e>
		}
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, length+2, WRITE_INST, send_data);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001d5a:	331c      	adds	r3, #28
 8001d5c:	7819      	ldrb	r1, [r3, #0]
 8001d5e:	893b      	ldrh	r3, [r7, #8]
 8001d60:	3302      	adds	r3, #2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <servo_write+0x108>)
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2303      	movs	r3, #3
 8001d6a:	4826      	ldr	r0, [pc, #152]	; (8001e04 <servo_write+0x10c>)
 8001d6c:	f7ff f89c 	bl	8000ea8 <dsv2_create_frame>
 8001d70:	4603      	mov	r3, r0
 8001d72:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 8001d74:	4823      	ldr	r0, [pc, #140]	; (8001e04 <servo_write+0x10c>)
 8001d76:	f7ff fa1b 	bl	80011b0 <dsv2_tx_data>
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	8abb      	ldrh	r3, [r7, #20]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4821      	ldr	r0, [pc, #132]	; (8001e08 <servo_write+0x110>)
 8001d82:	f7ff fda7 	bl	80018d4 <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	210a      	movs	r1, #10
 8001d92:	4618      	mov	r0, r3
 8001d94:	f007 fe9c 	bl	8009ad0 <xQueueSemaphoreTake>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d120      	bne.n	8001de0 <servo_write+0xe8>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <servo_write+0x10c>)
 8001da0:	f7ff f9fa 	bl	8001198 <dsv2_rx_data>
 8001da4:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <servo_write+0xbc>
				*err = recieved_data[0];
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	701a      	strb	r2, [r3, #0]
			}
			if(*err == 0) {
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d108      	bne.n	8001dce <servo_write+0xd6>
				xSemaphoreGive(servo_busy_sem);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <servo_write+0x104>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f007 fcf7 	bl	80097b8 <xQueueGenericSend>
				return SERVO_SUCCESS;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e012      	b.n	8001df4 <servo_write+0xfc>
			} else {
				xSemaphoreGive(servo_busy_sem);
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <servo_write+0x104>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f007 fcee 	bl	80097b8 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e009      	b.n	8001df4 <servo_write+0xfc>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <servo_write+0x104>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	f007 fce5 	bl	80097b8 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <servo_write+0xfc>
		}
	} else {
		return SERVO_BUSY;
 8001df2:	2304      	movs	r3, #4
	}
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20002470 	.word	0x20002470
 8001e00:	200024c4 	.word	0x200024c4
 8001e04:	20001858 	.word	0x20001858
 8001e08:	20001438 	.word	0x20001438

08001e0c <servo_write_u8>:
		return SERVO_BUSY;
	}
}


SERVO_ERROR_t servo_write_u8(SERVO_INST_t * servo, uint16_t address, uint8_t data, uint8_t * err) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	727b      	strb	r3, [r7, #9]
	uint8_t bin_data[DATA_SIZE];
	util_encode_u8(bin_data, data);
 8001e1e:	7a7a      	ldrb	r2, [r7, #9]
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fdaa 	bl	8001980 <util_encode_u8>
	return servo_write(servo, address, 1, bin_data, err);
 8001e2c:	f107 0214 	add.w	r2, r7, #20
 8001e30:	8979      	ldrh	r1, [r7, #10]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	2201      	movs	r2, #1
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff ff5c 	bl	8001cf8 <servo_write>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <servo_write_i32>:
	uint8_t bin_data[DATA_SIZE];
	util_encode_i16(bin_data, data);
	return servo_write(servo, address, 2, bin_data, err);
}

SERVO_ERROR_t servo_write_i32(SERVO_INST_t * servo, uint16_t address, int32_t data, uint8_t * err) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	460b      	mov	r3, r1
 8001e58:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	util_encode_i32(bin_data, data);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fda8 	bl	80019b6 <util_encode_i32>
	return servo_write(servo, address, 4, bin_data, err);
 8001e66:	f107 0214 	add.w	r2, r7, #20
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	2204      	movs	r2, #4
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff ff3f 	bl	8001cf8 <servo_write>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <servo_read_u8>:

SERVO_ERROR_t servo_read_u8(SERVO_INST_t * servo, uint16_t address, uint8_t * data, uint8_t * err) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	460b      	mov	r3, r1
 8001e92:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 8001e94:	f107 0210 	add.w	r2, r7, #16
 8001e98:	8979      	ldrh	r1, [r7, #10]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fe94 	bl	8001bd0 <servo_read>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u8(bin_data);
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fda1 	bl	80019f8 <util_decode_u8>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	701a      	strb	r2, [r3, #0]
	return tmp;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <servo_read_u16>:

SERVO_ERROR_t servo_read_u16(SERVO_INST_t * servo, uint16_t address, uint16_t * data, uint8_t * err) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
 8001ed8:	f107 0210 	add.w	r2, r7, #16
 8001edc:	8979      	ldrh	r1, [r7, #10]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fe72 	bl	8001bd0 <servo_read>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u16(bin_data);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fd8b 	bl	8001a10 <util_decode_u16>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	801a      	strh	r2, [r3, #0]
	return tmp;
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <servo_read_i8>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
	*data = util_decode_u32(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i8(SERVO_INST_t * servo, uint16_t address, int8_t * data, uint8_t * err) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	2201      	movs	r2, #1
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff fe50 	bl	8001bd0 <servo_read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i8(bin_data);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fd7e 	bl	8001a3a <util_decode_i8>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	701a      	strb	r2, [r3, #0]
	return tmp;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <servo_read_i32>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
	*data = util_decode_i16(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i32(SERVO_INST_t * servo, uint16_t address, int32_t * data, uint8_t * err) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fe2e 	bl	8001bd0 <servo_read>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i32(bin_data);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fd69 	bl	8001a54 <util_decode_i32>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
	return tmp;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <servo_sync>:



//HIGH LEVEL FUNCTIONS

SERVO_ERROR_t servo_sync(SERVO_INST_t * servo) {
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u8(servo, SERVO_HARDWARE_ERROR_STATUS, &servo->error, &err);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8001fa4:	3218      	adds	r2, #24
 8001fa6:	f107 030e 	add.w	r3, r7, #14
 8001faa:	2146      	movs	r1, #70	; 0x46
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff69 	bl	8001e84 <servo_read_u8>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u16(servo, SERVO_PRESENT_INPUT_VOLTAGE, &servo->psu_voltage, &err);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8001fc2:	3210      	adds	r2, #16
 8001fc4:	f107 030e 	add.w	r3, r7, #14
 8001fc8:	2190      	movs	r1, #144	; 0x90
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff7c 	bl	8001ec8 <servo_read_u16>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i8(servo, SERVO_PRESENT_TEMPERATURE, &servo->temperature, &err);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8001fe0:	3212      	adds	r2, #18
 8001fe2:	f107 030e 	add.w	r3, r7, #14
 8001fe6:	2192      	movs	r1, #146	; 0x92
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff8f 	bl	8001f0c <servo_read_i8>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i32(servo, SERVO_PRESENT_POSITION, &servo->position, &err);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8001ffe:	3214      	adds	r2, #20
 8002000:	f107 030e 	add.w	r3, r7, #14
 8002004:	2184      	movs	r1, #132	; 0x84
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <servo_read_i32>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	4313      	orrs	r3, r2
 8002014:	73fb      	strb	r3, [r7, #15]


	return error;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <servo_config>:

SERVO_ERROR_t servo_config(SERVO_INST_t * servo) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

	error |= servo_disable_torque(servo, &err);
 800202c:	f107 030e 	add.w	r3, r7, #14
 8002030:	2200      	movs	r2, #0
 8002032:	2140      	movs	r1, #64	; 0x40
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fee9 	bl	8001e0c <servo_write_u8>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	4313      	orrs	r3, r2
 8002042:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MAX_POSITION_LIMIT, 4095, &err);
 8002044:	f107 030e 	add.w	r3, r7, #14
 8002048:	f640 72ff 	movw	r2, #4095	; 0xfff
 800204c:	2130      	movs	r1, #48	; 0x30
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fefb 	bl	8001e4a <servo_write_i32>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	4313      	orrs	r3, r2
 800205c:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MIN_POSITION_LIMIT, 0, &err);
 800205e:	f107 030e 	add.w	r3, r7, #14
 8002062:	2200      	movs	r2, #0
 8002064:	2134      	movs	r1, #52	; 0x34
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff feef 	bl	8001e4a <servo_write_i32>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	4313      	orrs	r3, r2
 8002074:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_u8(servo, SERVO_OPERATING_MODE, 3, &err);
 8002076:	f107 030e 	add.w	r3, r7, #14
 800207a:	2203      	movs	r2, #3
 800207c:	210b      	movs	r1, #11
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fec4 	bl	8001e0c <servo_write_u8>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4313      	orrs	r3, r2
 800208c:	73fb      	strb	r3, [r7, #15]

	return error;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <servo_move>:

SERVO_ERROR_t servo_move(SERVO_INST_t * servo, int32_t target) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]

	error |= servo_enable_torque(servo, &err);
 80020a6:	f107 030e 	add.w	r3, r7, #14
 80020aa:	2201      	movs	r2, #1
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff feac 	bl	8001e0c <servo_write_u8>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_GOAL_POSITION, target, &err);
 80020be:	f107 030e 	add.w	r3, r7, #14
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	2174      	movs	r1, #116	; 0x74
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff febf 	bl	8001e4a <servo_write_i32>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	73fb      	strb	r3, [r7, #15]

	return error;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b09c      	sub	sp, #112	; 0x70
 80020e4:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 80020e6:	f006 ff3c 	bl	8008f62 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80020ea:	2210      	movs	r2, #16
 80020ec:	4936      	ldr	r1, [pc, #216]	; (80021c8 <storage_init+0xe8>)
 80020ee:	2000      	movs	r0, #0
 80020f0:	f006 ff5c 	bl	8008fac <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <storage_init+0xe8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a34      	ldr	r2, [pc, #208]	; (80021cc <storage_init+0xec>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d149      	bne.n	8002192 <storage_init+0xb2>
		used_subsectors = header.used;
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <storage_init+0xe8>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <storage_init+0xf0>)
 8002104:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <storage_init+0xf0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d93d      	bls.n	800218a <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	2220      	movs	r2, #32
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f009 f988 	bl	800b42c <memset>
			STORAGE_DATA_t last_valid_data = {0};
 800211c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f009 f981 	bl	800b42c <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <storage_init+0xf0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b02      	subs	r3, #2
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f878 	bl	8002230 <read_data>
			while(data.sample_id == count){
 8002140:	e01a      	b.n	8002178 <storage_init+0x98>
				last_valid_data = data;
 8002142:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002146:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800214a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 8002156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002158:	3301      	adds	r3, #1
 800215a:	667b      	str	r3, [r7, #100]	; 0x64
 800215c:	463b      	mov	r3, r7
 800215e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f865 	bl	8002230 <read_data>
 8002166:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800216a:	463d      	mov	r5, r7
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 8002178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800217a:	461a      	mov	r2, r3
 800217c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800217e:	4293      	cmp	r3, r2
 8002180:	d0df      	beq.n	8002142 <storage_init+0x62>
			}

			data_counter = count;
 8002182:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <storage_init+0xf4>)
 8002184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e009      	b.n	800219e <storage_init+0xbe>
		} else {
			data_counter = 0;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <storage_init+0xf4>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e005      	b.n	800219e <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 f828 	bl	80021e8 <write_header_used>
		data_counter = 0;
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <storage_init+0xf4>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <storage_init+0xf8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <storage_init+0xfc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 80021aa:	2303      	movs	r3, #3
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <storage_init+0x100>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2001      	movs	r0, #1
 80021b6:	f007 fa37 	bl	8009628 <xQueueGenericCreateStatic>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <storage_init+0x104>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3768      	adds	r7, #104	; 0x68
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bdb0      	pop	{r4, r5, r7, pc}
 80021c8:	20002560 	.word	0x20002560
 80021cc:	cbe0c5e6 	.word	0xcbe0c5e6
 80021d0:	20002504 	.word	0x20002504
 80021d4:	20002508 	.word	0x20002508
 80021d8:	2000250c 	.word	0x2000250c
 80021dc:	2000250d 	.word	0x2000250d
 80021e0:	20002518 	.word	0x20002518
 80021e4:	20002514 	.word	0x20002514

080021e8 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80021f0:	2210      	movs	r2, #16
 80021f2:	490c      	ldr	r1, [pc, #48]	; (8002224 <write_header_used+0x3c>)
 80021f4:	2000      	movs	r0, #0
 80021f6:	f006 fed9 	bl	8008fac <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f006 ffce 	bl	800919c <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <write_header_used+0x3c>)
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <write_header_used+0x40>)
 8002204:	601a      	str	r2, [r3, #0]
	header.used = used;
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <write_header_used+0x3c>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 800220c:	2210      	movs	r2, #16
 800220e:	4905      	ldr	r1, [pc, #20]	; (8002224 <write_header_used+0x3c>)
 8002210:	2000      	movs	r0, #0
 8002212:	f006 ff4c 	bl	80090ae <flash_write>
	used_subsectors = used;
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <write_header_used+0x44>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20002570 	.word	0x20002570
 8002228:	cbe0c5e6 	.word	0xcbe0c5e6
 800222c:	20002504 	.word	0x20002504

08002230 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3380      	adds	r3, #128	; 0x80
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	2220      	movs	r2, #32
 8002242:	4909      	ldr	r1, [pc, #36]	; (8002268 <read_data+0x38>)
 8002244:	4618      	mov	r0, r3
 8002246:	f006 feb1 	bl	8008fac <flash_read>
	return data;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <read_data+0x38>)
 800224e:	461c      	mov	r4, r3
 8002250:	4615      	mov	r5, r2
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800225a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bdb0      	pop	{r4, r5, r7, pc}
 8002266:	bf00      	nop
 8002268:	20002580 	.word	0x20002580

0800226c <storage_get_sample>:

uint32_t storage_get_used() {
	return data_counter;
}

void storage_get_sample(uint32_t id, void * dest) {
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6278      	str	r0, [r7, #36]	; 0x24
 8002274:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 8002276:	6a3c      	ldr	r4, [r7, #32]
 8002278:	463b      	mov	r3, r7
 800227a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ffd7 	bl	8002230 <read_data>
 8002282:	4625      	mov	r5, r4
 8002284:	463c      	mov	r4, r7
 8002286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800228e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800229c <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <storage_disable+0x18>)
 80022a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20002510 	.word	0x20002510

080022b8 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]



	storage_init();
 80022c0:	f7ff ff0e 	bl	80020e0 <storage_init>




	for(;;) {
		last_time = time;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <storage_thread+0x7c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <storage_thread+0x80>)
 80022ca:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 80022cc:	f001 fb18 	bl	8003900 <HAL_GetTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <storage_thread+0x7c>)
 80022d4:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <storage_thread+0x84>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <storage_thread+0x38>
			write_header_used(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff ff82 	bl	80021e8 <write_header_used>
			data_counter = 0;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <storage_thread+0x88>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <storage_thread+0x84>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <storage_thread+0x8c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d014      	beq.n	8002322 <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <storage_thread+0x80>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <storage_thread+0x7c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <storage_thread+0x8c>)
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <storage_thread+0x8c>)
 800230c:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <storage_thread+0x8c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	dc05      	bgt.n	8002322 <storage_thread+0x6a>
				record_active=0;
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <storage_thread+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <storage_thread+0x8c>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <storage_thread+0x94>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800232a:	4618      	mov	r0, r3
 800232c:	f007 fbd0 	bl	8009ad0 <xQueueSemaphoreTake>
		last_time = time;
 8002330:	e7c8      	b.n	80022c4 <storage_thread+0xc>
 8002332:	bf00      	nop
 8002334:	200025a0 	.word	0x200025a0
 8002338:	200025a4 	.word	0x200025a4
 800233c:	2000250d 	.word	0x2000250d
 8002340:	20002508 	.word	0x20002508
 8002344:	20002510 	.word	0x20002510
 8002348:	2000250c 	.word	0x2000250c
 800234c:	20002514 	.word	0x20002514

08002350 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af04      	add	r7, sp, #16


	serial_global_init();
 8002356:	f7ff fa67 	bl	8001828 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 800235a:	4824      	ldr	r0, [pc, #144]	; (80023ec <threads_init+0x9c>)
 800235c:	f7fe fcc8 	bl	8000cf0 <debug_init>

	can_init();
 8002360:	f7fe fa1a 	bl	8000798 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <threads_init+0xa0>)
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <threads_init+0xa4>)
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2303      	movs	r3, #3
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002376:	4920      	ldr	r1, [pc, #128]	; (80023f8 <threads_init+0xa8>)
 8002378:	4820      	ldr	r0, [pc, #128]	; (80023fc <threads_init+0xac>)
 800237a:	f007 fdb7 	bl	8009eec <xTaskCreateStatic>
 800237e:	4603      	mov	r3, r0
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <threads_init+0xb0>)
 8002382:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <threads_init+0xb4>)
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <threads_init+0xb8>)
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2305      	movs	r3, #5
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002396:	491d      	ldr	r1, [pc, #116]	; (800240c <threads_init+0xbc>)
 8002398:	481d      	ldr	r0, [pc, #116]	; (8002410 <threads_init+0xc0>)
 800239a:	f007 fda7 	bl	8009eec <xTaskCreateStatic>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <threads_init+0xc4>)
 80023a2:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <threads_init+0xc8>)
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <threads_init+0xcc>)
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2306      	movs	r3, #6
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2300      	movs	r3, #0
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	491a      	ldr	r1, [pc, #104]	; (8002420 <threads_init+0xd0>)
 80023b8:	481a      	ldr	r0, [pc, #104]	; (8002424 <threads_init+0xd4>)
 80023ba:	f007 fd97 	bl	8009eec <xTaskCreateStatic>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <threads_init+0xd8>)
 80023c2:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <threads_init+0xdc>)
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <threads_init+0xe0>)
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2303      	movs	r3, #3
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d6:	4917      	ldr	r1, [pc, #92]	; (8002434 <threads_init+0xe4>)
 80023d8:	4817      	ldr	r0, [pc, #92]	; (8002438 <threads_init+0xe8>)
 80023da:	f007 fd87 	bl	8009eec <xTaskCreateStatic>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <threads_init+0xec>)
 80023e2:	6013      	str	r3, [r2, #0]



}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200025b8 	.word	0x200025b8
 80023f0:	200049f0 	.word	0x200049f0
 80023f4:	200039f0 	.word	0x200039f0
 80023f8:	0800b654 	.word	0x0800b654
 80023fc:	080022b9 	.word	0x080022b9
 8002400:	200025b0 	.word	0x200025b0
 8002404:	20005a44 	.word	0x20005a44
 8002408:	20004a44 	.word	0x20004a44
 800240c:	0800b65c 	.word	0x0800b65c
 8002410:	080018f9 	.word	0x080018f9
 8002414:	200025ac 	.word	0x200025ac
 8002418:	20006a98 	.word	0x20006a98
 800241c:	20005a98 	.word	0x20005a98
 8002420:	0800b664 	.word	0x0800b664
 8002424:	080007d1 	.word	0x080007d1
 8002428:	200025a8 	.word	0x200025a8
 800242c:	20007aec 	.word	0x20007aec
 8002430:	20006aec 	.word	0x20006aec
 8002434:	0800b66c 	.word	0x0800b66c
 8002438:	080007a9 	.word	0x080007a9
 800243c:	200025b4 	.word	0x200025b4

08002440 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <MX_ADC1_Init+0x10c>)
 8002454:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <MX_ADC1_Init+0x110>)
 8002456:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002458:	4b3c      	ldr	r3, [pc, #240]	; (800254c <MX_ADC1_Init+0x10c>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <MX_ADC1_Init+0x10c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <MX_ADC1_Init+0x10c>)
 8002466:	2201      	movs	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <MX_ADC1_Init+0x10c>)
 800246c:	2200      	movs	r2, #0
 800246e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <MX_ADC1_Init+0x10c>)
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <MX_ADC1_Init+0x10c>)
 800247a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <MX_ADC1_Init+0x10c>)
 8002482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <MX_ADC1_Init+0x10c>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <MX_ADC1_Init+0x10c>)
 8002490:	2205      	movs	r2, #5
 8002492:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <MX_ADC1_Init+0x10c>)
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <MX_ADC1_Init+0x10c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024a2:	482a      	ldr	r0, [pc, #168]	; (800254c <MX_ADC1_Init+0x10c>)
 80024a4:	f001 fa38 	bl	8003918 <HAL_ADC_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80024ae:	f000 fb39 	bl	8002b24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80024ba:	2301      	movs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4822      	ldr	r0, [pc, #136]	; (800254c <MX_ADC1_Init+0x10c>)
 80024c4:	f001 fa6c 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80024ce:	f000 fb29 	bl	8002b24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80024d2:	230a      	movs	r3, #10
 80024d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024d6:	2302      	movs	r3, #2
 80024d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	481b      	ldr	r0, [pc, #108]	; (800254c <MX_ADC1_Init+0x10c>)
 80024e0:	f001 fa5e 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80024ea:	f000 fb1b 	bl	8002b24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024f2:	2303      	movs	r3, #3
 80024f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	4814      	ldr	r0, [pc, #80]	; (800254c <MX_ADC1_Init+0x10c>)
 80024fc:	f001 fa50 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8002506:	f000 fb0d 	bl	8002b24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800250a:	2301      	movs	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800250e:	2304      	movs	r3, #4
 8002510:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <MX_ADC1_Init+0x10c>)
 8002518:	f001 fa42 	bl	80039a0 <HAL_ADC_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002522:	f000 faff 	bl	8002b24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002526:	2303      	movs	r3, #3
 8002528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800252a:	2305      	movs	r3, #5
 800252c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_ADC1_Init+0x10c>)
 8002534:	f001 fa34 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800253e:	f000 faf1 	bl	8002b24 <Error_Handler>
  }

}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20008318 	.word	0x20008318
 8002550:	40012000 	.word	0x40012000

08002554 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <HAL_ADC_MspInit+0x110>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d172      	bne.n	800265c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_ADC_MspInit+0x114>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_ADC_MspInit+0x114>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_ADC_MspInit+0x114>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_ADC_MspInit+0x114>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a33      	ldr	r2, [pc, #204]	; (8002668 <HAL_ADC_MspInit+0x114>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_ADC_MspInit+0x114>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_ADC_MspInit+0x114>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <HAL_ADC_MspInit+0x114>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_ADC_MspInit+0x114>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PRES_1_Pin;
 80025ca:	2301      	movs	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ce:	2303      	movs	r3, #3
 80025d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PRES_1_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4823      	ldr	r0, [pc, #140]	; (800266c <HAL_ADC_MspInit+0x118>)
 80025de:	f002 fea1 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_1_Pin|TEMP_2_Pin|PRES_2_Pin|TEMP_3_Pin;
 80025e2:	230f      	movs	r3, #15
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e6:	2303      	movs	r3, #3
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <HAL_ADC_MspInit+0x11c>)
 80025f6:	f002 fe95 	bl	8005324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_ADC_MspInit+0x120>)
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <HAL_ADC_MspInit+0x124>)
 80025fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_ADC_MspInit+0x120>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002618:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_ADC_MspInit+0x120>)
 800261c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002620:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002628:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_ADC_MspInit+0x120>)
 800262c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002630:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002638:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_ADC_MspInit+0x120>)
 800263c:	2200      	movs	r2, #0
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002642:	f002 fa6d 	bl	8004b20 <HAL_DMA_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800264c:	f000 fa6a 	bl	8002b24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_ADC_MspInit+0x120>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012000 	.word	0x40012000
 8002668:	40023800 	.word	0x40023800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020000 	.word	0x40020000
 8002674:	20008360 	.word	0x20008360
 8002678:	40026410 	.word	0x40026410

0800267c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_CAN1_Init+0x64>)
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <MX_CAN1_Init+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <MX_CAN1_Init+0x64>)
 8002688:	2209      	movs	r2, #9
 800268a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_CAN1_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <MX_CAN1_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_CAN1_Init+0x64>)
 800269a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800269e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026bc:	2200      	movs	r2, #0
 80026be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <MX_CAN1_Init+0x64>)
 80026ce:	f001 fb95 	bl	8003dfc <HAL_CAN_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80026d8:	f000 fa24 	bl	8002b24 <Error_Handler>
  }

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200083c0 	.word	0x200083c0
 80026e4:	40006400 	.word	0x40006400

080026e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_CAN_MspInit+0xd4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d153      	bne.n	80027b2 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_CAN_MspInit+0xd8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002770:	2309      	movs	r3, #9
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4812      	ldr	r0, [pc, #72]	; (80027c4 <HAL_CAN_MspInit+0xdc>)
 800277c:	f002 fdd2 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002792:	2309      	movs	r3, #9
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480a      	ldr	r0, [pc, #40]	; (80027c8 <HAL_CAN_MspInit+0xe0>)
 800279e:	f002 fdc1 	bl	8005324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2105      	movs	r1, #5
 80027a6:	2014      	movs	r0, #20
 80027a8:	f002 f990 	bl	8004acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027ac:	2014      	movs	r0, #20
 80027ae:	f002 f9a9 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40006400 	.word	0x40006400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400

080027cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <MX_DMA_Init+0xb8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <MX_DMA_Init+0xb8>)
 80027dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <MX_DMA_Init+0xb8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <MX_DMA_Init+0xb8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <MX_DMA_Init+0xb8>)
 80027f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <MX_DMA_Init+0xb8>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2105      	movs	r1, #5
 800280e:	200c      	movs	r0, #12
 8002810:	f002 f95c 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002814:	200c      	movs	r0, #12
 8002816:	f002 f975 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2105      	movs	r1, #5
 800281e:	200e      	movs	r0, #14
 8002820:	f002 f954 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002824:	200e      	movs	r0, #14
 8002826:	f002 f96d 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2105      	movs	r1, #5
 800282e:	2038      	movs	r0, #56	; 0x38
 8002830:	f002 f94c 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002834:	2038      	movs	r0, #56	; 0x38
 8002836:	f002 f965 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2105      	movs	r1, #5
 800283e:	2039      	movs	r0, #57	; 0x39
 8002840:	f002 f944 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002844:	2039      	movs	r0, #57	; 0x39
 8002846:	f002 f95d 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2105      	movs	r1, #5
 800284e:	203a      	movs	r0, #58	; 0x3a
 8002850:	f002 f93c 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002854:	203a      	movs	r0, #58	; 0x3a
 8002856:	f002 f955 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2105      	movs	r1, #5
 800285e:	2045      	movs	r0, #69	; 0x45
 8002860:	f002 f934 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002864:	2045      	movs	r0, #69	; 0x45
 8002866:	f002 f94d 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2105      	movs	r1, #5
 800286e:	2046      	movs	r0, #70	; 0x46
 8002870:	f002 f92c 	bl	8004acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002874:	2046      	movs	r0, #70	; 0x46
 8002876:	f002 f945 	bl	8004b04 <HAL_NVIC_EnableIRQ>

}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <vApplicationGetIdleTaskMemory+0x30>)
 800289e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20007b40 	.word	0x20007b40
 80028b8:	20007b94 	.word	0x20007b94

080028bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <MX_FREERTOS_Init+0x30>)
 80028c4:	1d3c      	adds	r4, r7, #4
 80028c6:	461d      	mov	r5, r3
 80028c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 fd50 	bl	800937e <osThreadCreate>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <MX_FREERTOS_Init+0x34>)
 80028e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	0800b684 	.word	0x0800b684
 80028f0:	200083e8 	.word	0x200083e8

080028f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f006 fd63 	bl	80093c8 <osDelay>
 8002902:	e7fb      	b.n	80028fc <StartDefaultTask+0x8>

08002904 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <MX_GPIO_Init+0xc8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <MX_GPIO_Init+0xc8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <MX_GPIO_Init+0xc8>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <MX_GPIO_Init+0xc8>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002974:	4816      	ldr	r0, [pc, #88]	; (80029d0 <MX_GPIO_Init+0xcc>)
 8002976:	f002 fe69 	bl	800564c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002980:	4814      	ldr	r0, [pc, #80]	; (80029d4 <MX_GPIO_Init+0xd0>)
 8002982:	f002 fe63 	bl	800564c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	4619      	mov	r1, r3
 800299e:	480c      	ldr	r0, [pc, #48]	; (80029d0 <MX_GPIO_Init+0xcc>)
 80029a0:	f002 fcc0 	bl	8005324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = SOLENOID_Pin|GPIO_PIN_9;
 80029a4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80029a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_GPIO_Init+0xd0>)
 80029be:	f002 fcb1 	bl	8005324 <HAL_GPIO_Init>

}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029dc:	f000 ff5a 	bl	8003894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e0:	f000 f822 	bl	8002a28 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e4:	f7ff ff8e 	bl	8002904 <MX_GPIO_Init>
  MX_DMA_Init();
 80029e8:	f7ff fef0 	bl	80027cc <MX_DMA_Init>
  MX_ADC1_Init();
 80029ec:	f7ff fd28 	bl	8002440 <MX_ADC1_Init>
  MX_TIM8_Init();
 80029f0:	f000 fb22 	bl	8003038 <MX_TIM8_Init>
  MX_TIM2_Init();
 80029f4:	f000 fa86 	bl	8002f04 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80029f8:	f000 fcd2 	bl	80033a0 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 80029fc:	f000 fca6 	bl	800334c <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8002a00:	f000 f898 	bl	8002b34 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8002a04:	f000 faca 	bl	8002f9c <MX_TIM3_Init>
  MX_CAN1_Init();
 8002a08:	f7ff fe38 	bl	800267c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002a0c:	f000 fc74 	bl	80032f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8002a10:	f7ff fc9e 	bl	8002350 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002a14:	f7ff ff52 	bl	80028bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002a18:	f006 fcaa 	bl	8009370 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8002a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a20:	f006 fcd2 	bl	80093c8 <osDelay>
 8002a24:	e7fa      	b.n	8002a1c <main+0x44>
	...

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	; 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	2234      	movs	r2, #52	; 0x34
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fcf8 	bl	800b42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <SystemClock_Config+0xd4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a74:	4a21      	ldr	r2, [pc, #132]	; (8002afc <SystemClock_Config+0xd4>)
 8002a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <SystemClock_Config+0xd4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a90:	2310      	movs	r3, #16
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a94:	2302      	movs	r3, #2
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002aa0:	2348      	movs	r3, #72	; 0x48
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 ffed 	bl	8006a94 <HAL_RCC_OscConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ac0:	f000 f830 	bl	8002b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fd2f 	bl	8006544 <HAL_RCC_ClockConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002aec:	f000 f81a 	bl	8002b24 <Error_Handler>
  }
}
 8002af0:	bf00      	nop
 8002af2:	3750      	adds	r7, #80	; 0x50
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000

08002b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b12:	f000 fee1 	bl	80038d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000

08002b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <MX_QUADSPI_Init+0x54>)
 8002b3c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b40:	2264      	movs	r2, #100	; 0x64
 8002b42:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b52:	221a      	movs	r2, #26
 8002b54:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <MX_QUADSPI_Init+0x50>)
 8002b70:	f002 fd86 	bl	8005680 <HAL_QSPI_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002b7a:	f7ff ffd3 	bl	8002b24 <Error_Handler>
  }

}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20008640 	.word	0x20008640
 8002b88:	a0001000 	.word	0xa0001000

08002b8c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_QSPI_MspInit+0xf0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d162      	bne.n	8002c74 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_QSPI_MspInit+0xf4>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c02:	2304      	movs	r3, #4
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002c12:	2309      	movs	r3, #9
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4819      	ldr	r0, [pc, #100]	; (8002c84 <HAL_QSPI_MspInit+0xf8>)
 8002c1e:	f002 fb81 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002c34:	2309      	movs	r3, #9
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4812      	ldr	r0, [pc, #72]	; (8002c88 <HAL_QSPI_MspInit+0xfc>)
 8002c40:	f002 fb70 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c44:	2340      	movs	r3, #64	; 0x40
 8002c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002c54:	230a      	movs	r3, #10
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <HAL_QSPI_MspInit+0xf8>)
 8002c60:	f002 fb60 	bl	8005324 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2105      	movs	r1, #5
 8002c68:	205c      	movs	r0, #92	; 0x5c
 8002c6a:	f001 ff2f 	bl	8004acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002c6e:	205c      	movs	r0, #92	; 0x5c
 8002c70:	f001 ff48 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002c74:	bf00      	nop
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	a0001000 	.word	0xa0001000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020400 	.word	0x40020400
 8002c88:	40020800 	.word	0x40020800

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_MspInit+0x54>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_MspInit+0x54>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_MspInit+0x54>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_MspInit+0x54>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_MspInit+0x54>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_MspInit+0x54>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	210f      	movs	r1, #15
 8002cce:	f06f 0001 	mvn.w	r0, #1
 8002cd2:	f001 fefb 	bl	8004acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	2019      	movs	r0, #25
 8002cfa:	f001 fee7 	bl	8004acc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cfe:	2019      	movs	r0, #25
 8002d00:	f001 ff00 	bl	8004b04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_InitTick+0xa0>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_InitTick+0xa0>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6453      	str	r3, [r2, #68]	; 0x44
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_InitTick+0xa0>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 fd24 	bl	8006778 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d30:	f003 fd0e 	bl	8006750 <HAL_RCC_GetPCLK2Freq>
 8002d34:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_InitTick+0xa4>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0c9b      	lsrs	r3, r3, #18
 8002d40:	3b01      	subs	r3, #1
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <HAL_InitTick+0xac>)
 8002d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d64:	4809      	ldr	r0, [pc, #36]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d66:	f004 f8ef 	bl	8006f48 <HAL_TIM_Base_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d70:	4806      	ldr	r0, [pc, #24]	; (8002d8c <HAL_InitTick+0xa8>)
 8002d72:	f004 f914 	bl	8006f9e <HAL_TIM_Base_Start_IT>
 8002d76:	4603      	mov	r3, r0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3730      	adds	r7, #48	; 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	2000868c 	.word	0x2000868c
 8002d90:	40010000 	.word	0x40010000

08002d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8002da6:	222f      	movs	r2, #47	; 0x2f
 8002da8:	212f      	movs	r1, #47	; 0x2f
 8002daa:	202f      	movs	r0, #47	; 0x2f
 8002dac:	f7fe fa32 	bl	8001214 <led_set_color>
 8002db0:	e7f9      	b.n	8002da6 <HardFault_Handler+0x4>

08002db2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <MemManage_Handler+0x4>

08002db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <BusFault_Handler+0x4>

08002dbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <UsageFault_Handler+0x4>

08002dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <DMA1_Stream1_IRQHandler+0x10>)
 8002dda:	f002 f839 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200087ec 	.word	0x200087ec

08002de8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA1_Stream3_IRQHandler+0x10>)
 8002dee:	f002 f82f 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000888c 	.word	0x2000888c

08002dfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <CAN1_RX0_IRQHandler+0x10>)
 8002e02:	f001 fb7b 	bl	80044fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200083c0 	.word	0x200083c0

08002e10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e16:	f004 f91b 	bl	8007050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000868c 	.word	0x2000868c

08002e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <USART1_IRQHandler+0x10>)
 8002e2a:	f005 f975 	bl	8008118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20008a0c 	.word	0x20008a0c

08002e38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <USART3_IRQHandler+0x10>)
 8002e3e:	f005 f96b 	bl	8008118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000884c 	.word	0x2000884c

08002e4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DMA2_Stream0_IRQHandler+0x10>)
 8002e52:	f001 fffd 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20008360 	.word	0x20008360

08002e60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <DMA2_Stream1_IRQHandler+0x10>)
 8002e66:	f001 fff3 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000878c 	.word	0x2000878c

08002e74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <DMA2_Stream2_IRQHandler+0x10>)
 8002e7a:	f001 ffe9 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200089ac 	.word	0x200089ac

08002e88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <DMA2_Stream6_IRQHandler+0x10>)
 8002e8e:	f001 ffdf 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000894c 	.word	0x2000894c

08002e9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <DMA2_Stream7_IRQHandler+0x10>)
 8002ea2:	f001 ffd5 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200088ec 	.word	0x200088ec

08002eb0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <USART6_IRQHandler+0x10>)
 8002eb6:	f005 f92f 	bl	8008118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20008a4c 	.word	0x20008a4c

08002ec4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <QUADSPI_IRQHandler+0x10>)
 8002eca:	f002 fc55 	bl	8005778 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20008640 	.word	0x20008640

08002ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <SystemInit+0x28>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <SystemInit+0x28>)
 8002ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <SystemInit+0x28>)
 8002eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f18:	463b      	mov	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f2a:	2231      	movs	r2, #49	; 0x31
 8002f2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f30:	2210      	movs	r2, #16
 8002f32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f48:	4813      	ldr	r0, [pc, #76]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f4a:	f003 fffd 	bl	8006f48 <HAL_TIM_Base_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f54:	f7ff fde6 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	4619      	mov	r1, r3
 8002f64:	480c      	ldr	r0, [pc, #48]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f66:	f004 fa41 	bl	80073ec <HAL_TIM_ConfigClockSource>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f70:	f7ff fdd8 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f7c:	463b      	mov	r3, r7
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_TIM2_Init+0x94>)
 8002f82:	f004 fe33 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f8c:	f7ff fdca 	bl	8002b24 <Error_Handler>
  }

}
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000874c 	.word	0x2000874c

08002f9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <MX_TIM3_Init+0x98>)
 8002fbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fcc:	f240 4265 	movw	r2, #1125	; 0x465
 8002fd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fde:	4814      	ldr	r0, [pc, #80]	; (8003030 <MX_TIM3_Init+0x94>)
 8002fe0:	f003 ffb2 	bl	8006f48 <HAL_TIM_Base_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002fea:	f7ff fd9b 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	480d      	ldr	r0, [pc, #52]	; (8003030 <MX_TIM3_Init+0x94>)
 8002ffc:	f004 f9f6 	bl	80073ec <HAL_TIM_ConfigClockSource>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003006:	f7ff fd8d 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800300a:	2320      	movs	r3, #32
 800300c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003012:	463b      	mov	r3, r7
 8003014:	4619      	mov	r1, r3
 8003016:	4806      	ldr	r0, [pc, #24]	; (8003030 <MX_TIM3_Init+0x94>)
 8003018:	f004 fde8 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003022:	f7ff fd7f 	bl	8002b24 <Error_Handler>
  }

}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000870c 	.word	0x2000870c
 8003034:	40000400 	.word	0x40000400

08003038 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b096      	sub	sp, #88	; 0x58
 800303c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	615a      	str	r2, [r3, #20]
 8003068:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2220      	movs	r2, #32
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f008 f9db 	bl	800b42c <memset>

  htim8.Instance = TIM8;
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003078:	4a4b      	ldr	r2, [pc, #300]	; (80031a8 <MX_TIM8_Init+0x170>)
 800307a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <MX_TIM8_Init+0x16c>)
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <MX_TIM8_Init+0x16c>)
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <MX_TIM8_Init+0x16c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030a0:	4840      	ldr	r0, [pc, #256]	; (80031a4 <MX_TIM8_Init+0x16c>)
 80030a2:	f003 ff51 	bl	8006f48 <HAL_TIM_Base_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80030ac:	f7ff fd3a 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030ba:	4619      	mov	r1, r3
 80030bc:	4839      	ldr	r0, [pc, #228]	; (80031a4 <MX_TIM8_Init+0x16c>)
 80030be:	f004 f995 	bl	80073ec <HAL_TIM_ConfigClockSource>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80030c8:	f7ff fd2c 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80030cc:	4835      	ldr	r0, [pc, #212]	; (80031a4 <MX_TIM8_Init+0x16c>)
 80030ce:	f003 ff8a 	bl	8006fe6 <HAL_TIM_PWM_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80030d8:	f7ff fd24 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030e8:	4619      	mov	r1, r3
 80030ea:	482e      	ldr	r0, [pc, #184]	; (80031a4 <MX_TIM8_Init+0x16c>)
 80030ec:	f004 fd7e 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80030f6:	f7ff fd15 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030fa:	2360      	movs	r3, #96	; 0x60
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003102:	2300      	movs	r3, #0
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003106:	2308      	movs	r3, #8
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	2200      	movs	r2, #0
 800311c:	4619      	mov	r1, r3
 800311e:	4821      	ldr	r0, [pc, #132]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003120:	f004 f89e 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800312a:	f7ff fcfb 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800312e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003132:	2204      	movs	r2, #4
 8003134:	4619      	mov	r1, r3
 8003136:	481b      	ldr	r0, [pc, #108]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003138:	f004 f892 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003142:	f7ff fcef 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800314a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314e:	2208      	movs	r2, #8
 8003150:	4619      	mov	r1, r3
 8003152:	4814      	ldr	r0, [pc, #80]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003154:	f004 f884 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800315e:	f7ff fce1 	bl	8002b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003186:	f004 fdad 	bl	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003190:	f7ff fcc8 	bl	8002b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <MX_TIM8_Init+0x16c>)
 8003196:	f000 f855 	bl	8003244 <HAL_TIM_MspPostInit>

}
 800319a:	bf00      	nop
 800319c:	3758      	adds	r7, #88	; 0x58
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200086cc 	.word	0x200086cc
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80031da:	e026      	b.n	800322a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_TIM_Base_MspInit+0x90>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
}
 8003202:	e012      	b.n	800322a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_TIM_Base_MspInit+0x94>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10d      	bne.n	800322a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_TIM_Base_MspInit+0x8c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40000400 	.word	0x40000400
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <HAL_TIM_MspPostInit+0xa4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d13c      	bne.n	80032e0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_TIM_MspPostInit+0xa8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032ae:	2303      	movs	r3, #3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <HAL_TIM_MspPostInit+0xac>)
 80032ba:	f002 f833 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80032be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032d0:	2303      	movs	r3, #3
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	; (80032f4 <HAL_TIM_MspPostInit+0xb0>)
 80032dc:	f002 f822 	bl	8005324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80032e0:	bf00      	nop
 80032e2:	3728      	adds	r7, #40	; 0x28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40010400 	.word	0x40010400
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400

080032f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <MX_USART1_UART_Init+0x50>)
 8003300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003330:	f004 fdb0 	bl	8007e94 <HAL_HalfDuplex_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800333a:	f7ff fbf3 	bl	8002b24 <Error_Handler>
  }

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20008a0c 	.word	0x20008a0c
 8003348:	40011000 	.word	0x40011000

0800334c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <MX_USART3_UART_Init+0x50>)
 8003354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800335c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003372:	220c      	movs	r2, #12
 8003374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_USART3_UART_Init+0x4c>)
 8003384:	f004 fd39 	bl	8007dfa <HAL_UART_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800338e:	f7ff fbc9 	bl	8002b24 <Error_Handler>
  }

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000884c 	.word	0x2000884c
 800339c:	40004800 	.word	0x40004800

080033a0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <MX_USART6_UART_Init+0x50>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <MX_USART6_UART_Init+0x4c>)
 80033d8:	f004 fd0f 	bl	8007dfa <HAL_UART_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80033e2:	f7ff fb9f 	bl	8002b24 <Error_Handler>
  }

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20008a4c 	.word	0x20008a4c
 80033f0:	40011400 	.word	0x40011400

080033f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	; 0x38
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_UART_MspInit+0x14c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f040 80a2 	bne.w	800355c <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_UART_MspInit+0x150>)
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_UART_MspInit+0x150>)
 8003422:	f043 0310 	orr.w	r3, r3, #16
 8003426:	6453      	str	r3, [r2, #68]	; 0x44
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_UART_MspInit+0x150>)
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_UART_MspInit+0x150>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4a41      	ldr	r2, [pc, #260]	; (8003544 <HAL_UART_MspInit+0x150>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6313      	str	r3, [r2, #48]	; 0x30
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_UART_MspInit+0x150>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003456:	2312      	movs	r3, #18
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003462:	2307      	movs	r3, #7
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346a:	4619      	mov	r1, r3
 800346c:	4836      	ldr	r0, [pc, #216]	; (8003548 <HAL_UART_MspInit+0x154>)
 800346e:	f001 ff59 	bl	8005324 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_UART_MspInit+0x158>)
 8003474:	4a36      	ldr	r2, [pc, #216]	; (8003550 <HAL_UART_MspInit+0x15c>)
 8003476:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_UART_MspInit+0x158>)
 800347a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800347e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_UART_MspInit+0x158>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_UART_MspInit+0x158>)
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_UART_MspInit+0x158>)
 800348e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003492:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_UART_MspInit+0x158>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_UART_MspInit+0x158>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_UART_MspInit+0x158>)
 80034a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_UART_MspInit+0x158>)
 80034aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b0:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_UART_MspInit+0x158>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034b6:	4825      	ldr	r0, [pc, #148]	; (800354c <HAL_UART_MspInit+0x158>)
 80034b8:	f001 fb32 	bl	8004b20 <HAL_DMA_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80034c2:	f7ff fb2f 	bl	8002b24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <HAL_UART_MspInit+0x158>)
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34
 80034cc:	4a1f      	ldr	r2, [pc, #124]	; (800354c <HAL_UART_MspInit+0x158>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_UART_MspInit+0x164>)
 80034d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034de:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f4:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_UART_MspInit+0x160>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_UART_MspInit+0x160>)
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_UART_MspInit+0x160>)
 8003508:	2200      	movs	r2, #0
 800350a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_UART_MspInit+0x160>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003512:	4810      	ldr	r0, [pc, #64]	; (8003554 <HAL_UART_MspInit+0x160>)
 8003514:	f001 fb04 	bl	8004b20 <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800351e:	f7ff fb01 	bl	8002b24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_UART_MspInit+0x160>)
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <HAL_UART_MspInit+0x160>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2105      	movs	r1, #5
 8003532:	2025      	movs	r0, #37	; 0x25
 8003534:	f001 faca 	bl	8004acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003538:	2025      	movs	r0, #37	; 0x25
 800353a:	f001 fae3 	bl	8004b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800353e:	e16d      	b.n	800381c <HAL_UART_MspInit+0x428>
 8003540:	40011000 	.word	0x40011000
 8003544:	40023800 	.word	0x40023800
 8003548:	40020000 	.word	0x40020000
 800354c:	200089ac 	.word	0x200089ac
 8003550:	40026440 	.word	0x40026440
 8003554:	200088ec 	.word	0x200088ec
 8003558:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5a      	ldr	r2, [pc, #360]	; (80036cc <HAL_UART_MspInit+0x2d8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f040 80c2 	bne.w	80036ec <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	4b58      	ldr	r3, [pc, #352]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 8003572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b55      	ldr	r3, [pc, #340]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	6313      	str	r3, [r2, #48]	; 0x30
 8003594:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	6313      	str	r3, [r2, #48]	; 0x30
 80035b0:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_UART_MspInit+0x2dc>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80035bc:	2320      	movs	r3, #32
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035cc:	2307      	movs	r3, #7
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d4:	4619      	mov	r1, r3
 80035d6:	483f      	ldr	r0, [pc, #252]	; (80036d4 <HAL_UART_MspInit+0x2e0>)
 80035d8:	f001 fea4 	bl	8005324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80035dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035ee:	2307      	movs	r3, #7
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f6:	4619      	mov	r1, r3
 80035f8:	4837      	ldr	r0, [pc, #220]	; (80036d8 <HAL_UART_MspInit+0x2e4>)
 80035fa:	f001 fe93 	bl	8005324 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003600:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_UART_MspInit+0x2ec>)
 8003602:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800360a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003620:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003626:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 800362e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003632:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363c:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003642:	4826      	ldr	r0, [pc, #152]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003644:	f001 fa6c 	bl	8004b20 <HAL_DMA_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800364e:	f7ff fa69 	bl	8002b24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a21      	ldr	r2, [pc, #132]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 8003656:	635a      	str	r2, [r3, #52]	; 0x34
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <HAL_UART_MspInit+0x2e8>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_UART_MspInit+0x2f4>)
 8003662:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 800367a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003682:	2200      	movs	r2, #0
 8003684:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 800369a:	2200      	movs	r2, #0
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800369e:	4811      	ldr	r0, [pc, #68]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 80036a0:	f001 fa3e 	bl	8004b20 <HAL_DMA_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80036aa:	f7ff fa3b 	bl	8002b24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_UART_MspInit+0x2f0>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2105      	movs	r1, #5
 80036be:	2027      	movs	r0, #39	; 0x27
 80036c0:	f001 fa04 	bl	8004acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036c4:	2027      	movs	r0, #39	; 0x27
 80036c6:	f001 fa1d 	bl	8004b04 <HAL_NVIC_EnableIRQ>
}
 80036ca:	e0a7      	b.n	800381c <HAL_UART_MspInit+0x428>
 80036cc:	40004800 	.word	0x40004800
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020400 	.word	0x40020400
 80036dc:	200087ec 	.word	0x200087ec
 80036e0:	40026028 	.word	0x40026028
 80036e4:	2000888c 	.word	0x2000888c
 80036e8:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_UART_MspInit+0x430>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f040 8092 	bne.w	800381c <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_UART_MspInit+0x434>)
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	4a49      	ldr	r2, [pc, #292]	; (8003828 <HAL_UART_MspInit+0x434>)
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	6453      	str	r3, [r2, #68]	; 0x44
 8003708:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_UART_MspInit+0x434>)
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_UART_MspInit+0x434>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_UART_MspInit+0x434>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b40      	ldr	r3, [pc, #256]	; (8003828 <HAL_UART_MspInit+0x434>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8003730:	23c0      	movs	r3, #192	; 0xc0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003740:	2308      	movs	r3, #8
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	4838      	ldr	r0, [pc, #224]	; (800382c <HAL_UART_MspInit+0x438>)
 800374c:	f001 fdea 	bl	8005324 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003750:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003752:	4a38      	ldr	r2, [pc, #224]	; (8003834 <HAL_UART_MspInit+0x440>)
 8003754:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003758:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800375c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_UART_MspInit+0x43c>)
 800376c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003770:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003772:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_UART_MspInit+0x43c>)
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003784:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800378c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003794:	4826      	ldr	r0, [pc, #152]	; (8003830 <HAL_UART_MspInit+0x43c>)
 8003796:	f001 f9c3 	bl	8004b20 <HAL_DMA_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 80037a0:	f7ff f9c0 	bl	8002b24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a22      	ldr	r2, [pc, #136]	; (8003830 <HAL_UART_MspInit+0x43c>)
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <HAL_UART_MspInit+0x43c>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_UART_MspInit+0x448>)
 80037b4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037b8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80037bc:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80037f0:	4811      	ldr	r0, [pc, #68]	; (8003838 <HAL_UART_MspInit+0x444>)
 80037f2:	f001 f995 	bl	8004b20 <HAL_DMA_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 80037fc:	f7ff f992 	bl	8002b24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_UART_MspInit+0x444>)
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <HAL_UART_MspInit+0x444>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2105      	movs	r1, #5
 8003810:	2047      	movs	r0, #71	; 0x47
 8003812:	f001 f95b 	bl	8004acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003816:	2047      	movs	r0, #71	; 0x47
 8003818:	f001 f974 	bl	8004b04 <HAL_NVIC_EnableIRQ>
}
 800381c:	bf00      	nop
 800381e:	3738      	adds	r7, #56	; 0x38
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40011400 	.word	0x40011400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020800 	.word	0x40020800
 8003830:	2000878c 	.word	0x2000878c
 8003834:	40026428 	.word	0x40026428
 8003838:	2000894c 	.word	0x2000894c
 800383c:	400264a0 	.word	0x400264a0

08003840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003846:	e003      	b.n	8003850 <LoopCopyDataInit>

08003848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800384a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800384c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800384e:	3104      	adds	r1, #4

08003850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003858:	d3f6      	bcc.n	8003848 <CopyDataInit>
  ldr  r2, =_sbss
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800385c:	e002      	b.n	8003864 <LoopFillZerobss>

0800385e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800385e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003860:	f842 3b04 	str.w	r3, [r2], #4

08003864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003868:	d3f9      	bcc.n	800385e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800386a:	f7ff fb35 	bl	8002ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f007 fdab 	bl	800b3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003872:	f7ff f8b1 	bl	80029d8 <main>
  bx  lr    
 8003876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003878:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800387c:	0800b6e0 	.word	0x0800b6e0
  ldr  r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003884:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8003888:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 800388c:	20008a90 	.word	0x20008a90

08003890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC_IRQHandler>
	...

08003894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_Init+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_Init+0x40>)
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_Init+0x40>)
 80038aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_Init+0x40>)
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038bc:	2003      	movs	r0, #3
 80038be:	f001 f8fa 	bl	8004ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038c2:	2000      	movs	r0, #0
 80038c4:	f7ff fa0e 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c8:	f7ff f9e0 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00

080038d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_IncTick+0x20>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_IncTick+0x24>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_IncTick+0x24>)
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000048 	.word	0x20000048
 80038fc:	20008a8c 	.word	0x20008a8c

08003900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return uwTick;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_GetTick+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20008a8c 	.word	0x20008a8c

08003918 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e033      	b.n	8003996 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fe0c 	bl	8002554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	d118      	bne.n	8003988 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800395e:	f023 0302 	bic.w	r3, r3, #2
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f94a 	bl	8003c04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
 8003986:	e001      	b.n	800398c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e113      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x244>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d925      	bls.n	8003a18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	3b1e      	subs	r3, #30
 80039e2:	2207      	movs	r2, #7
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43da      	mvns	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	400a      	ands	r2, r1
 80039f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	4603      	mov	r3, r0
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4403      	add	r3, r0
 8003a0a:	3b1e      	subs	r3, #30
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e022      	b.n	8003a5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43da      	mvns	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	400a      	ands	r2, r1
 8003a3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6919      	ldr	r1, [r3, #16]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4403      	add	r3, r0
 8003a54:	409a      	lsls	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d824      	bhi.n	8003ab0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	3b05      	subs	r3, #5
 8003a78:	221f      	movs	r2, #31
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	400a      	ands	r2, r1
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4618      	mov	r0, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3b05      	subs	r3, #5
 8003aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34
 8003aae:	e04c      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d824      	bhi.n	8003b02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3b23      	subs	r3, #35	; 0x23
 8003aca:	221f      	movs	r2, #31
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	3b23      	subs	r3, #35	; 0x23
 8003af4:	fa00 f203 	lsl.w	r2, r0, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	e023      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	3b41      	subs	r3, #65	; 0x41
 8003b14:	221f      	movs	r2, #31
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	400a      	ands	r2, r1
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b41      	subs	r3, #65	; 0x41
 8003b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_ADC_ConfigChannel+0x250>)
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_ADC_ConfigChannel+0x254>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10f      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1d8>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d10b      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_ADC_ConfigChannel+0x254>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12b      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x23a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_ADC_ConfigChannel+0x258>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x1f4>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b11      	cmp	r3, #17
 8003b92:	d122      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_ADC_ConfigChannel+0x258>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d111      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_ADC_ConfigChannel+0x25c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <HAL_ADC_ConfigChannel+0x260>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	0c9a      	lsrs	r2, r3, #18
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bcc:	e002      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f9      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40012300 	.word	0x40012300
 8003bf4:	40012000 	.word	0x40012000
 8003bf8:	10000012 	.word	0x10000012
 8003bfc:	20000040 	.word	0x20000040
 8003c00:	431bde83 	.word	0x431bde83

08003c04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c0c:	4b79      	ldr	r3, [pc, #484]	; (8003df4 <ADC_Init+0x1f0>)
 8003c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	021a      	lsls	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <ADC_Init+0x1f4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6899      	ldr	r1, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	e00f      	b.n	8003d02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0202 	bic.w	r2, r2, #2
 8003d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6899      	ldr	r1, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7e1b      	ldrb	r3, [r3, #24]
 8003d1c:	005a      	lsls	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	035a      	lsls	r2, r3, #13
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	e007      	b.n	8003d78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	051a      	lsls	r2, r3, #20
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dba:	025a      	lsls	r2, r3, #9
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	029a      	lsls	r2, r3, #10
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012300 	.word	0x40012300
 8003df8:	0f000001 	.word	0x0f000001

08003dfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0ed      	b.n	8003fea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fc64 	bl	80026e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0202 	bic.w	r2, r2, #2
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e30:	f7ff fd66 	bl	8003900 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e36:	e012      	b.n	8003e5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e38:	f7ff fd62 	bl	8003900 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b0a      	cmp	r3, #10
 8003e44:	d90b      	bls.n	8003e5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2205      	movs	r2, #5
 8003e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0c5      	b.n	8003fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e7c:	f7ff fd40 	bl	8003900 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e82:	e012      	b.n	8003eaa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e84:	f7ff fd3c 	bl	8003900 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b0a      	cmp	r3, #10
 8003e90:	d90b      	bls.n	8003eaa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2205      	movs	r2, #5
 8003ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e09f      	b.n	8003fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0e5      	beq.n	8003e84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7e1b      	ldrb	r3, [r3, #24]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e007      	b.n	8003ee2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7e5b      	ldrb	r3, [r3, #25]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e007      	b.n	8003f0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7e9b      	ldrb	r3, [r3, #26]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d108      	bne.n	8003f26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0220 	orr.w	r2, r2, #32
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e007      	b.n	8003f36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0220 	bic.w	r2, r2, #32
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7edb      	ldrb	r3, [r3, #27]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0210 	bic.w	r2, r2, #16
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e007      	b.n	8003f60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0210 	orr.w	r2, r2, #16
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7f1b      	ldrb	r3, [r3, #28]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d108      	bne.n	8003f7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7f5b      	ldrb	r3, [r3, #29]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d108      	bne.n	8003fa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0204 	orr.w	r2, r2, #4
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e007      	b.n	8003fb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800400a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d003      	beq.n	800401a <HAL_CAN_ConfigFilter+0x26>
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b02      	cmp	r3, #2
 8004016:	f040 80be 	bne.w	8004196 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800401a:	4b65      	ldr	r3, [pc, #404]	; (80041b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800401c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004034:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	431a      	orrs	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2201      	movs	r2, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43db      	mvns	r3, r3
 800406c:	401a      	ands	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d123      	bne.n	80040c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800409e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3248      	adds	r2, #72	; 0x48
 80040a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	3348      	adds	r3, #72	; 0x48
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	440b      	add	r3, r1
 80040c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d122      	bne.n	8004112 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	3248      	adds	r2, #72	; 0x48
 80040f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004106:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	3348      	adds	r3, #72	; 0x48
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	401a      	ands	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800412c:	e007      	b.n	800413e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	431a      	orrs	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43db      	mvns	r3, r3
 8004150:	401a      	ands	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004158:	e007      	b.n	800416a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	431a      	orrs	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	431a      	orrs	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004188:	f023 0201 	bic.w	r2, r3, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e006      	b.n	80041a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40006400 	.word	0x40006400

080041b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d12e      	bne.n	8004226 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041e0:	f7ff fb8e 	bl	8003900 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041e6:	e012      	b.n	800420e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041e8:	f7ff fb8a 	bl	8003900 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	d90b      	bls.n	800420e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2205      	movs	r2, #5
 8004206:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e012      	b.n	8004234 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e006      	b.n	8004234 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004250:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d003      	beq.n	8004260 <HAL_CAN_GetRxMessage+0x24>
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b02      	cmp	r3, #2
 800425c:	f040 80f3 	bne.w	8004446 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10e      	bne.n	8004284 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0e7      	b.n	8004454 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0d8      	b.n	8004454 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	331b      	adds	r3, #27
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0204 	and.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10c      	bne.n	80042da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	331b      	adds	r3, #27
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0d5b      	lsrs	r3, r3, #21
 80042d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e00b      	b.n	80042f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	331b      	adds	r3, #27
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	331b      	adds	r3, #27
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0202 	and.w	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	331b      	adds	r3, #27
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4413      	add	r3, r2
 8004314:	3304      	adds	r3, #4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	331b      	adds	r3, #27
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b2da      	uxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	331b      	adds	r3, #27
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0a1a      	lsrs	r2, r3, #8
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0c1a      	lsrs	r2, r3, #16
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	3302      	adds	r3, #2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0e1a      	lsrs	r2, r3, #24
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	3303      	adds	r3, #3
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0a1a      	lsrs	r2, r3, #8
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	3305      	adds	r3, #5
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	0c1a      	lsrs	r2, r3, #16
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	3306      	adds	r3, #6
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e1a      	lsrs	r2, r3, #24
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3307      	adds	r3, #7
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e007      	b.n	8004442 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0220 	orr.w	r2, r2, #32
 8004440:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e006      	b.n	8004454 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004474:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d002      	beq.n	8004482 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d10f      	bne.n	80044a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e005      	b.n	80044a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d002      	beq.n	80044ce <HAL_CAN_ActivateNotification+0x1e>
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d109      	bne.n	80044e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6959      	ldr	r1, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e006      	b.n	80044f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d07c      	beq.n	800463c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2201      	movs	r2, #1
 8004552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f983 	bl	800486a <HAL_CAN_TxMailbox0CompleteCallback>
 8004564:	e016      	b.n	8004594 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
 8004578:	e00c      	b.n	8004594 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e002      	b.n	8004594 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f989 	bl	80048a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f963 	bl	800487e <HAL_CAN_TxMailbox1CompleteCallback>
 80045b8:	e016      	b.n	80045e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	e00c      	b.n	80045e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
 80045e0:	e002      	b.n	80045e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f969 	bl	80048ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d024      	beq.n	800463c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f943 	bl	8004892 <HAL_CAN_TxMailbox2CompleteCallback>
 800460c:	e016      	b.n	800463c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	e00c      	b.n	800463c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
 8004634:	e002      	b.n	800463c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f949 	bl	80048ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004656:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2210      	movs	r2, #16
 800465e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2208      	movs	r2, #8
 800467a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f930 	bl	80048e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fb ffbc 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2210      	movs	r2, #16
 80046c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2208      	movs	r2, #8
 80046de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f912 	bl	800490a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8f9 	bl	80048f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8fc 	bl	800491e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2208      	movs	r2, #8
 8004740:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8f5 	bl	8004932 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07b      	beq.n	800484a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d072      	beq.n	8004842 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d043      	beq.n	8004842 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03e      	beq.n	8004842 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ca:	2b60      	cmp	r3, #96	; 0x60
 80047cc:	d02b      	beq.n	8004826 <HAL_CAN_IRQHandler+0x32a>
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d82e      	bhi.n	8004830 <HAL_CAN_IRQHandler+0x334>
 80047d2:	2b50      	cmp	r3, #80	; 0x50
 80047d4:	d022      	beq.n	800481c <HAL_CAN_IRQHandler+0x320>
 80047d6:	2b50      	cmp	r3, #80	; 0x50
 80047d8:	d82a      	bhi.n	8004830 <HAL_CAN_IRQHandler+0x334>
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d019      	beq.n	8004812 <HAL_CAN_IRQHandler+0x316>
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d826      	bhi.n	8004830 <HAL_CAN_IRQHandler+0x334>
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d010      	beq.n	8004808 <HAL_CAN_IRQHandler+0x30c>
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	d822      	bhi.n	8004830 <HAL_CAN_IRQHandler+0x334>
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d002      	beq.n	80047f4 <HAL_CAN_IRQHandler+0x2f8>
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d005      	beq.n	80047fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047f2:	e01d      	b.n	8004830 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f043 0308 	orr.w	r3, r3, #8
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047fc:	e019      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	f043 0310 	orr.w	r3, r3, #16
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004806:	e014      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f043 0320 	orr.w	r3, r3, #32
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004810:	e00f      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800481a:	e00a      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004824:	e005      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800482e:	e000      	b.n	8004832 <HAL_CAN_IRQHandler+0x336>
            break;
 8004830:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004840:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2204      	movs	r2, #4
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f872 	bl	8004946 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004862:	bf00      	nop
 8004864:	3728      	adds	r7, #40	; 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <__NVIC_SetPriorityGrouping+0x44>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498e:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	60d3      	str	r3, [r2, #12]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <__NVIC_GetPriorityGrouping+0x18>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 0307 	and.w	r3, r3, #7
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	db0b      	blt.n	80049ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	4907      	ldr	r1, [pc, #28]	; (80049f8 <__NVIC_EnableIRQ+0x38>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2001      	movs	r0, #1
 80049e2:	fa00 f202 	lsl.w	r2, r0, r2
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e100 	.word	0xe000e100

080049fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0a      	blt.n	8004a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <__NVIC_SetPriority+0x4c>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a24:	e00a      	b.n	8004a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4908      	ldr	r1, [pc, #32]	; (8004a4c <__NVIC_SetPriority+0x50>)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3b04      	subs	r3, #4
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	761a      	strb	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf28      	it	cs
 8004a6e:	2304      	movcs	r3, #4
 8004a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d902      	bls.n	8004a80 <NVIC_EncodePriority+0x30>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3b03      	subs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <NVIC_EncodePriority+0x32>
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	401a      	ands	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	4313      	orrs	r3, r2
         );
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff4c 	bl	800495c <__NVIC_SetPriorityGrouping>
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ade:	f7ff ff61 	bl	80049a4 <__NVIC_GetPriorityGrouping>
 8004ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	6978      	ldr	r0, [r7, #20]
 8004aea:	f7ff ffb1 	bl	8004a50 <NVIC_EncodePriority>
 8004aee:	4602      	mov	r2, r0
 8004af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ff80 	bl	80049fc <__NVIC_SetPriority>
}
 8004afc:	bf00      	nop
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ff54 	bl	80049c0 <__NVIC_EnableIRQ>
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7fe fee8 	bl	8003900 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e099      	b.n	8004c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b5c:	e00f      	b.n	8004b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b5e:	f7fe fecf 	bl	8003900 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d908      	bls.n	8004b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e078      	b.n	8004c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e8      	bne.n	8004b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <HAL_DMA_Init+0x158>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d107      	bne.n	8004be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	4313      	orrs	r3, r2
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d117      	bne.n	8004c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb01 	bl	800522c <DMA_CheckFifoParam>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e016      	b.n	8004c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fab8 	bl	80051c0 <DMA_CalcBaseAndBitshift>
 8004c50:	4603      	mov	r3, r0
 8004c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	223f      	movs	r2, #63	; 0x3f
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	f010803f 	.word	0xf010803f

08004c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_DMA_Start_IT+0x26>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e040      	b.n	8004d24 <HAL_DMA_Start_IT+0xa8>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d12f      	bne.n	8004d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fa4a 	bl	8005164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	223f      	movs	r2, #63	; 0x3f
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0216 	orr.w	r2, r2, #22
 8004cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e005      	b.n	8004d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d3a:	f7fe fde1 	bl	8003900 <HAL_GetTick>
 8004d3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d008      	beq.n	8004d5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e052      	b.n	8004e04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0216 	bic.w	r2, r2, #22
 8004d6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <HAL_DMA_Abort+0x62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0208 	bic.w	r2, r2, #8
 8004d9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dae:	e013      	b.n	8004dd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004db0:	f7fe fda6 	bl	8003900 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d90c      	bls.n	8004dd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2203      	movs	r2, #3
 8004dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e015      	b.n	8004e04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e4      	bne.n	8004db0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	223f      	movs	r2, #63	; 0x3f
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2280      	movs	r2, #128	; 0x80
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e00c      	b.n	8004e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2205      	movs	r2, #5
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e5c:	4b92      	ldr	r3, [pc, #584]	; (80050a8 <HAL_DMA_IRQHandler+0x258>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a92      	ldr	r2, [pc, #584]	; (80050ac <HAL_DMA_IRQHandler+0x25c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0a9b      	lsrs	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01a      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0201 	orr.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d012      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2201      	movs	r2, #1
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	2204      	movs	r2, #4
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d043      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03c      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	2210      	movs	r2, #16
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d024      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
 8004f7e:	e01f      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
 8004f90:	e016      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d107      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0208 	bic.w	r2, r2, #8
 8004fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 808e 	beq.w	80050ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8086 	beq.w	80050ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d136      	bne.n	8005068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0216 	bic.w	r2, r2, #22
 8005008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_DMA_IRQHandler+0x1da>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	223f      	movs	r2, #63	; 0x3f
 8005040:	409a      	lsls	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07d      	beq.n	800515a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
        }
        return;
 8005066:	e078      	b.n	800515a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	2b00      	cmp	r3, #0
 800508a:	d030      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
 8005094:	e02b      	b.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e022      	b.n	80050ee <HAL_DMA_IRQHandler+0x29e>
 80050a8:	20000040 	.word	0x20000040
 80050ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0210 	bic.w	r2, r2, #16
 80050cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d032      	beq.n	800515c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d022      	beq.n	8005148 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2205      	movs	r2, #5
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d307      	bcc.n	8005136 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f2      	bne.n	800511a <HAL_DMA_IRQHandler+0x2ca>
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005136:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
 8005158:	e000      	b.n	800515c <HAL_DMA_IRQHandler+0x30c>
        return;
 800515a:	bf00      	nop
    }
  }
}
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop

08005164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d108      	bne.n	80051a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051a2:	e007      	b.n	80051b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3b10      	subs	r3, #16
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <DMA_CalcBaseAndBitshift+0x64>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <DMA_CalcBaseAndBitshift+0x68>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d909      	bls.n	8005202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005200:	e007      	b.n	8005212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	aaaaaaab 	.word	0xaaaaaaab
 8005228:	0800b6c8 	.word	0x0800b6c8

0800522c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11f      	bne.n	8005286 <DMA_CheckFifoParam+0x5a>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d856      	bhi.n	80052fa <DMA_CheckFifoParam+0xce>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <DMA_CheckFifoParam+0x28>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005265 	.word	0x08005265
 8005258:	08005277 	.word	0x08005277
 800525c:	08005265 	.word	0x08005265
 8005260:	080052fb 	.word	0x080052fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d046      	beq.n	80052fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005274:	e043      	b.n	80052fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800527e:	d140      	bne.n	8005302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005284:	e03d      	b.n	8005302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d121      	bne.n	80052d4 <DMA_CheckFifoParam+0xa8>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d837      	bhi.n	8005306 <DMA_CheckFifoParam+0xda>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <DMA_CheckFifoParam+0x70>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b3 	.word	0x080052b3
 80052a4:	080052ad 	.word	0x080052ad
 80052a8:	080052c5 	.word	0x080052c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e030      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d025      	beq.n	800530a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c2:	e022      	b.n	800530a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052cc:	d11f      	bne.n	800530e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052d2:	e01c      	b.n	800530e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d903      	bls.n	80052e2 <DMA_CheckFifoParam+0xb6>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d003      	beq.n	80052e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052e0:	e018      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
      break;
 80052e6:	e015      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e00b      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 80052fa:	bf00      	nop
 80052fc:	e00a      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;
 80052fe:	bf00      	nop
 8005300:	e008      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;
 8005302:	bf00      	nop
 8005304:	e006      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;
 8005306:	bf00      	nop
 8005308:	e004      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;
 800530a:	bf00      	nop
 800530c:	e002      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;   
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <DMA_CheckFifoParam+0xe8>
      break;
 8005312:	bf00      	nop
    }
  } 
  
  return status; 
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop

08005324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	; 0x24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	e165      	b.n	800560c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005340:	2201      	movs	r2, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	f040 8154 	bne.w	8005606 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d00b      	beq.n	800537e <HAL_GPIO_Init+0x5a>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d007      	beq.n	800537e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005372:	2b11      	cmp	r3, #17
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b12      	cmp	r3, #18
 800537c:	d130      	bne.n	80053e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	2203      	movs	r2, #3
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053b4:	2201      	movs	r2, #1
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0201 	and.w	r2, r3, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0xfc>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b12      	cmp	r3, #18
 800541e:	d123      	bne.n	8005468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	08da      	lsrs	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3208      	adds	r2, #8
 8005428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	220f      	movs	r2, #15
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	08da      	lsrs	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3208      	adds	r2, #8
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0203 	and.w	r2, r3, #3
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80ae 	beq.w	8005606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <HAL_GPIO_Init+0x300>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	4a5c      	ldr	r2, [pc, #368]	; (8005624 <HAL_GPIO_Init+0x300>)
 80054b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b8:	6453      	str	r3, [r2, #68]	; 0x44
 80054ba:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <HAL_GPIO_Init+0x300>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054c6:	4a58      	ldr	r2, [pc, #352]	; (8005628 <HAL_GPIO_Init+0x304>)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	3302      	adds	r3, #2
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	220f      	movs	r2, #15
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a4f      	ldr	r2, [pc, #316]	; (800562c <HAL_GPIO_Init+0x308>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d025      	beq.n	800553e <HAL_GPIO_Init+0x21a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a4e      	ldr	r2, [pc, #312]	; (8005630 <HAL_GPIO_Init+0x30c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01f      	beq.n	800553a <HAL_GPIO_Init+0x216>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a4d      	ldr	r2, [pc, #308]	; (8005634 <HAL_GPIO_Init+0x310>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d019      	beq.n	8005536 <HAL_GPIO_Init+0x212>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a4c      	ldr	r2, [pc, #304]	; (8005638 <HAL_GPIO_Init+0x314>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_GPIO_Init+0x20e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a4b      	ldr	r2, [pc, #300]	; (800563c <HAL_GPIO_Init+0x318>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00d      	beq.n	800552e <HAL_GPIO_Init+0x20a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a4a      	ldr	r2, [pc, #296]	; (8005640 <HAL_GPIO_Init+0x31c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <HAL_GPIO_Init+0x206>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a49      	ldr	r2, [pc, #292]	; (8005644 <HAL_GPIO_Init+0x320>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <HAL_GPIO_Init+0x202>
 8005522:	2306      	movs	r3, #6
 8005524:	e00c      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 8005526:	2307      	movs	r3, #7
 8005528:	e00a      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 800552a:	2305      	movs	r3, #5
 800552c:	e008      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 800552e:	2304      	movs	r3, #4
 8005530:	e006      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 8005532:	2303      	movs	r3, #3
 8005534:	e004      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 8005536:	2302      	movs	r3, #2
 8005538:	e002      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_GPIO_Init+0x21c>
 800553e:	2300      	movs	r3, #0
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	f002 0203 	and.w	r2, r2, #3
 8005546:	0092      	lsls	r2, r2, #2
 8005548:	4093      	lsls	r3, r2
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005550:	4935      	ldr	r1, [pc, #212]	; (8005628 <HAL_GPIO_Init+0x304>)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	3302      	adds	r3, #2
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800555e:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_GPIO_Init+0x324>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	43db      	mvns	r3, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4013      	ands	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005582:	4a31      	ldr	r2, [pc, #196]	; (8005648 <HAL_GPIO_Init+0x324>)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <HAL_GPIO_Init+0x324>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <HAL_GPIO_Init+0x324>)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055b2:	4b25      	ldr	r3, [pc, #148]	; (8005648 <HAL_GPIO_Init+0x324>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055d6:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <HAL_GPIO_Init+0x324>)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <HAL_GPIO_Init+0x324>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <HAL_GPIO_Init+0x324>)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3301      	adds	r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	f67f ae96 	bls.w	8005340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800
 8005628:	40013800 	.word	0x40013800
 800562c:	40020000 	.word	0x40020000
 8005630:	40020400 	.word	0x40020400
 8005634:	40020800 	.word	0x40020800
 8005638:	40020c00 	.word	0x40020c00
 800563c:	40021000 	.word	0x40021000
 8005640:	40021400 	.word	0x40021400
 8005644:	40021800 	.word	0x40021800
 8005648:	40013c00 	.word	0x40013c00

0800564c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
 8005658:	4613      	mov	r3, r2
 800565a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800565c:	787b      	ldrb	r3, [r7, #1]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005662:	887a      	ldrh	r2, [r7, #2]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005668:	e003      	b.n	8005672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	041a      	lsls	r2, r3, #16
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	619a      	str	r2, [r3, #24]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005688:	f7fe f93a 	bl	8003900 <HAL_GetTick>
 800568c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e069      	b.n	800576c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fd fa6d 	bl	8002b8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80056b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fd46 	bl	8006148 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	021a      	lsls	r2, r3, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	2120      	movs	r1, #32
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fd71 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d137      	bne.n	8005762 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	0611      	lsls	r1, r2, #24
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	4311      	orrs	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	69d2      	ldr	r2, [r2, #28]
 8005710:	4311      	orrs	r1, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6a12      	ldr	r2, [r2, #32]
 8005716:	4311      	orrs	r1, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	430b      	orrs	r3, r1
 800571e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <HAL_QSPI_Init+0xf4>)
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6912      	ldr	r2, [r2, #16]
 800572e:	0411      	lsls	r1, r2, #16
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6952      	ldr	r2, [r2, #20]
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6992      	ldr	r2, [r2, #24]
 800573a:	4311      	orrs	r1, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	430b      	orrs	r3, r1
 8005742:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800576a:	7afb      	ldrb	r3, [r7, #11]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	ffe0f8fe 	.word	0xffe0f8fe

08005778 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d064      	beq.n	8005864 <HAL_QSPI_IRQHandler+0xec>
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05f      	beq.n	8005864 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3320      	adds	r3, #32
 80057aa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b12      	cmp	r3, #18
 80057b6:	d125      	bne.n	8005804 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80057b8:	e01c      	b.n	80057f4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00f      	beq.n	80057e2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c
 80057e0:	e008      	b.n	80057f4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f0:	601a      	str	r2, [r3, #0]
          break;
 80057f2:	e033      	b.n	800585c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1db      	bne.n	80057ba <HAL_QSPI_IRQHandler+0x42>
 8005802:	e02b      	b.n	800585c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b22      	cmp	r3, #34	; 0x22
 800580e:	d125      	bne.n	800585c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005810:	e01d      	b.n	800584e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
 800583a:	e008      	b.n	800584e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800584a:	601a      	str	r2, [r3, #0]
          break;
 800584c:	e006      	b.n	800585c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1da      	bne.n	8005812 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb8b 	bl	8005f78 <HAL_QSPI_FifoThresholdCallback>
 8005862:	e142      	b.n	8005aea <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80b6 	beq.w	80059dc <HAL_QSPI_IRQHandler+0x264>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 80b0 	beq.w	80059dc <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2202      	movs	r2, #2
 8005882:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005892:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b12      	cmp	r3, #18
 800589e:	d123      	bne.n	80058e8 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d011      	beq.n	80058d2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0204 	bic.w	r2, r2, #4
 80058bc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fbdc 	bl	8006090 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fb3f 	bl	8005f64 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80058e6:	e0fd      	b.n	8005ae4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b22      	cmp	r3, #34	; 0x22
 80058f2:	d146      	bne.n	8005982 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d012      	beq.n	8005928 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0204 	bic.w	r2, r2, #4
 8005910:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e021      	b.n	800596c <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3320      	adds	r3, #32
 800592e:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005930:	e013      	b.n	800595a <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e4      	bne.n	8005932 <HAL_QSPI_IRQHandler+0x1ba>
 8005968:	e000      	b.n	800596c <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800596a:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb8f 	bl	8006090 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fae8 	bl	8005f50 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005980:	e0b0      	b.n	8005ae4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d107      	bne.n	800599e <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fad0 	bl	8005f3c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800599c:	e0a2      	b.n	8005ae4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	f040 809c 	bne.w	8005ae4 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80059ba:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 faab 	bl	8005f28 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80059d2:	e087      	b.n	8005ae4 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa9d 	bl	8005f14 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80059da:	e083      	b.n	8005ae4 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01f      	beq.n	8005a26 <HAL_QSPI_IRQHandler+0x2ae>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01a      	beq.n	8005a26 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2208      	movs	r2, #8
 80059f6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005a14:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fab4 	bl	8005f8c <HAL_QSPI_StatusMatchCallback>
 8005a24:	e061      	b.n	8005aea <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d047      	beq.n	8005ac0 <HAL_QSPI_IRQHandler+0x348>
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d042      	beq.n	8005ac0 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005a50:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f043 0202 	orr.w	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d021      	beq.n	8005ab0 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_QSPI_IRQHandler+0x37c>)
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff f9bf 	bl	8004e0c <HAL_DMA_Abort_IT>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d029      	beq.n	8005ae8 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	f043 0204 	orr.w	r2, r3, #4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa33 	bl	8005f14 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005aae:	e01b      	b.n	8005ae8 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa2b 	bl	8005f14 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005abe:	e013      	b.n	8005ae8 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00f      	beq.n	8005aea <HAL_QSPI_IRQHandler+0x372>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2210      	movs	r2, #16
 8005ada:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa5f 	bl	8005fa0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005ae2:	e002      	b.n	8005aea <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ae8:	bf00      	nop
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	08006165 	.word	0x08006165

08005af8 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7fd fefc 	bl	8003900 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_QSPI_Command+0x22>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e048      	b.n	8005bac <HAL_QSPI_Command+0xb4>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d137      	bne.n	8005b9e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2200      	movs	r2, #0
 8005b44:	2120      	movs	r1, #32
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fb3f 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d125      	bne.n	8005ba2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005b56:	2200      	movs	r2, #0
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fb6c 	bl	8006238 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d115      	bne.n	8005b94 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	2102      	movs	r1, #2
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fb29 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10f      	bne.n	8005ba2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2202      	movs	r2, #2
 8005b88:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b92:	e006      	b.n	8005ba2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9c:	e001      	b.n	8005ba2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005bc4:	f7fd fe9c 	bl	8003900 <HAL_GetTick>
 8005bc8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3320      	adds	r3, #32
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_QSPI_Transmit+0x2e>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e07b      	b.n	8005cda <HAL_QSPI_Transmit+0x126>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d16a      	bne.n	8005ccc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d05b      	beq.n	8005cba <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2212      	movs	r2, #18
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005c36:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005c38:	e01b      	b.n	8005c72 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2104      	movs	r1, #4
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fac0 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005c4e:	7ffb      	ldrb	r3, [r7, #31]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d113      	bne.n	8005c7c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1df      	bne.n	8005c3a <HAL_QSPI_Transmit+0x86>
 8005c7a:	e000      	b.n	8005c7e <HAL_QSPI_Transmit+0xca>
          break;
 8005c7c:	bf00      	nop
      }

      if (status == HAL_OK)
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d115      	bne.n	8005cb0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fa9b 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005c98:	7ffb      	ldrb	r3, [r7, #31]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f984 	bl	8005fb4 <HAL_QSPI_Abort>
 8005cac:	4603      	mov	r3, r0
 8005cae:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb8:	e00a      	b.n	8005cd0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0208 	orr.w	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e001      	b.n	8005cd0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08a      	sub	sp, #40	; 0x28
 8005ce6:	af02      	add	r7, sp, #8
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005cf2:	f7fd fe05 	bl	8003900 <HAL_GetTick>
 8005cf6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3320      	adds	r3, #32
 8005d06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_QSPI_Receive+0x36>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e082      	b.n	8005e1e <HAL_QSPI_Receive+0x13c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d171      	bne.n	8005e10 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d062      	beq.n	8005dfe <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2222      	movs	r2, #34	; 0x22
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d70:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005d7a:	e01c      	b.n	8005db6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2201      	movs	r2, #1
 8005d84:	2106      	movs	r1, #6
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa1f 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005d90:	7ffb      	ldrb	r3, [r7, #31]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d114      	bne.n	8005dc0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1de      	bne.n	8005d7c <HAL_QSPI_Receive+0x9a>
 8005dbe:	e000      	b.n	8005dc2 <HAL_QSPI_Receive+0xe0>
          break;
 8005dc0:	bf00      	nop
      }

      if (status == HAL_OK)
 8005dc2:	7ffb      	ldrb	r3, [r7, #31]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d115      	bne.n	8005df4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9f9 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d108      	bne.n	8005df4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2202      	movs	r2, #2
 8005de8:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f8e2 	bl	8005fb4 <HAL_QSPI_Abort>
 8005df0:	4603      	mov	r3, r0
 8005df2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dfc:	e00a      	b.n	8005e14 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f043 0208 	orr.w	r2, r3, #8
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e001      	b.n	8005e14 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
 8005e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b088      	sub	sp, #32
 8005e2a:	af02      	add	r7, sp, #8
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7fd fd64 	bl	8003900 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_QSPI_AutoPolling+0x24>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e060      	b.n	8005f0c <HAL_QSPI_AutoPolling+0xe6>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d14f      	bne.n	8005efe <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2242      	movs	r2, #66	; 0x42
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2120      	movs	r1, #32
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f9a7 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d13d      	bne.n	8005f02 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6852      	ldr	r2, [r2, #4]
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6892      	ldr	r2, [r2, #8]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ebc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f9b3 	bl	8006238 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2108      	movs	r1, #8
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f974 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005efc:	e001      	b.n	8005f02 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
 8005f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005fc0:	f7fd fc9e 	bl	8003900 <HAL_GetTick>
 8005fc4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d056      	beq.n	8006084 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe fe93 	bl	8004d2c <HAL_DMA_Abort>
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006014:	f043 0204 	orr.w	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0202 	orr.w	r2, r2, #2
 800602a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2201      	movs	r2, #1
 8006036:	2102      	movs	r1, #2
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8c6 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10e      	bne.n	8006066 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2202      	movs	r2, #2
 800604e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	2120      	movs	r1, #32
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8b4 	bl	80061ca <QSPI_WaitFlagStateUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800607a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d046      	beq.n	800613a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2208      	movs	r2, #8
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80060ca:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0204 	bic.w	r2, r2, #4
 80060e8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	4a15      	ldr	r2, [pc, #84]	; (8006144 <HAL_QSPI_Abort_IT+0xb4>)
 80060f0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fe88 	bl	8004e0c <HAL_DMA_Abort_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01b      	beq.n	800613a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff ff0c 	bl	8005f28 <HAL_QSPI_AbortCpltCallback>
 8006110:	e013      	b.n	800613a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2202      	movs	r2, #2
 8006118:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006128:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0202 	orr.w	r2, r2, #2
 8006138:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	08006165 	.word	0x08006165

08006148 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b08      	cmp	r3, #8
 8006188:	d114      	bne.n	80061b4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2202      	movs	r2, #2
 8006190:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80061a0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0202 	orr.w	r2, r2, #2
 80061b0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80061b2:	e006      	b.n	80061c2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fea9 	bl	8005f14 <HAL_QSPI_ErrorCallback>
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061da:	e01a      	b.n	8006212 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e2:	d016      	beq.n	8006212 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e4:	f7fd fb8c 	bl	8003900 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <QSPI_WaitFlagStateUntilTimeout+0x30>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	f043 0201 	orr.w	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e00e      	b.n	8006230 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	429a      	cmp	r2, r3
 800622c:	d1d6      	bne.n	80061dc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <QSPI_Config+0x28>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006252:	d005      	beq.n	8006260 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3a01      	subs	r2, #1
 800625e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80b9 	beq.w	80063dc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d05f      	beq.n	8006332 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d031      	beq.n	80062e8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	431a      	orrs	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	431a      	orrs	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	431a      	orrs	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	049b      	lsls	r3, r3, #18
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	ea42 0103 	orr.w	r1, r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062d8:	f000 812e 	beq.w	8006538 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	6852      	ldr	r2, [r2, #4]
 80062e4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80062e6:	e127      	b.n	8006538 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	049b      	lsls	r3, r3, #18
 8006304:	431a      	orrs	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	431a      	orrs	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	431a      	orrs	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	431a      	orrs	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	431a      	orrs	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	ea42 0103 	orr.w	r1, r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	430a      	orrs	r2, r1
 800632e:	615a      	str	r2, [r3, #20]
}
 8006330:	e102      	b.n	8006538 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02e      	beq.n	8006398 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	431a      	orrs	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	431a      	orrs	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	431a      	orrs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	049b      	lsls	r3, r3, #18
 8006356:	431a      	orrs	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	431a      	orrs	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	431a      	orrs	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	431a      	orrs	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	ea42 0103 	orr.w	r1, r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	430a      	orrs	r2, r1
 8006380:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006388:	f000 80d6 	beq.w	8006538 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	6852      	ldr	r2, [r2, #4]
 8006394:	619a      	str	r2, [r3, #24]
}
 8006396:	e0cf      	b.n	8006538 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	049b      	lsls	r3, r3, #18
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	ea42 0103 	orr.w	r1, r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	615a      	str	r2, [r3, #20]
}
 80063da:	e0ad      	b.n	8006538 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d058      	beq.n	8006496 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	6892      	ldr	r2, [r2, #8]
 80063ec:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d02d      	beq.n	8006452 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	431a      	orrs	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	431a      	orrs	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	049b      	lsls	r3, r3, #18
 8006412:	431a      	orrs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	431a      	orrs	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	431a      	orrs	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	ea42 0103 	orr.w	r1, r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	430a      	orrs	r2, r1
 800643c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006444:	d078      	beq.n	8006538 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	6852      	ldr	r2, [r2, #4]
 800644e:	619a      	str	r2, [r3, #24]
}
 8006450:	e072      	b.n	8006538 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	431a      	orrs	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	431a      	orrs	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	431a      	orrs	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	049b      	lsls	r3, r3, #18
 800646e:	431a      	orrs	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	431a      	orrs	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	431a      	orrs	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	431a      	orrs	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	ea42 0103 	orr.w	r1, r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	430a      	orrs	r2, r1
 8006492:	615a      	str	r2, [r3, #20]
}
 8006494:	e050      	b.n	8006538 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d02a      	beq.n	80064f4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	431a      	orrs	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	049b      	lsls	r3, r3, #18
 80064ba:	431a      	orrs	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	430a      	orrs	r2, r1
 80064de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064e6:	d027      	beq.n	8006538 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	6852      	ldr	r2, [r2, #4]
 80064f0:	619a      	str	r2, [r3, #24]
}
 80064f2:	e021      	b.n	8006538 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01d      	beq.n	8006538 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	431a      	orrs	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	431a      	orrs	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	431a      	orrs	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	049b      	lsls	r3, r3, #18
 8006518:	431a      	orrs	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	431a      	orrs	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	431a      	orrs	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	ea42 0103 	orr.w	r1, r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	430a      	orrs	r2, r1
 8006536:	615a      	str	r2, [r3, #20]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0cc      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006558:	4b68      	ldr	r3, [pc, #416]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d90c      	bls.n	8006580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006566:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b63      	ldr	r3, [pc, #396]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0b8      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4a58      	ldr	r2, [pc, #352]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065b0:	4b53      	ldr	r3, [pc, #332]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	4a52      	ldr	r2, [pc, #328]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065bc:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	494d      	ldr	r1, [pc, #308]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d044      	beq.n	8006664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d107      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d119      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d003      	beq.n	8006602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d107      	bne.n	8006612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e06f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006612:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e067      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006622:	4b37      	ldr	r3, [pc, #220]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 0203 	bic.w	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4934      	ldr	r1, [pc, #208]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	4313      	orrs	r3, r2
 8006632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006634:	f7fd f964 	bl	8003900 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	e00a      	b.n	8006652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663c:	f7fd f960 	bl	8003900 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e04f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 020c 	and.w	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	429a      	cmp	r2, r3
 8006662:	d1eb      	bne.n	800663c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d20c      	bcs.n	800668c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e032      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4916      	ldr	r1, [pc, #88]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	490e      	ldr	r1, [pc, #56]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ca:	f000 f887 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 80066ce:	4602      	mov	r2, r0
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	490a      	ldr	r1, [pc, #40]	; (8006704 <HAL_RCC_ClockConfig+0x1c0>)
 80066dc:	5ccb      	ldrb	r3, [r1, r3]
 80066de:	fa22 f303 	lsr.w	r3, r2, r3
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <HAL_RCC_ClockConfig+0x1c4>)
 80066e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fc fafa 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40023c00 	.word	0x40023c00
 8006700:	40023800 	.word	0x40023800
 8006704:	0800b6b0 	.word	0x0800b6b0
 8006708:	20000040 	.word	0x20000040
 800670c:	20000044 	.word	0x20000044

08006710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006714:	4b03      	ldr	r3, [pc, #12]	; (8006724 <HAL_RCC_GetHCLKFreq+0x14>)
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000040 	.word	0x20000040

08006728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800672c:	f7ff fff0 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	0a9b      	lsrs	r3, r3, #10
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4903      	ldr	r1, [pc, #12]	; (800674c <HAL_RCC_GetPCLK1Freq+0x24>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40023800 	.word	0x40023800
 800674c:	0800b6c0 	.word	0x0800b6c0

08006750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006754:	f7ff ffdc 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006758:	4602      	mov	r2, r0
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	0b5b      	lsrs	r3, r3, #13
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	4903      	ldr	r1, [pc, #12]	; (8006774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006766:	5ccb      	ldrb	r3, [r1, r3]
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40023800 	.word	0x40023800
 8006774:	0800b6c0 	.word	0x0800b6c0

08006778 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	220f      	movs	r2, #15
 8006786:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_RCC_GetClockConfig+0x5c>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0203 	and.w	r2, r3, #3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <HAL_RCC_GetClockConfig+0x5c>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_RCC_GetClockConfig+0x5c>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067ba:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <HAL_RCC_GetClockConfig+0x60>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40023c00 	.word	0x40023c00

080067dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067e4:	2600      	movs	r6, #0
 80067e6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80067e8:	2600      	movs	r6, #0
 80067ea:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80067ec:	2600      	movs	r6, #0
 80067ee:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80067f0:	2600      	movs	r6, #0
 80067f2:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067f4:	2600      	movs	r6, #0
 80067f6:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f8:	4ea3      	ldr	r6, [pc, #652]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067fa:	68b6      	ldr	r6, [r6, #8]
 80067fc:	f006 060c 	and.w	r6, r6, #12
 8006800:	2e0c      	cmp	r6, #12
 8006802:	f200 8137 	bhi.w	8006a74 <HAL_RCC_GetSysClockFreq+0x298>
 8006806:	f20f 0c08 	addw	ip, pc, #8
 800680a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006845 	.word	0x08006845
 8006814:	08006a75 	.word	0x08006a75
 8006818:	08006a75 	.word	0x08006a75
 800681c:	08006a75 	.word	0x08006a75
 8006820:	0800684b 	.word	0x0800684b
 8006824:	08006a75 	.word	0x08006a75
 8006828:	08006a75 	.word	0x08006a75
 800682c:	08006a75 	.word	0x08006a75
 8006830:	08006851 	.word	0x08006851
 8006834:	08006a75 	.word	0x08006a75
 8006838:	08006a75 	.word	0x08006a75
 800683c:	08006a75 	.word	0x08006a75
 8006840:	08006967 	.word	0x08006967
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006844:	4b91      	ldr	r3, [pc, #580]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006846:	613b      	str	r3, [r7, #16]
       break;
 8006848:	e117      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800684a:	4b91      	ldr	r3, [pc, #580]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800684c:	613b      	str	r3, [r7, #16]
      break;
 800684e:	e114      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006850:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006858:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800685a:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d024      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006866:	4b88      	ldr	r3, [pc, #544]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	461a      	mov	r2, r3
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006876:	f04f 0500 	mov.w	r5, #0
 800687a:	ea02 0004 	and.w	r0, r2, r4
 800687e:	ea03 0105 	and.w	r1, r3, r5
 8006882:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006884:	fb03 f201 	mul.w	r2, r3, r1
 8006888:	2300      	movs	r3, #0
 800688a:	fb03 f300 	mul.w	r3, r3, r0
 800688e:	4413      	add	r3, r2
 8006890:	4a7f      	ldr	r2, [pc, #508]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006892:	fba0 0102 	umull	r0, r1, r0, r2
 8006896:	440b      	add	r3, r1
 8006898:	4619      	mov	r1, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	461a      	mov	r2, r3
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	f7f9 fcb5 	bl	8000210 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4613      	mov	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e04c      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b0:	4b75      	ldr	r3, [pc, #468]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	099b      	lsrs	r3, r3, #6
 80068b6:	461a      	mov	r2, r3
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068c0:	f04f 0100 	mov.w	r1, #0
 80068c4:	ea02 0800 	and.w	r8, r2, r0
 80068c8:	ea03 0901 	and.w	r9, r3, r1
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	014b      	lsls	r3, r1, #5
 80068da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068de:	0142      	lsls	r2, r0, #5
 80068e0:	4610      	mov	r0, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	ebb0 0008 	subs.w	r0, r0, r8
 80068e8:	eb61 0109 	sbc.w	r1, r1, r9
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	018b      	lsls	r3, r1, #6
 80068f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068fa:	0182      	lsls	r2, r0, #6
 80068fc:	1a12      	subs	r2, r2, r0
 80068fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	00d9      	lsls	r1, r3, #3
 800690c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006910:	00d0      	lsls	r0, r2, #3
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	eb12 0208 	adds.w	r2, r2, r8
 800691a:	eb43 0309 	adc.w	r3, r3, r9
 800691e:	f04f 0000 	mov.w	r0, #0
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	0299      	lsls	r1, r3, #10
 8006928:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800692c:	0290      	lsls	r0, r2, #10
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	461a      	mov	r2, r3
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	f7f9 fc67 	bl	8000210 <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4613      	mov	r3, r2
 8006948:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800694a:	4b4f      	ldr	r3, [pc, #316]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	3301      	adds	r3, #1
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006962:	613b      	str	r3, [r7, #16]
      break;
 8006964:	e089      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006966:	4948      	ldr	r1, [pc, #288]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006968:	6849      	ldr	r1, [r1, #4]
 800696a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800696e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006970:	4945      	ldr	r1, [pc, #276]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006972:	6849      	ldr	r1, [r1, #4]
 8006974:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006978:	2900      	cmp	r1, #0
 800697a:	d024      	beq.n	80069c6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697c:	4942      	ldr	r1, [pc, #264]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800697e:	6849      	ldr	r1, [r1, #4]
 8006980:	0989      	lsrs	r1, r1, #6
 8006982:	4608      	mov	r0, r1
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	f240 14ff 	movw	r4, #511	; 0x1ff
 800698c:	f04f 0500 	mov.w	r5, #0
 8006990:	ea00 0204 	and.w	r2, r0, r4
 8006994:	ea01 0305 	and.w	r3, r1, r5
 8006998:	493d      	ldr	r1, [pc, #244]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800699a:	fb01 f003 	mul.w	r0, r1, r3
 800699e:	2100      	movs	r1, #0
 80069a0:	fb01 f102 	mul.w	r1, r1, r2
 80069a4:	1844      	adds	r4, r0, r1
 80069a6:	493a      	ldr	r1, [pc, #232]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80069a8:	fba2 0101 	umull	r0, r1, r2, r1
 80069ac:	1863      	adds	r3, r4, r1
 80069ae:	4619      	mov	r1, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	f7f9 fc2a 	bl	8000210 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4613      	mov	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e04a      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069c6:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	099b      	lsrs	r3, r3, #6
 80069cc:	461a      	mov	r2, r3
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	ea02 0400 	and.w	r4, r2, r0
 80069de:	ea03 0501 	and.w	r5, r3, r1
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	014b      	lsls	r3, r1, #5
 80069f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069f4:	0142      	lsls	r2, r0, #5
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	1b00      	subs	r0, r0, r4
 80069fc:	eb61 0105 	sbc.w	r1, r1, r5
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	018b      	lsls	r3, r1, #6
 8006a0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a0e:	0182      	lsls	r2, r0, #6
 8006a10:	1a12      	subs	r2, r2, r0
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	f04f 0000 	mov.w	r0, #0
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	00d9      	lsls	r1, r3, #3
 8006a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a24:	00d0      	lsls	r0, r2, #3
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	1912      	adds	r2, r2, r4
 8006a2c:	eb45 0303 	adc.w	r3, r5, r3
 8006a30:	f04f 0000 	mov.w	r0, #0
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	0299      	lsls	r1, r3, #10
 8006a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a3e:	0290      	lsls	r0, r2, #10
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	f7f9 fbde 	bl	8000210 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	0f1b      	lsrs	r3, r3, #28
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	613b      	str	r3, [r7, #16]
      break;
 8006a72:	e002      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006a76:	613b      	str	r3, [r7, #16]
      break;
 8006a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7a:	693b      	ldr	r3, [r7, #16]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	017d7840 	.word	0x017d7840

08006a94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8083 	beq.w	8006bb4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006aae:	4b95      	ldr	r3, [pc, #596]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d019      	beq.n	8006aee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006aba:	4b92      	ldr	r3, [pc, #584]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d106      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ac6:	4b8f      	ldr	r3, [pc, #572]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d00c      	beq.n	8006aee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad4:	4b8b      	ldr	r3, [pc, #556]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d112      	bne.n	8006b06 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ae0:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aec:	d10b      	bne.n	8006b06 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aee:	4b85      	ldr	r3, [pc, #532]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d05b      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x11e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d157      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e216      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x8a>
 8006b10:	4b7c      	ldr	r3, [pc, #496]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a7b      	ldr	r2, [pc, #492]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e01d      	b.n	8006b5a <HAL_RCC_OscConfig+0xc6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCC_OscConfig+0xae>
 8006b28:	4b76      	ldr	r3, [pc, #472]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a75      	ldr	r2, [pc, #468]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a72      	ldr	r2, [pc, #456]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e00b      	b.n	8006b5a <HAL_RCC_OscConfig+0xc6>
 8006b42:	4b70      	ldr	r3, [pc, #448]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6f      	ldr	r2, [pc, #444]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6c      	ldr	r2, [pc, #432]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d013      	beq.n	8006b8a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b62:	f7fc fecd 	bl	8003900 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6a:	f7fc fec9 	bl	8003900 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b64      	cmp	r3, #100	; 0x64
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e1db      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7c:	4b61      	ldr	r3, [pc, #388]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0xd6>
 8006b88:	e014      	b.n	8006bb4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8a:	f7fc feb9 	bl	8003900 <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b92:	f7fc feb5 	bl	8003900 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b64      	cmp	r3, #100	; 0x64
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e1c7      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba4:	4b57      	ldr	r3, [pc, #348]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f0      	bne.n	8006b92 <HAL_RCC_OscConfig+0xfe>
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06f      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bc0:	4b50      	ldr	r3, [pc, #320]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bcc:	4b4d      	ldr	r3, [pc, #308]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bd8:	4b4a      	ldr	r3, [pc, #296]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006be4:	4b47      	ldr	r3, [pc, #284]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bec:	2b0c      	cmp	r3, #12
 8006bee:	d11c      	bne.n	8006c2a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf0:	4b44      	ldr	r3, [pc, #272]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d116      	bne.n	8006c2a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfc:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_RCC_OscConfig+0x180>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e18f      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c14:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	4938      	ldr	r1, [pc, #224]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c28:	e03a      	b.n	8006ca0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c32:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <HAL_RCC_OscConfig+0x274>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fc fe62 	bl	8003900 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c40:	f7fc fe5e 	bl	8003900 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e170      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4925      	ldr	r1, [pc, #148]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]
 8006c72:	e015      	b.n	8006ca0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c74:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <HAL_RCC_OscConfig+0x274>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7a:	f7fc fe41 	bl	8003900 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c82:	f7fc fe3d 	bl	8003900 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e14f      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f0      	bne.n	8006c82 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d037      	beq.n	8006d1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d016      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <HAL_RCC_OscConfig+0x278>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fc fe21 	bl	8003900 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc2:	f7fc fe1d 	bl	8003900 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e12f      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <HAL_RCC_OscConfig+0x270>)
 8006cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x22e>
 8006ce0:	e01c      	b.n	8006d1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCC_OscConfig+0x278>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce8:	f7fc fe0a 	bl	8003900 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cee:	e00f      	b.n	8006d10 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf0:	f7fc fe06 	bl	8003900 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d908      	bls.n	8006d10 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e118      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470000 	.word	0x42470000
 8006d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e9      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8097 	beq.w	8006e58 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2e:	4b83      	ldr	r3, [pc, #524]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	4a7e      	ldr	r2, [pc, #504]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4a:	4b7c      	ldr	r3, [pc, #496]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5a:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <HAL_RCC_OscConfig+0x4ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d118      	bne.n	8006d98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d66:	4b76      	ldr	r3, [pc, #472]	; (8006f40 <HAL_RCC_OscConfig+0x4ac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a75      	ldr	r2, [pc, #468]	; (8006f40 <HAL_RCC_OscConfig+0x4ac>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d72:	f7fc fdc5 	bl	8003900 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7a:	f7fc fdc1 	bl	8003900 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e0d3      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_RCC_OscConfig+0x4ac>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x31a>
 8006da0:	4b66      	ldr	r3, [pc, #408]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	4a65      	ldr	r2, [pc, #404]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dac:	e01c      	b.n	8006de8 <HAL_RCC_OscConfig+0x354>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x33c>
 8006db6:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	4a60      	ldr	r2, [pc, #384]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc2:	4b5e      	ldr	r3, [pc, #376]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	4a5d      	ldr	r2, [pc, #372]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0x354>
 8006dd0:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	4a59      	ldr	r2, [pc, #356]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	6713      	str	r3, [r2, #112]	; 0x70
 8006ddc:	4b57      	ldr	r3, [pc, #348]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	4a56      	ldr	r2, [pc, #344]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006de2:	f023 0304 	bic.w	r3, r3, #4
 8006de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d015      	beq.n	8006e1c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fc fd86 	bl	8003900 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fc fd82 	bl	8003900 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e092      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0e:	4b4b      	ldr	r3, [pc, #300]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0ee      	beq.n	8006df8 <HAL_RCC_OscConfig+0x364>
 8006e1a:	e014      	b.n	8006e46 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1c:	f7fc fd70 	bl	8003900 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e22:	e00a      	b.n	8006e3a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e24:	f7fc fd6c 	bl	8003900 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e07c      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e3a:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1ee      	bne.n	8006e24 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d105      	bne.n	8006e58 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	4a3a      	ldr	r2, [pc, #232]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d068      	beq.n	8006f32 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d060      	beq.n	8006f2e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d145      	bne.n	8006f00 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b33      	ldr	r3, [pc, #204]	; (8006f44 <HAL_RCC_OscConfig+0x4b0>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc fd41 	bl	8003900 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e82:	f7fc fd3d 	bl	8003900 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e04f      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e94:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f0      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	019b      	lsls	r3, r3, #6
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	071b      	lsls	r3, r3, #28
 8006ecc:	491b      	ldr	r1, [pc, #108]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <HAL_RCC_OscConfig+0x4b0>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fc fd12 	bl	8003900 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee0:	f7fc fd0e 	bl	8003900 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e020      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x44c>
 8006efe:	e018      	b.n	8006f32 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_RCC_OscConfig+0x4b0>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f06:	f7fc fcfb 	bl	8003900 <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0e:	f7fc fcf7 	bl	8003900 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e009      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <HAL_RCC_OscConfig+0x4a8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f0      	bne.n	8006f0e <HAL_RCC_OscConfig+0x47a>
 8006f2c:	e001      	b.n	8006f32 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000
 8006f44:	42470060 	.word	0x42470060

08006f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01d      	b.n	8006f96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fc f91c 	bl	80031ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f000 fb1c 	bl	80075c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e01d      	b.n	8007034 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f815 	bl	800703c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f000 facd 	bl	80075c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b02      	cmp	r3, #2
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0202 	mvn.w	r2, #2
 800707c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa78 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa6a 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa7b 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0204 	mvn.w	r2, #4
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa4e 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa40 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa51 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b08      	cmp	r3, #8
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b08      	cmp	r3, #8
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0208 	mvn.w	r2, #8
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa24 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa16 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa27 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d122      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b10      	cmp	r3, #16
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0210 	mvn.w	r2, #16
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2208      	movs	r2, #8
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9fa 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9ec 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f9fd 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0201 	mvn.w	r2, #1
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fb fc96 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071de:	2b80      	cmp	r3, #128	; 0x80
 80071e0:	d10e      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d107      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fdce 	bl	8007d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d10e      	bne.n	800722c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d107      	bne.n	800722c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9c2 	bl	80075b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b20      	cmp	r3, #32
 8007238:	d10e      	bne.n	8007258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b20      	cmp	r3, #32
 8007246:	d107      	bne.n	8007258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0220 	mvn.w	r2, #32
 8007250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fd98 	bl	8007d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007276:	2302      	movs	r3, #2
 8007278:	e0b4      	b.n	80073e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b0c      	cmp	r3, #12
 800728e:	f200 809f 	bhi.w	80073d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072cd 	.word	0x080072cd
 800729c:	080073d1 	.word	0x080073d1
 80072a0:	080073d1 	.word	0x080073d1
 80072a4:	080073d1 	.word	0x080073d1
 80072a8:	0800730d 	.word	0x0800730d
 80072ac:	080073d1 	.word	0x080073d1
 80072b0:	080073d1 	.word	0x080073d1
 80072b4:	080073d1 	.word	0x080073d1
 80072b8:	0800734f 	.word	0x0800734f
 80072bc:	080073d1 	.word	0x080073d1
 80072c0:	080073d1 	.word	0x080073d1
 80072c4:	080073d1 	.word	0x080073d1
 80072c8:	0800738f 	.word	0x0800738f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fa16 	bl	8007704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0208 	orr.w	r2, r2, #8
 80072e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6999      	ldr	r1, [r3, #24]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	619a      	str	r2, [r3, #24]
      break;
 800730a:	e062      	b.n	80073d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fa66 	bl	80077e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6999      	ldr	r1, [r3, #24]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	021a      	lsls	r2, r3, #8
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
      break;
 800734c:	e041      	b.n	80073d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fabb 	bl	80078d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0208 	orr.w	r2, r2, #8
 8007368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0204 	bic.w	r2, r2, #4
 8007378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69d9      	ldr	r1, [r3, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	61da      	str	r2, [r3, #28]
      break;
 800738c:	e021      	b.n	80073d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fb0f 	bl	80079b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69d9      	ldr	r1, [r3, #28]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	021a      	lsls	r2, r3, #8
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	61da      	str	r2, [r3, #28]
      break;
 80073ce:	e000      	b.n	80073d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80073d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_ConfigClockSource+0x18>
 8007400:	2302      	movs	r3, #2
 8007402:	e0b3      	b.n	800756c <HAL_TIM_ConfigClockSource+0x180>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d03e      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0xd0>
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007442:	f200 8087 	bhi.w	8007554 <HAL_TIM_ConfigClockSource+0x168>
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	f000 8085 	beq.w	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007452:	d87f      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 8007454:	2b70      	cmp	r3, #112	; 0x70
 8007456:	d01a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0xa2>
 8007458:	2b70      	cmp	r3, #112	; 0x70
 800745a:	d87b      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 800745c:	2b60      	cmp	r3, #96	; 0x60
 800745e:	d050      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x116>
 8007460:	2b60      	cmp	r3, #96	; 0x60
 8007462:	d877      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 8007464:	2b50      	cmp	r3, #80	; 0x50
 8007466:	d03c      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0xf6>
 8007468:	2b50      	cmp	r3, #80	; 0x50
 800746a:	d873      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d058      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x136>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d86f      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 8007474:	2b30      	cmp	r3, #48	; 0x30
 8007476:	d064      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x156>
 8007478:	2b30      	cmp	r3, #48	; 0x30
 800747a:	d86b      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 800747c:	2b20      	cmp	r3, #32
 800747e:	d060      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x156>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d867      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d05c      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x156>
 8007488:	2b10      	cmp	r3, #16
 800748a:	d05a      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800748c:	e062      	b.n	8007554 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6899      	ldr	r1, [r3, #8]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f000 fb5b 	bl	8007b58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	609a      	str	r2, [r3, #8]
      break;
 80074ba:	e04e      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6899      	ldr	r1, [r3, #8]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f000 fb44 	bl	8007b58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074de:	609a      	str	r2, [r3, #8]
      break;
 80074e0:	e03b      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 fab8 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2150      	movs	r1, #80	; 0x50
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fb11 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007500:	e02b      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f000 fad7 	bl	8007ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2160      	movs	r1, #96	; 0x60
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fb01 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007520:	e01b      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fa98 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	4618      	mov	r0, r3
 800753c:	f000 faf1 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007540:	e00b      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f000 fae8 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007552:	e002      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a40      	ldr	r2, [pc, #256]	; (80076d8 <TIM_Base_SetConfig+0x114>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <TIM_Base_SetConfig+0x40>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e2:	d00f      	beq.n	8007604 <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a3d      	ldr	r2, [pc, #244]	; (80076dc <TIM_Base_SetConfig+0x118>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_Base_SetConfig+0x40>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a3c      	ldr	r2, [pc, #240]	; (80076e0 <TIM_Base_SetConfig+0x11c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_Base_SetConfig+0x40>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a3b      	ldr	r2, [pc, #236]	; (80076e4 <TIM_Base_SetConfig+0x120>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_Base_SetConfig+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a3a      	ldr	r2, [pc, #232]	; (80076e8 <TIM_Base_SetConfig+0x124>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d108      	bne.n	8007616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2f      	ldr	r2, [pc, #188]	; (80076d8 <TIM_Base_SetConfig+0x114>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02b      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007624:	d027      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <TIM_Base_SetConfig+0x118>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d023      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a2b      	ldr	r2, [pc, #172]	; (80076e0 <TIM_Base_SetConfig+0x11c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d01f      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a2a      	ldr	r2, [pc, #168]	; (80076e4 <TIM_Base_SetConfig+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01b      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a29      	ldr	r2, [pc, #164]	; (80076e8 <TIM_Base_SetConfig+0x124>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d017      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <TIM_Base_SetConfig+0x128>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a27      	ldr	r2, [pc, #156]	; (80076f0 <TIM_Base_SetConfig+0x12c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00f      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <TIM_Base_SetConfig+0x130>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00b      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <TIM_Base_SetConfig+0x134>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a24      	ldr	r2, [pc, #144]	; (80076fc <TIM_Base_SetConfig+0x138>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_Base_SetConfig+0xb2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a23      	ldr	r2, [pc, #140]	; (8007700 <TIM_Base_SetConfig+0x13c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d108      	bne.n	8007688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a0a      	ldr	r2, [pc, #40]	; (80076d8 <TIM_Base_SetConfig+0x114>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_Base_SetConfig+0xf8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <TIM_Base_SetConfig+0x124>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d103      	bne.n	80076c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	615a      	str	r2, [r3, #20]
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40010400 	.word	0x40010400
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40014400 	.word	0x40014400
 80076f4:	40014800 	.word	0x40014800
 80076f8:	40001800 	.word	0x40001800
 80076fc:	40001c00 	.word	0x40001c00
 8007700:	40002000 	.word	0x40002000

08007704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 0302 	bic.w	r3, r3, #2
 800774c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <TIM_OC1_SetConfig+0xd8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC1_SetConfig+0x64>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <TIM_OC1_SetConfig+0xdc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10c      	bne.n	8007782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f023 0308 	bic.w	r3, r3, #8
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f023 0304 	bic.w	r3, r3, #4
 8007780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a15      	ldr	r2, [pc, #84]	; (80077dc <TIM_OC1_SetConfig+0xd8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_OC1_SetConfig+0x8e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a14      	ldr	r2, [pc, #80]	; (80077e0 <TIM_OC1_SetConfig+0xdc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d111      	bne.n	80077b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40010400 	.word	0x40010400

080077e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f023 0210 	bic.w	r2, r3, #16
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0320 	bic.w	r3, r3, #32
 800782e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <TIM_OC2_SetConfig+0xe4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_OC2_SetConfig+0x68>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <TIM_OC2_SetConfig+0xe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d10d      	bne.n	8007868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <TIM_OC2_SetConfig+0xe4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_OC2_SetConfig+0x94>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a16      	ldr	r2, [pc, #88]	; (80078cc <TIM_OC2_SetConfig+0xe8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d113      	bne.n	80078a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40010400 	.word	0x40010400

080078d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <TIM_OC3_SetConfig+0xe0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_OC3_SetConfig+0x66>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <TIM_OC3_SetConfig+0xe4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10d      	bne.n	8007952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800793c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <TIM_OC3_SetConfig+0xe0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_OC3_SetConfig+0x92>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <TIM_OC3_SetConfig+0xe4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d113      	bne.n	800798a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	621a      	str	r2, [r3, #32]
}
 80079a4:	bf00      	nop
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40010400 	.word	0x40010400

080079b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	031b      	lsls	r3, r3, #12
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a12      	ldr	r2, [pc, #72]	; (8007a5c <TIM_OC4_SetConfig+0xa4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_OC4_SetConfig+0x68>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <TIM_OC4_SetConfig+0xa8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d109      	bne.n	8007a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	019b      	lsls	r3, r3, #6
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	621a      	str	r2, [r3, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40010000 	.word	0x40010000
 8007a60:	40010400 	.word	0x40010400

08007a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f023 030a 	bic.w	r3, r3, #10
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0210 	bic.w	r2, r3, #16
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	031b      	lsls	r3, r3, #12
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f043 0307 	orr.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	609a      	str	r2, [r3, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	021a      	lsls	r2, r3, #8
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	609a      	str	r2, [r3, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f900 	bl	8007db0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d007      	beq.n	8007be2 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e05a      	b.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a21      	ldr	r2, [pc, #132]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d022      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c50:	d01d      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1d      	ldr	r2, [pc, #116]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1b      	ldr	r2, [pc, #108]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a17      	ldr	r2, [pc, #92]	; (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40001800 	.word	0x40001800

08007ce4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e03d      	b.n	8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e03f      	b.n	8007e8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fb fae7 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	; 0x24
 8007e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fc8c 	bl	800875c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e047      	b.n	8007f36 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fb fa9a 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2224      	movs	r2, #36	; 0x24
 8007ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc3f 	bl	800875c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695a      	ldr	r2, [r3, #20]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007efc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0208 	orr.w	r2, r2, #8
 8007f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d153      	bne.n	8008002 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_UART_Transmit_DMA+0x26>
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e04c      	b.n	8008004 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Transmit_DMA+0x38>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e045      	b.n	8008004 <HAL_UART_Transmit_DMA+0xc4>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	88fa      	ldrh	r2, [r7, #6]
 8007f90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2221      	movs	r2, #33	; 0x21
 8007f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	4a19      	ldr	r2, [pc, #100]	; (800800c <HAL_UART_Transmit_DMA+0xcc>)
 8007fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	4a18      	ldr	r2, [pc, #96]	; (8008010 <HAL_UART_Transmit_DMA+0xd0>)
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	4a17      	ldr	r2, [pc, #92]	; (8008014 <HAL_UART_Transmit_DMA+0xd4>)
 8007fb6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	f7fc fe50 	bl	8004c7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ffc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e000      	b.n	8008004 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	08008369 	.word	0x08008369
 8008010:	080083bb 	.word	0x080083bb
 8008014:	0800845b 	.word	0x0800845b

08008018 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b20      	cmp	r3, #32
 8008030:	d166      	bne.n	8008100 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_UART_Receive_DMA+0x26>
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e05f      	b.n	8008102 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_UART_Receive_DMA+0x38>
 800804c:	2302      	movs	r3, #2
 800804e:	e058      	b.n	8008102 <HAL_UART_Receive_DMA+0xea>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	88fa      	ldrh	r2, [r7, #6]
 8008062:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2222      	movs	r2, #34	; 0x22
 800806e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008076:	4a25      	ldr	r2, [pc, #148]	; (800810c <HAL_UART_Receive_DMA+0xf4>)
 8008078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807e:	4a24      	ldr	r2, [pc, #144]	; (8008110 <HAL_UART_Receive_DMA+0xf8>)
 8008080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008086:	4a23      	ldr	r2, [pc, #140]	; (8008114 <HAL_UART_Receive_DMA+0xfc>)
 8008088:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808e:	2200      	movs	r2, #0
 8008090:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	f7fc fde7 	bl	8004c7c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80080ae:	2300      	movs	r3, #0
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	080083d7 	.word	0x080083d7
 8008110:	0800843f 	.word	0x0800843f
 8008114:	0800845b 	.word	0x0800845b

08008118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10d      	bne.n	800816a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_UART_IRQHandler+0x52>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa79 	bl	800865a <UART_Receive_IT>
      return;
 8008168:	e0d0      	b.n	800830c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80b0 	beq.w	80082d2 <HAL_UART_IRQHandler+0x1ba>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d105      	bne.n	8008188 <HAL_UART_IRQHandler+0x70>
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80a5 	beq.w	80082d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_UART_IRQHandler+0x90>
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a0:	f043 0201 	orr.w	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_UART_IRQHandler+0xb0>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	f043 0202 	orr.w	r2, r3, #2
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HAL_UART_IRQHandler+0xd0>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e0:	f043 0204 	orr.w	r2, r3, #4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00f      	beq.n	8008212 <HAL_UART_IRQHandler+0xfa>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <HAL_UART_IRQHandler+0xee>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	f043 0208 	orr.w	r2, r3, #8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d077      	beq.n	800830a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <HAL_UART_IRQHandler+0x11c>
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa13 	bl	800865a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <HAL_UART_IRQHandler+0x144>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d031      	beq.n	80082c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f95c 	bl	800851a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826c:	2b40      	cmp	r3, #64	; 0x40
 800826e:	d123      	bne.n	80082b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800827e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d013      	beq.n	80082b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828c:	4a21      	ldr	r2, [pc, #132]	; (8008314 <HAL_UART_IRQHandler+0x1fc>)
 800828e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	4618      	mov	r0, r3
 8008296:	f7fc fdb9 	bl	8004e0c <HAL_DMA_Abort_IT>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d016      	beq.n	80082ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082aa:	4610      	mov	r0, r2
 80082ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ae:	e00e      	b.n	80082ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f84f 	bl	8008354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b6:	e00a      	b.n	80082ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f84b 	bl	8008354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	e006      	b.n	80082ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f847 	bl	8008354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80082cc:	e01d      	b.n	800830a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	bf00      	nop
    return;
 80082d0:	e01b      	b.n	800830a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_UART_IRQHandler+0x1d6>
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f949 	bl	800857e <UART_Transmit_IT>
    return;
 80082ec:	e00e      	b.n	800830c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d009      	beq.n	800830c <HAL_UART_IRQHandler+0x1f4>
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f991 	bl	800862a <UART_EndTransmit_IT>
    return;
 8008308:	e000      	b.n	800830c <HAL_UART_IRQHandler+0x1f4>
    return;
 800830a:	bf00      	nop
  }
}
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	08008557 	.word	0x08008557

08008318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d113      	bne.n	80083ac <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008398:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083a8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083aa:	e002      	b.n	80083b2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff ffb3 	bl	8008318 <HAL_UART_TxCpltCallback>
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff ffaf 	bl	800832c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d11e      	bne.n	8008430 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008406:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695a      	ldr	r2, [r3, #20]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008426:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7f9 f9b1 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff ff77 	bl	8008340 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008476:	2b80      	cmp	r3, #128	; 0x80
 8008478:	bf0c      	ite	eq
 800847a:	2301      	moveq	r3, #1
 800847c:	2300      	movne	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b21      	cmp	r3, #33	; 0x21
 800848c:	d108      	bne.n	80084a0 <UART_DMAError+0x46>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800849a:	68b8      	ldr	r0, [r7, #8]
 800849c:	f000 f827 	bl	80084ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	bf0c      	ite	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	2300      	movne	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b22      	cmp	r3, #34	; 0x22
 80084c0:	d108      	bne.n	80084d4 <UART_DMAError+0x7a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f000 f823 	bl	800851a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d8:	f043 0210 	orr.w	r2, r3, #16
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084e0:	68b8      	ldr	r0, [r7, #8]
 80084e2:	f7ff ff37 	bl	8008354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008504:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008530:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695a      	ldr	r2, [r3, #20]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff feef 	bl	8008354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b21      	cmp	r3, #33	; 0x21
 8008590:	d144      	bne.n	800861c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859a:	d11a      	bne.n	80085d2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	1c9a      	adds	r2, r3, #2
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]
 80085c4:	e00e      	b.n	80085e4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]
 80085d0:	e008      	b.n	80085e4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6211      	str	r1, [r2, #32]
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10f      	bne.n	8008618 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e000      	b.n	800861e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fe64 	bl	8008318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b22      	cmp	r3, #34	; 0x22
 800866c:	d171      	bne.n	8008752 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008676:	d123      	bne.n	80086c0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10e      	bne.n	80086a4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	1c9a      	adds	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	629a      	str	r2, [r3, #40]	; 0x28
 80086a2:	e029      	b.n	80086f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	629a      	str	r2, [r3, #40]	; 0x28
 80086be:	e01b      	b.n	80086f8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6858      	ldr	r0, [r3, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	1c59      	adds	r1, r3, #1
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6291      	str	r1, [r2, #40]	; 0x28
 80086d8:	b2c2      	uxtb	r2, r0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e00c      	b.n	80086f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	1c58      	adds	r0, r3, #1
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	6288      	str	r0, [r1, #40]	; 0x28
 80086f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80086f4:	b2d2      	uxtb	r2, r2
 80086f6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29b      	uxth	r3, r3
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4619      	mov	r1, r3
 8008706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008708:	2b00      	cmp	r3, #0
 800870a:	d120      	bne.n	800874e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0220 	bic.w	r2, r2, #32
 800871a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800872a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7f9 f827 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e002      	b.n	8008754 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e000      	b.n	8008754 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008752:	2302      	movs	r3, #2
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	b0bd      	sub	sp, #244	; 0xf4
 8008762:	af00      	add	r7, sp, #0
 8008764:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008778:	68d9      	ldr	r1, [r3, #12]
 800877a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	ea40 0301 	orr.w	r3, r0, r1
 8008784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	431a      	orrs	r2, r3
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	431a      	orrs	r2, r3
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087b4:	f021 010c 	bic.w	r1, r1, #12
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c2:	430b      	orrs	r3, r1
 80087c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d6:	6999      	ldr	r1, [r3, #24]
 80087d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	ea40 0301 	orr.w	r3, r0, r1
 80087e2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ee:	f040 81a5 	bne.w	8008b3c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4bcd      	ldr	r3, [pc, #820]	; (8008b30 <UART_SetConfig+0x3d4>)
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d006      	beq.n	800880c <UART_SetConfig+0xb0>
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4bcb      	ldr	r3, [pc, #812]	; (8008b34 <UART_SetConfig+0x3d8>)
 8008806:	429a      	cmp	r2, r3
 8008808:	f040 80cb 	bne.w	80089a2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800880c:	f7fd ffa0 	bl	8006750 <HAL_RCC_GetPCLK2Freq>
 8008810:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008818:	461c      	mov	r4, r3
 800881a:	f04f 0500 	mov.w	r5, #0
 800881e:	4622      	mov	r2, r4
 8008820:	462b      	mov	r3, r5
 8008822:	1891      	adds	r1, r2, r2
 8008824:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008828:	415b      	adcs	r3, r3
 800882a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800882e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008832:	1912      	adds	r2, r2, r4
 8008834:	eb45 0303 	adc.w	r3, r5, r3
 8008838:	f04f 0000 	mov.w	r0, #0
 800883c:	f04f 0100 	mov.w	r1, #0
 8008840:	00d9      	lsls	r1, r3, #3
 8008842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008846:	00d0      	lsls	r0, r2, #3
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	1911      	adds	r1, r2, r4
 800884e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008852:	416b      	adcs	r3, r5
 8008854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	461a      	mov	r2, r3
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	1891      	adds	r1, r2, r2
 8008866:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800886a:	415b      	adcs	r3, r3
 800886c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008870:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008874:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008878:	f7f7 fcca 	bl	8000210 <__aeabi_uldivmod>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4bad      	ldr	r3, [pc, #692]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008882:	fba3 2302 	umull	r2, r3, r3, r2
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	011e      	lsls	r6, r3, #4
 800888a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800888e:	461c      	mov	r4, r3
 8008890:	f04f 0500 	mov.w	r5, #0
 8008894:	4622      	mov	r2, r4
 8008896:	462b      	mov	r3, r5
 8008898:	1891      	adds	r1, r2, r2
 800889a:	67b9      	str	r1, [r7, #120]	; 0x78
 800889c:	415b      	adcs	r3, r3
 800889e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80088a4:	1912      	adds	r2, r2, r4
 80088a6:	eb45 0303 	adc.w	r3, r5, r3
 80088aa:	f04f 0000 	mov.w	r0, #0
 80088ae:	f04f 0100 	mov.w	r1, #0
 80088b2:	00d9      	lsls	r1, r3, #3
 80088b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088b8:	00d0      	lsls	r0, r2, #3
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	1911      	adds	r1, r2, r4
 80088c0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80088c4:	416b      	adcs	r3, r5
 80088c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	461a      	mov	r2, r3
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	1891      	adds	r1, r2, r2
 80088d8:	6739      	str	r1, [r7, #112]	; 0x70
 80088da:	415b      	adcs	r3, r3
 80088dc:	677b      	str	r3, [r7, #116]	; 0x74
 80088de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80088e2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80088e6:	f7f7 fc93 	bl	8000210 <__aeabi_uldivmod>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4b92      	ldr	r3, [pc, #584]	; (8008b38 <UART_SetConfig+0x3dc>)
 80088f0:	fba3 1302 	umull	r1, r3, r3, r2
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	2164      	movs	r1, #100	; 0x64
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	3332      	adds	r3, #50	; 0x32
 8008902:	4a8d      	ldr	r2, [pc, #564]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008910:	441e      	add	r6, r3
 8008912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008916:	4618      	mov	r0, r3
 8008918:	f04f 0100 	mov.w	r1, #0
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	1894      	adds	r4, r2, r2
 8008922:	66bc      	str	r4, [r7, #104]	; 0x68
 8008924:	415b      	adcs	r3, r3
 8008926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008928:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800892c:	1812      	adds	r2, r2, r0
 800892e:	eb41 0303 	adc.w	r3, r1, r3
 8008932:	f04f 0400 	mov.w	r4, #0
 8008936:	f04f 0500 	mov.w	r5, #0
 800893a:	00dd      	lsls	r5, r3, #3
 800893c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008940:	00d4      	lsls	r4, r2, #3
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	1814      	adds	r4, r2, r0
 8008948:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800894c:	414b      	adcs	r3, r1
 800894e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	461a      	mov	r2, r3
 800895a:	f04f 0300 	mov.w	r3, #0
 800895e:	1891      	adds	r1, r2, r2
 8008960:	6639      	str	r1, [r7, #96]	; 0x60
 8008962:	415b      	adcs	r3, r3
 8008964:	667b      	str	r3, [r7, #100]	; 0x64
 8008966:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800896a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800896e:	f7f7 fc4f 	bl	8000210 <__aeabi_uldivmod>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4b70      	ldr	r3, [pc, #448]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008978:	fba3 1302 	umull	r1, r3, r3, r2
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	2164      	movs	r1, #100	; 0x64
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	3332      	adds	r3, #50	; 0x32
 800898a:	4a6b      	ldr	r2, [pc, #428]	; (8008b38 <UART_SetConfig+0x3dc>)
 800898c:	fba2 2303 	umull	r2, r3, r2, r3
 8008990:	095b      	lsrs	r3, r3, #5
 8008992:	f003 0207 	and.w	r2, r3, #7
 8008996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4432      	add	r2, r6
 800899e:	609a      	str	r2, [r3, #8]
 80089a0:	e26d      	b.n	8008e7e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089a2:	f7fd fec1 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 80089a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ae:	461c      	mov	r4, r3
 80089b0:	f04f 0500 	mov.w	r5, #0
 80089b4:	4622      	mov	r2, r4
 80089b6:	462b      	mov	r3, r5
 80089b8:	1891      	adds	r1, r2, r2
 80089ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80089bc:	415b      	adcs	r3, r3
 80089be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089c4:	1912      	adds	r2, r2, r4
 80089c6:	eb45 0303 	adc.w	r3, r5, r3
 80089ca:	f04f 0000 	mov.w	r0, #0
 80089ce:	f04f 0100 	mov.w	r1, #0
 80089d2:	00d9      	lsls	r1, r3, #3
 80089d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089d8:	00d0      	lsls	r0, r2, #3
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	1911      	adds	r1, r2, r4
 80089e0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80089e4:	416b      	adcs	r3, r5
 80089e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	461a      	mov	r2, r3
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	1891      	adds	r1, r2, r2
 80089f8:	6539      	str	r1, [r7, #80]	; 0x50
 80089fa:	415b      	adcs	r3, r3
 80089fc:	657b      	str	r3, [r7, #84]	; 0x54
 80089fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a02:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008a06:	f7f7 fc03 	bl	8000210 <__aeabi_uldivmod>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4b4a      	ldr	r3, [pc, #296]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008a10:	fba3 2302 	umull	r2, r3, r3, r2
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	011e      	lsls	r6, r3, #4
 8008a18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a1c:	461c      	mov	r4, r3
 8008a1e:	f04f 0500 	mov.w	r5, #0
 8008a22:	4622      	mov	r2, r4
 8008a24:	462b      	mov	r3, r5
 8008a26:	1891      	adds	r1, r2, r2
 8008a28:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a2a:	415b      	adcs	r3, r3
 8008a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a32:	1912      	adds	r2, r2, r4
 8008a34:	eb45 0303 	adc.w	r3, r5, r3
 8008a38:	f04f 0000 	mov.w	r0, #0
 8008a3c:	f04f 0100 	mov.w	r1, #0
 8008a40:	00d9      	lsls	r1, r3, #3
 8008a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a46:	00d0      	lsls	r0, r2, #3
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	1911      	adds	r1, r2, r4
 8008a4e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008a52:	416b      	adcs	r3, r5
 8008a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f04f 0300 	mov.w	r3, #0
 8008a64:	1891      	adds	r1, r2, r2
 8008a66:	6439      	str	r1, [r7, #64]	; 0x40
 8008a68:	415b      	adcs	r3, r3
 8008a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a70:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008a74:	f7f7 fbcc 	bl	8000210 <__aeabi_uldivmod>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4b2e      	ldr	r3, [pc, #184]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	2164      	movs	r1, #100	; 0x64
 8008a86:	fb01 f303 	mul.w	r3, r1, r3
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	3332      	adds	r3, #50	; 0x32
 8008a90:	4a29      	ldr	r2, [pc, #164]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a9e:	441e      	add	r6, r3
 8008aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f04f 0100 	mov.w	r1, #0
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	1894      	adds	r4, r2, r2
 8008ab0:	63bc      	str	r4, [r7, #56]	; 0x38
 8008ab2:	415b      	adcs	r3, r3
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008aba:	1812      	adds	r2, r2, r0
 8008abc:	eb41 0303 	adc.w	r3, r1, r3
 8008ac0:	f04f 0400 	mov.w	r4, #0
 8008ac4:	f04f 0500 	mov.w	r5, #0
 8008ac8:	00dd      	lsls	r5, r3, #3
 8008aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ace:	00d4      	lsls	r4, r2, #3
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	1814      	adds	r4, r2, r0
 8008ad6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008ada:	414b      	adcs	r3, r1
 8008adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	1891      	adds	r1, r2, r2
 8008aee:	6339      	str	r1, [r7, #48]	; 0x30
 8008af0:	415b      	adcs	r3, r3
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34
 8008af4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008af8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008afc:	f7f7 fb88 	bl	8000210 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008b06:	fba3 1302 	umull	r1, r3, r3, r2
 8008b0a:	095b      	lsrs	r3, r3, #5
 8008b0c:	2164      	movs	r1, #100	; 0x64
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	3332      	adds	r3, #50	; 0x32
 8008b18:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <UART_SetConfig+0x3dc>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	f003 0207 	and.w	r2, r3, #7
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4432      	add	r2, r6
 8008b2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008b2e:	e1a6      	b.n	8008e7e <UART_SetConfig+0x722>
 8008b30:	40011000 	.word	0x40011000
 8008b34:	40011400 	.word	0x40011400
 8008b38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4bd1      	ldr	r3, [pc, #836]	; (8008e88 <UART_SetConfig+0x72c>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d006      	beq.n	8008b56 <UART_SetConfig+0x3fa>
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4bcf      	ldr	r3, [pc, #828]	; (8008e8c <UART_SetConfig+0x730>)
 8008b50:	429a      	cmp	r2, r3
 8008b52:	f040 80ca 	bne.w	8008cea <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b56:	f7fd fdfb 	bl	8006750 <HAL_RCC_GetPCLK2Freq>
 8008b5a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b62:	461c      	mov	r4, r3
 8008b64:	f04f 0500 	mov.w	r5, #0
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	1891      	adds	r1, r2, r2
 8008b6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b70:	415b      	adcs	r3, r3
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b78:	1912      	adds	r2, r2, r4
 8008b7a:	eb45 0303 	adc.w	r3, r5, r3
 8008b7e:	f04f 0000 	mov.w	r0, #0
 8008b82:	f04f 0100 	mov.w	r1, #0
 8008b86:	00d9      	lsls	r1, r3, #3
 8008b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b8c:	00d0      	lsls	r0, r2, #3
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	eb12 0a04 	adds.w	sl, r2, r4
 8008b96:	eb43 0b05 	adc.w	fp, r3, r5
 8008b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f04f 0100 	mov.w	r1, #0
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	008b      	lsls	r3, r1, #2
 8008bb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bb4:	0082      	lsls	r2, r0, #2
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4659      	mov	r1, fp
 8008bba:	f7f7 fb29 	bl	8000210 <__aeabi_uldivmod>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4bb3      	ldr	r3, [pc, #716]	; (8008e90 <UART_SetConfig+0x734>)
 8008bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	011e      	lsls	r6, r3, #4
 8008bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f04f 0100 	mov.w	r1, #0
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	1894      	adds	r4, r2, r2
 8008bdc:	623c      	str	r4, [r7, #32]
 8008bde:	415b      	adcs	r3, r3
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
 8008be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008be6:	1812      	adds	r2, r2, r0
 8008be8:	eb41 0303 	adc.w	r3, r1, r3
 8008bec:	f04f 0400 	mov.w	r4, #0
 8008bf0:	f04f 0500 	mov.w	r5, #0
 8008bf4:	00dd      	lsls	r5, r3, #3
 8008bf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bfa:	00d4      	lsls	r4, r2, #3
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	462b      	mov	r3, r5
 8008c00:	1814      	adds	r4, r2, r0
 8008c02:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008c06:	414b      	adcs	r3, r1
 8008c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f04f 0100 	mov.w	r1, #0
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	008b      	lsls	r3, r1, #2
 8008c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c26:	0082      	lsls	r2, r0, #2
 8008c28:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008c2c:	f7f7 faf0 	bl	8000210 <__aeabi_uldivmod>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4b96      	ldr	r3, [pc, #600]	; (8008e90 <UART_SetConfig+0x734>)
 8008c36:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	2164      	movs	r1, #100	; 0x64
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	3332      	adds	r3, #50	; 0x32
 8008c48:	4a91      	ldr	r2, [pc, #580]	; (8008e90 <UART_SetConfig+0x734>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c54:	441e      	add	r6, r3
 8008c56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f04f 0100 	mov.w	r1, #0
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	1894      	adds	r4, r2, r2
 8008c66:	61bc      	str	r4, [r7, #24]
 8008c68:	415b      	adcs	r3, r3
 8008c6a:	61fb      	str	r3, [r7, #28]
 8008c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c70:	1812      	adds	r2, r2, r0
 8008c72:	eb41 0303 	adc.w	r3, r1, r3
 8008c76:	f04f 0400 	mov.w	r4, #0
 8008c7a:	f04f 0500 	mov.w	r5, #0
 8008c7e:	00dd      	lsls	r5, r3, #3
 8008c80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c84:	00d4      	lsls	r4, r2, #3
 8008c86:	4622      	mov	r2, r4
 8008c88:	462b      	mov	r3, r5
 8008c8a:	1814      	adds	r4, r2, r0
 8008c8c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008c90:	414b      	adcs	r3, r1
 8008c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f04f 0100 	mov.w	r1, #0
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	008b      	lsls	r3, r1, #2
 8008cac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cb0:	0082      	lsls	r2, r0, #2
 8008cb2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008cb6:	f7f7 faab 	bl	8000210 <__aeabi_uldivmod>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4b74      	ldr	r3, [pc, #464]	; (8008e90 <UART_SetConfig+0x734>)
 8008cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc4:	095b      	lsrs	r3, r3, #5
 8008cc6:	2164      	movs	r1, #100	; 0x64
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	3332      	adds	r3, #50	; 0x32
 8008cd2:	4a6f      	ldr	r2, [pc, #444]	; (8008e90 <UART_SetConfig+0x734>)
 8008cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	f003 020f 	and.w	r2, r3, #15
 8008cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4432      	add	r2, r6
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	e0c9      	b.n	8008e7e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cea:	f7fd fd1d 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8008cee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	f04f 0500 	mov.w	r5, #0
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	1891      	adds	r1, r2, r2
 8008d02:	6139      	str	r1, [r7, #16]
 8008d04:	415b      	adcs	r3, r3
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d0c:	1912      	adds	r2, r2, r4
 8008d0e:	eb45 0303 	adc.w	r3, r5, r3
 8008d12:	f04f 0000 	mov.w	r0, #0
 8008d16:	f04f 0100 	mov.w	r1, #0
 8008d1a:	00d9      	lsls	r1, r3, #3
 8008d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d20:	00d0      	lsls	r0, r2, #3
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	eb12 0804 	adds.w	r8, r2, r4
 8008d2a:	eb43 0905 	adc.w	r9, r3, r5
 8008d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f04f 0100 	mov.w	r1, #0
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	008b      	lsls	r3, r1, #2
 8008d44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d48:	0082      	lsls	r2, r0, #2
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fa5f 	bl	8000210 <__aeabi_uldivmod>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4b4e      	ldr	r3, [pc, #312]	; (8008e90 <UART_SetConfig+0x734>)
 8008d58:	fba3 2302 	umull	r2, r3, r3, r2
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	011e      	lsls	r6, r3, #4
 8008d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d64:	4618      	mov	r0, r3
 8008d66:	f04f 0100 	mov.w	r1, #0
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	1894      	adds	r4, r2, r2
 8008d70:	60bc      	str	r4, [r7, #8]
 8008d72:	415b      	adcs	r3, r3
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d7a:	1812      	adds	r2, r2, r0
 8008d7c:	eb41 0303 	adc.w	r3, r1, r3
 8008d80:	f04f 0400 	mov.w	r4, #0
 8008d84:	f04f 0500 	mov.w	r5, #0
 8008d88:	00dd      	lsls	r5, r3, #3
 8008d8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d8e:	00d4      	lsls	r4, r2, #3
 8008d90:	4622      	mov	r2, r4
 8008d92:	462b      	mov	r3, r5
 8008d94:	1814      	adds	r4, r2, r0
 8008d96:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008d9a:	414b      	adcs	r3, r1
 8008d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	008b      	lsls	r3, r1, #2
 8008db6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dba:	0082      	lsls	r2, r0, #2
 8008dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008dc0:	f7f7 fa26 	bl	8000210 <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4b31      	ldr	r3, [pc, #196]	; (8008e90 <UART_SetConfig+0x734>)
 8008dca:	fba3 1302 	umull	r1, r3, r3, r2
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	2164      	movs	r1, #100	; 0x64
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	3332      	adds	r3, #50	; 0x32
 8008ddc:	4a2c      	ldr	r2, [pc, #176]	; (8008e90 <UART_SetConfig+0x734>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de8:	441e      	add	r6, r3
 8008dea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dee:	4618      	mov	r0, r3
 8008df0:	f04f 0100 	mov.w	r1, #0
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	1894      	adds	r4, r2, r2
 8008dfa:	603c      	str	r4, [r7, #0]
 8008dfc:	415b      	adcs	r3, r3
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e04:	1812      	adds	r2, r2, r0
 8008e06:	eb41 0303 	adc.w	r3, r1, r3
 8008e0a:	f04f 0400 	mov.w	r4, #0
 8008e0e:	f04f 0500 	mov.w	r5, #0
 8008e12:	00dd      	lsls	r5, r3, #3
 8008e14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e18:	00d4      	lsls	r4, r2, #3
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	1814      	adds	r4, r2, r0
 8008e20:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008e24:	414b      	adcs	r3, r1
 8008e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f04f 0100 	mov.w	r1, #0
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	008b      	lsls	r3, r1, #2
 8008e40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e44:	0082      	lsls	r2, r0, #2
 8008e46:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e4a:	f7f7 f9e1 	bl	8000210 <__aeabi_uldivmod>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <UART_SetConfig+0x734>)
 8008e54:	fba3 1302 	umull	r1, r3, r3, r2
 8008e58:	095b      	lsrs	r3, r3, #5
 8008e5a:	2164      	movs	r1, #100	; 0x64
 8008e5c:	fb01 f303 	mul.w	r3, r1, r3
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	3332      	adds	r3, #50	; 0x32
 8008e66:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <UART_SetConfig+0x734>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	095b      	lsrs	r3, r3, #5
 8008e6e:	f003 020f 	and.w	r2, r3, #15
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4432      	add	r2, r6
 8008e7a:	609a      	str	r2, [r3, #8]
}
 8008e7c:	e7ff      	b.n	8008e7e <UART_SetConfig+0x722>
 8008e7e:	bf00      	nop
 8008e80:	37f4      	adds	r7, #244	; 0xf4
 8008e82:	46bd      	mov	sp, r7
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	40011000 	.word	0x40011000
 8008e8c:	40011400 	.word	0x40011400
 8008e90:	51eb851f 	.word	0x51eb851f

08008e94 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b090      	sub	sp, #64	; 0x40
 8008e98:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008e9a:	f107 0308 	add.w	r3, r7, #8
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f988 	bl	80091b4 <get_default_command>
	with_data(&cmd, 1);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f9b8 	bl	8009220 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008eb0:	f107 0308 	add.w	r3, r7, #8
 8008eb4:	2170      	movs	r1, #112	; 0x70
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f9c4 	bl	8009244 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8008ebc:	1dfb      	adds	r3, r7, #7
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fa28 	bl	8009314 <qspi_receive>

	}

	return flags;
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3740      	adds	r7, #64	; 0x40
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 8008ece:	b5b0      	push	{r4, r5, r7, lr}
 8008ed0:	b09c      	sub	sp, #112	; 0x70
 8008ed2:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f96b 	bl	80091b4 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 8008ede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ee2:	2106      	movs	r1, #6
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f9ad 	bl	8009244 <qspi_run>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d022      	beq.n	8008f36 <__write_enable_latch+0x68>
		cmd = get_default_command();
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f95e 	bl	80091b4 <get_default_command>
 8008ef8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008efc:	463d      	mov	r5, r7
 8008efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008f0e:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8008f12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f16:	2101      	movs	r1, #1
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f981 	bl	8009220 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 8008f1e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008f22:	2301      	movs	r3, #1
 8008f24:	2201      	movs	r2, #1
 8008f26:	2105      	movs	r1, #5
 8008f28:	f000 f9a8 	bl	800927c <qspi_poll>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <__write_enable_latch+0x68>
			return true;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e000      	b.n	8008f38 <__write_enable_latch+0x6a>
		}
	}

	return false;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3770      	adds	r7, #112	; 0x70
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bdb0      	pop	{r4, r5, r7, pc}

08008f40 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	; 0x38
 8008f44:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008f46:	463b      	mov	r3, r7
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f933 	bl	80091b4 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 8008f4e:	463b      	mov	r3, r7
 8008f50:	2106      	movs	r1, #6
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f976 	bl	8009244 <qspi_run>
 8008f58:	4603      	mov	r3, r0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3738      	adds	r7, #56	; 0x38
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b090      	sub	sp, #64	; 0x40
 8008f66:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8008f68:	231b      	movs	r3, #27
 8008f6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f91f 	bl	80091b4 <get_default_command>
	with_data(&cmd, 1);
 8008f76:	1d3b      	adds	r3, r7, #4
 8008f78:	2101      	movs	r1, #1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f950 	bl	8009220 <with_data>

	__write_enable_latch();
 8008f80:	f7ff ffa5 	bl	8008ece <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8008f84:	1d3b      	adds	r3, r7, #4
 8008f86:	2181      	movs	r1, #129	; 0x81
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 f95b 	bl	8009244 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 8008f8e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f9a8 	bl	80092e8 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008f98:	1d38      	adds	r0, r7, #4
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	2170      	movs	r1, #112	; 0x70
 8008fa0:	f000 f96c 	bl	800927c <qspi_poll>

	}
}
 8008fa4:	bf00      	nop
 8008fa6:	3740      	adds	r7, #64	; 0x40
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008fb8:	bf00      	nop
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <flash_read+0x58>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f9      	bne.n	8008fba <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8008fc6:	4b0f      	ldr	r3, [pc, #60]	; (8009004 <flash_read+0x58>)
 8008fc8:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <flash_read+0x5c>)
 8008fca:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008fcc:	bf00      	nop
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <flash_read+0x58>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f9      	bne.n	8008fce <flash_read+0x22>
	QUADSPI->AR = address;
 8008fda:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <flash_read+0x58>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008fe0:	bf00      	nop
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <flash_read+0x58>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f9      	bne.n	8008fe2 <flash_read+0x36>
	QUADSPI->DLR = length;
 8008fee:	4a05      	ldr	r2, [pc, #20]	; (8009004 <flash_read+0x58>)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 8008ff4:	68b8      	ldr	r0, [r7, #8]
 8008ff6:	f000 f98d 	bl	8009314 <qspi_receive>

	}
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	a0001000 	.word	0xa0001000
 8009008:	0104250b 	.word	0x0104250b

0800900c <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 800900c:	b5b0      	push	{r4, r5, r7, lr}
 800900e:	b0a2      	sub	sp, #136	; 0x88
 8009010:	af00      	add	r7, sp, #0
 8009012:	6478      	str	r0, [r7, #68]	; 0x44
 8009014:	6439      	str	r1, [r7, #64]	; 0x40
 8009016:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 8009018:	f7ff ff59 	bl	8008ece <__write_enable_latch>

	Command cmd = get_default_command();
 800901c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f8c7 	bl	80091b4 <get_default_command>

	with_address(&cmd, address);
 8009026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800902a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f8e1 	bl	80091f4 <with_address>
	with_data(&cmd, length);
 8009032:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f8f1 	bl	8009220 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 800903e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009042:	2102      	movs	r1, #2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f8fd 	bl	8009244 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 800904a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800904c:	f000 f94c 	bl	80092e8 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 8009050:	463b      	mov	r3, r7
 8009052:	4618      	mov	r0, r3
 8009054:	f000 f8ae 	bl	80091b4 <get_default_command>
 8009058:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800905c:	463d      	mov	r5, r7
 800905e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800906a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800906e:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009076:	2101      	movs	r1, #1
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f8d1 	bl	8009220 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800907e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8009082:	2301      	movs	r3, #1
 8009084:	2207      	movs	r2, #7
 8009086:	2170      	movs	r1, #112	; 0x70
 8009088:	f000 f8f8 	bl	800927c <qspi_poll>

	}

	uint8_t flags = __read_flags();
 800908c:	f7ff ff02 	bl	8008e94 <__read_flags>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8009096:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 80090a2:	f7ff ff4d 	bl	8008f40 <__write_disable_latch>


	}
}
 80090a6:	bf00      	nop
 80090a8:	3788      	adds	r7, #136	; 0x88
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bdb0      	pop	{r4, r5, r7, pc}

080090ae <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 80090c0:	e016      	b.n	80090f0 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80090c8:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff ff9c 	bl	800900c <__flash_write_page>
		buffer += write_length;
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]
		address += write_length;
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4413      	add	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4413      	add	r3, r2
 80090f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fa:	d8e2      	bhi.n	80090c2 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7ff ff83 	bl	800900c <__flash_write_page>
}
 8009106:	bf00      	nop
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 800910e:	b5b0      	push	{r4, r5, r7, lr}
 8009110:	b0a0      	sub	sp, #128	; 0x80
 8009112:	af00      	add	r7, sp, #0
 8009114:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009116:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 8009118:	f7ff fed9 	bl	8008ece <__write_enable_latch>


	Command cmd = get_default_command();
 800911c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f847 	bl	80091b4 <get_default_command>
	with_address(&cmd, address);
 8009126:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800912a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f861 	bl	80091f4 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 8009132:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f883 	bl	8009244 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 800913e:	463b      	mov	r3, r7
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f837 	bl	80091b4 <get_default_command>
 8009146:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800914a:	463d      	mov	r5, r7
 800914c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800914e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009158:	e895 0003 	ldmia.w	r5, {r0, r1}
 800915c:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009164:	2101      	movs	r1, #1
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f85a 	bl	8009220 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800916c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009170:	2301      	movs	r3, #1
 8009172:	2207      	movs	r2, #7
 8009174:	2170      	movs	r1, #112	; 0x70
 8009176:	f000 f881 	bl	800927c <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 800917a:	f7ff fe8b 	bl	8008e94 <__read_flags>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8009184:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009188:	f003 0320 	and.w	r3, r3, #32
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8009190:	f7ff fed6 	bl	8008f40 <__write_disable_latch>


	}
}
 8009194:	bf00      	nop
 8009196:	3780      	adds	r7, #128	; 0x80
 8009198:	46bd      	mov	sp, r7
 800919a:	bdb0      	pop	{r4, r5, r7, pc}

0800919c <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	2020      	movs	r0, #32
 80091a8:	f7ff ffb1 	bl	800910e <__flash_erase>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 80091b4:	b5b0      	push	{r4, r5, r7, lr}
 80091b6:	b090      	sub	sp, #64	; 0x40
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	Command command = {
 80091bc:	f107 0308 	add.w	r3, r7, #8
 80091c0:	2238      	movs	r2, #56	; 0x38
 80091c2:	2100      	movs	r1, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f002 f931 	bl	800b42c <memset>
 80091ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ce:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	461d      	mov	r5, r3
 80091d4:	f107 0408 	add.w	r4, r7, #8
 80091d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80091e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	3740      	adds	r7, #64	; 0x40
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bdb0      	pop	{r4, r5, r7, pc}

080091f4 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009204:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800920c:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009230:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800925a:	4619      	mov	r1, r3
 800925c:	4806      	ldr	r0, [pc, #24]	; (8009278 <qspi_run+0x34>)
 800925e:	f7fc fc4b 	bl	8005af8 <HAL_QSPI_Command>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bf0c      	ite	eq
 8009268:	2301      	moveq	r3, #1
 800926a:	2300      	movne	r3, #0
 800926c:	b2db      	uxtb	r3, r3
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20008640 	.word	0x20008640

0800927c <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4611      	mov	r1, r2
 8009288:	461a      	mov	r2, r3
 800928a:	460b      	mov	r3, r1
 800928c:	71fb      	strb	r3, [r7, #7]
 800928e:	4613      	mov	r3, r2
 8009290:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8009292:	2300      	movs	r3, #0
 8009294:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8009296:	2301      	movs	r3, #1
 8009298:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 800929a:	2310      	movs	r3, #16
 800929c:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800929e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 80092a4:	79ba      	ldrb	r2, [r7, #6]
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2201      	movs	r2, #1
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	f107 0210 	add.w	r2, r7, #16
 80092c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <qspi_poll+0x68>)
 80092ca:	f7fc fdac 	bl	8005e26 <HAL_QSPI_AutoPolling>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bf0c      	ite	eq
 80092d4:	2301      	moveq	r3, #1
 80092d6:	2300      	movne	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3728      	adds	r7, #40	; 0x28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20008640 	.word	0x20008640

080092e8 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 80092f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4806      	ldr	r0, [pc, #24]	; (8009310 <qspi_transmit+0x28>)
 80092f8:	f7fc fc5c 	bl	8005bb4 <HAL_QSPI_Transmit>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf0c      	ite	eq
 8009302:	2301      	moveq	r3, #1
 8009304:	2300      	movne	r3, #0
 8009306:	b2db      	uxtb	r3, r3
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20008640 	.word	0x20008640

08009314 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 800931c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4806      	ldr	r0, [pc, #24]	; (800933c <qspi_receive+0x28>)
 8009324:	f7fc fcdd 	bl	8005ce2 <HAL_QSPI_Receive>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	bf0c      	ite	eq
 800932e:	2301      	moveq	r3, #1
 8009330:	2300      	movne	r3, #0
 8009332:	b2db      	uxtb	r3, r3
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20008640 	.word	0x20008640

08009340 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800934e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009352:	2b84      	cmp	r3, #132	; 0x84
 8009354:	d005      	beq.n	8009362 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009356:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	3303      	adds	r3, #3
 8009360:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009362:	68fb      	ldr	r3, [r7, #12]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009374:	f000 ffb6 	bl	800a2e4 <vTaskStartScheduler>
  
  return osOK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	bd80      	pop	{r7, pc}

0800937e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800937e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009380:	b089      	sub	sp, #36	; 0x24
 8009382:	af04      	add	r7, sp, #16
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685c      	ldr	r4, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681d      	ldr	r5, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691e      	ldr	r6, [r3, #16]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff ffd0 	bl	8009340 <makeFreeRtosPriority>
 80093a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093aa:	9202      	str	r2, [sp, #8]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	9100      	str	r1, [sp, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	4632      	mov	r2, r6
 80093b4:	4629      	mov	r1, r5
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fd98 	bl	8009eec <xTaskCreateStatic>
 80093bc:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <osDelay+0x16>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	e000      	b.n	80093e0 <osDelay+0x18>
 80093de:	2301      	movs	r3, #1
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 ff4b 	bl	800a27c <vTaskDelay>
  
  return osOK;
 80093e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f103 0208 	add.w	r2, r3, #8
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f103 0208 	add.w	r2, r3, #8
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f103 0208 	add.w	r2, r3, #8
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a8:	d103      	bne.n	80094b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e00c      	b.n	80094cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3308      	adds	r3, #8
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	e002      	b.n	80094c0 <vListInsert+0x2e>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d2f6      	bcs.n	80094ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]
}
 80094f8:	bf00      	nop
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6892      	ldr	r2, [r2, #8]
 800951a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6852      	ldr	r2, [r2, #4]
 8009524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	d103      	bne.n	8009538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1e5a      	subs	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009582:	f001 fdff 	bl	800b184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009592:	fb01 f303 	mul.w	r3, r1, r3
 8009596:	441a      	add	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	3b01      	subs	r3, #1
 80095b4:	68f9      	ldr	r1, [r7, #12]
 80095b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	441a      	add	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	22ff      	movs	r2, #255	; 0xff
 80095c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	22ff      	movs	r2, #255	; 0xff
 80095ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d114      	bne.n	8009602 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01a      	beq.n	8009616 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3310      	adds	r3, #16
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 f8cf 	bl	800a788 <xTaskRemoveFromEventList>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d012      	beq.n	8009616 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095f0:	4b0c      	ldr	r3, [pc, #48]	; (8009624 <xQueueGenericReset+0xcc>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	e009      	b.n	8009616 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3310      	adds	r3, #16
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fef2 	bl	80093f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3324      	adds	r3, #36	; 0x24
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff feed 	bl	80093f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009616:	f001 fde5 	bl	800b1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800961a:	2301      	movs	r3, #1
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	e000ed04 	.word	0xe000ed04

08009628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	; 0x38
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <xQueueGenericCreateStatic+0x52>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <xQueueGenericCreateStatic+0x56>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <xQueueGenericCreateStatic+0x58>
 800967e:	2300      	movs	r3, #0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xQueueGenericCreateStatic+0x7e>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <xQueueGenericCreateStatic+0x82>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <xQueueGenericCreateStatic+0x84>
 80096aa:	2300      	movs	r3, #0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	61fb      	str	r3, [r7, #28]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096c6:	2348      	movs	r3, #72	; 0x48
 80096c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b48      	cmp	r3, #72	; 0x48
 80096ce:	d00a      	beq.n	80096e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	61bb      	str	r3, [r7, #24]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d009      	beq.n	8009706 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4613      	mov	r3, r2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f805 	bl	8009710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009708:	4618      	mov	r0, r3
 800970a:	3730      	adds	r7, #48	; 0x30
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e002      	b.n	8009732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800973e:	2101      	movs	r1, #1
 8009740:	69b8      	ldr	r0, [r7, #24]
 8009742:	f7ff ff09 	bl	8009558 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009746:	bf00      	nop
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00e      	beq.n	800977a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800976e:	2300      	movs	r3, #0
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f81f 	bl	80097b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af02      	add	r7, sp, #8
 8009788:	4603      	mov	r3, r0
 800978a:	6039      	str	r1, [r7, #0]
 800978c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800978e:	2301      	movs	r3, #1
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	2300      	movs	r3, #0
 8009794:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	6939      	ldr	r1, [r7, #16]
 80097a0:	6978      	ldr	r0, [r7, #20]
 80097a2:	f7ff ff41 	bl	8009628 <xQueueGenericCreateStatic>
 80097a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff ffd0 	bl	800974e <prvInitialiseMutex>

		return xNewQueue;
 80097ae:	68fb      	ldr	r3, [r7, #12]
	}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	; 0x38
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097c6:	2300      	movs	r3, #0
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xQueueGenericSend+0x32>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d103      	bne.n	80097f8 <xQueueGenericSend+0x40>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <xQueueGenericSend+0x44>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <xQueueGenericSend+0x46>
 80097fc:	2300      	movs	r3, #0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xQueueGenericSend+0x60>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d103      	bne.n	8009826 <xQueueGenericSend+0x6e>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <xQueueGenericSend+0x72>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueGenericSend+0x74>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueGenericSend+0x8e>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	623b      	str	r3, [r7, #32]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009846:	f001 f935 	bl	800aab4 <xTaskGetSchedulerState>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <xQueueGenericSend+0x9e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <xQueueGenericSend+0xa2>
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <xQueueGenericSend+0xa4>
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xQueueGenericSend+0xbe>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	61fb      	str	r3, [r7, #28]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009876:	f001 fc85 	bl	800b184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	429a      	cmp	r2, r3
 8009884:	d302      	bcc.n	800988c <xQueueGenericSend+0xd4>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d129      	bne.n	80098e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009892:	f000 fa41 	bl	8009d18 <prvCopyDataToQueue>
 8009896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	d010      	beq.n	80098c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	3324      	adds	r3, #36	; 0x24
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 ff6f 	bl	800a788 <xTaskRemoveFromEventList>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d013      	beq.n	80098d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098b0:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <xQueueGenericSend+0x1f8>)
 80098b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	e00a      	b.n	80098d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098c8:	4b39      	ldr	r3, [pc, #228]	; (80099b0 <xQueueGenericSend+0x1f8>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098d8:	f001 fc84 	bl	800b1e4 <vPortExitCritical>
				return pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	e063      	b.n	80099a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098e6:	f001 fc7d 	bl	800b1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e05c      	b.n	80099a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 ffa7 	bl	800a84c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009902:	f001 fc6f 	bl	800b1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009906:	f000 fd4d 	bl	800a3a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800990a:	f001 fc3b 	bl	800b184 <vPortEnterCritical>
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009914:	b25b      	sxtb	r3, r3
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991a:	d103      	bne.n	8009924 <xQueueGenericSend+0x16c>
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800992a:	b25b      	sxtb	r3, r3
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d103      	bne.n	800993a <xQueueGenericSend+0x182>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800993a:	f001 fc53 	bl	800b1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800993e:	1d3a      	adds	r2, r7, #4
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f000 ff96 	bl	800a878 <xTaskCheckForTimeOut>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d124      	bne.n	800999c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009954:	f000 fab2 	bl	8009ebc <prvIsQueueFull>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d018      	beq.n	8009990 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	3310      	adds	r3, #16
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f000 feea 	bl	800a740 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800996c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800996e:	f000 fa3d 	bl	8009dec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009972:	f000 fd25 	bl	800a3c0 <xTaskResumeAll>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f af7c 	bne.w	8009876 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <xQueueGenericSend+0x1f8>)
 8009980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	e772      	b.n	8009876 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009992:	f000 fa2b 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009996:	f000 fd13 	bl	800a3c0 <xTaskResumeAll>
 800999a:	e76c      	b.n	8009876 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800999c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800999e:	f000 fa25 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099a2:	f000 fd0d 	bl	800a3c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3738      	adds	r7, #56	; 0x38
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08e      	sub	sp, #56	; 0x38
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGiveFromISR+0x2a>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	623b      	str	r3, [r7, #32]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <xQueueGiveFromISR+0x48>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	61fb      	str	r3, [r7, #28]
}
 80099f8:	bf00      	nop
 80099fa:	e7fe      	b.n	80099fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <xQueueGiveFromISR+0x58>
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <xQueueGiveFromISR+0x5c>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <xQueueGiveFromISR+0x5e>
 8009a10:	2300      	movs	r3, #0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	61bb      	str	r3, [r7, #24]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a2c:	f001 fc8c 	bl	800b348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a30:	f3ef 8211 	mrs	r2, BASEPRI
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	617a      	str	r2, [r7, #20]
 8009a46:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a48:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d22b      	bcs.n	8009ab4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a76:	d112      	bne.n	8009a9e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d016      	beq.n	8009aae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	3324      	adds	r3, #36	; 0x24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fe7f 	bl	800a788 <xTaskRemoveFromEventList>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00e      	beq.n	8009aae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00b      	beq.n	8009aae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	e007      	b.n	8009aae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	b25a      	sxtb	r2, r3
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab2:	e001      	b.n	8009ab8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ac2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3738      	adds	r7, #56	; 0x38
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08e      	sub	sp, #56	; 0x38
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	623b      	str	r3, [r7, #32]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	61fb      	str	r3, [r7, #28]
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b20:	f000 ffc8 	bl	800aab4 <xTaskGetSchedulerState>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <xQueueSemaphoreTake+0x60>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <xQueueSemaphoreTake+0x64>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <xQueueSemaphoreTake+0x66>
 8009b34:	2300      	movs	r3, #0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	61bb      	str	r3, [r7, #24]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b50:	f001 fb18 	bl	800b184 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d024      	beq.n	8009baa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b70:	f001 f95e 	bl	800ae30 <pvTaskIncrementMutexHeldCount>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00f      	beq.n	8009ba2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	3310      	adds	r3, #16
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fdfe 	bl	800a788 <xTaskRemoveFromEventList>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b92:	4b54      	ldr	r3, [pc, #336]	; (8009ce4 <xQueueSemaphoreTake+0x214>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ba2:	f001 fb1f 	bl	800b1e4 <vPortExitCritical>
				return pdPASS;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e097      	b.n	8009cda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d111      	bne.n	8009bd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	617b      	str	r3, [r7, #20]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009bcc:	f001 fb0a 	bl	800b1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e082      	b.n	8009cda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bda:	f107 030c 	add.w	r3, r7, #12
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fe34 	bl	800a84c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009be4:	2301      	movs	r3, #1
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009be8:	f001 fafc 	bl	800b1e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bec:	f000 fbda 	bl	800a3a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bf0:	f001 fac8 	bl	800b184 <vPortEnterCritical>
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bfa:	b25b      	sxtb	r3, r3
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c00:	d103      	bne.n	8009c0a <xQueueSemaphoreTake+0x13a>
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c10:	b25b      	sxtb	r3, r3
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c16:	d103      	bne.n	8009c20 <xQueueSemaphoreTake+0x150>
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c20:	f001 fae0 	bl	800b1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c24:	463a      	mov	r2, r7
 8009c26:	f107 030c 	add.w	r3, r7, #12
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fe23 	bl	800a878 <xTaskCheckForTimeOut>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d132      	bne.n	8009c9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c3a:	f000 f929 	bl	8009e90 <prvIsQueueEmpty>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d026      	beq.n	8009c92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009c4c:	f001 fa9a 	bl	800b184 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 ff4b 	bl	800aaf0 <xTaskPriorityInherit>
 8009c5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009c5c:	f001 fac2 	bl	800b1e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fd69 	bl	800a740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c70:	f000 f8bc 	bl	8009dec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c74:	f000 fba4 	bl	800a3c0 <xTaskResumeAll>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f47f af68 	bne.w	8009b50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c80:	4b18      	ldr	r3, [pc, #96]	; (8009ce4 <xQueueSemaphoreTake+0x214>)
 8009c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	e75e      	b.n	8009b50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c94:	f000 f8aa 	bl	8009dec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c98:	f000 fb92 	bl	800a3c0 <xTaskResumeAll>
 8009c9c:	e758      	b.n	8009b50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ca0:	f000 f8a4 	bl	8009dec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ca4:	f000 fb8c 	bl	800a3c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009caa:	f000 f8f1 	bl	8009e90 <prvIsQueueEmpty>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f43f af4d 	beq.w	8009b50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00d      	beq.n	8009cd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009cbc:	f001 fa62 	bl	800b184 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cc2:	f000 f811 	bl	8009ce8 <prvGetDisinheritPriorityAfterTimeout>
 8009cc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f001 f814 	bl	800acfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009cd4:	f001 fa86 	bl	800b1e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3738      	adds	r7, #56	; 0x38
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d006      	beq.n	8009d06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f1c3 0307 	rsb	r3, r3, #7
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e001      	b.n	8009d0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10d      	bne.n	8009d52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d14d      	bne.n	8009dda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 ff54 	bl	800abf0 <xTaskPriorityDisinherit>
 8009d48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	609a      	str	r2, [r3, #8]
 8009d50:	e043      	b.n	8009dda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d119      	bne.n	8009d8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6858      	ldr	r0, [r3, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d60:	461a      	mov	r2, r3
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	f001 fb54 	bl	800b410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	441a      	add	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d32b      	bcc.n	8009dda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	605a      	str	r2, [r3, #4]
 8009d8a:	e026      	b.n	8009dda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68d8      	ldr	r0, [r3, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	461a      	mov	r2, r3
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	f001 fb3a 	bl	800b410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	425b      	negs	r3, r3
 8009da6:	441a      	add	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d207      	bcs.n	8009dc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	425b      	negs	r3, r3
 8009dc2:	441a      	add	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d105      	bne.n	8009dda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009de2:	697b      	ldr	r3, [r7, #20]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df4:	f001 f9c6 	bl	800b184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e00:	e011      	b.n	8009e26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d012      	beq.n	8009e30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3324      	adds	r3, #36	; 0x24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fcba 	bl	800a788 <xTaskRemoveFromEventList>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1a:	f000 fd8f 	bl	800a93c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dce9      	bgt.n	8009e02 <prvUnlockQueue+0x16>
 8009e2e:	e000      	b.n	8009e32 <prvUnlockQueue+0x46>
					break;
 8009e30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e3a:	f001 f9d3 	bl	800b1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e3e:	f001 f9a1 	bl	800b184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4a:	e011      	b.n	8009e70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3310      	adds	r3, #16
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fc95 	bl	800a788 <xTaskRemoveFromEventList>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e64:	f000 fd6a 	bl	800a93c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dce9      	bgt.n	8009e4c <prvUnlockQueue+0x60>
 8009e78:	e000      	b.n	8009e7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	22ff      	movs	r2, #255	; 0xff
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e84:	f001 f9ae 	bl	800b1e4 <vPortExitCritical>
}
 8009e88:	bf00      	nop
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e98:	f001 f974 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e001      	b.n	8009eae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eae:	f001 f999 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec4:	f001 f95e 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d102      	bne.n	8009eda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e001      	b.n	8009ede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ede:	f001 f981 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08e      	sub	sp, #56	; 0x38
 8009ef0:	af04      	add	r7, sp, #16
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	623b      	str	r3, [r7, #32]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61fb      	str	r3, [r7, #28]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f32:	2354      	movs	r3, #84	; 0x54
 8009f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b54      	cmp	r3, #84	; 0x54
 8009f3a:	d00a      	beq.n	8009f52 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d01a      	beq.n	8009f90 <xTaskCreateStatic+0xa4>
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d017      	beq.n	8009f90 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f68:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	9302      	str	r3, [sp, #8]
 8009f72:	f107 0314 	add.w	r3, r7, #20
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f80b 	bl	8009f9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f8a:	f000 f88f 	bl	800a0ac <prvAddNewTaskToReadyList>
 8009f8e:	e001      	b.n	8009f94 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f94:	697b      	ldr	r3, [r7, #20]
	}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3728      	adds	r7, #40	; 0x28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	617b      	str	r3, [r7, #20]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01f      	beq.n	800a02c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e012      	b.n	800a018 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	7819      	ldrb	r1, [r3, #0]
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	4413      	add	r3, r2
 800a000:	3334      	adds	r3, #52	; 0x34
 800a002:	460a      	mov	r2, r1
 800a004:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d006      	beq.n	800a020 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	3301      	adds	r3, #1
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b0f      	cmp	r3, #15
 800a01c:	d9e9      	bls.n	8009ff2 <prvInitialiseNewTask+0x54>
 800a01e:	e000      	b.n	800a022 <prvInitialiseNewTask+0x84>
			{
				break;
 800a020:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a02a:	e003      	b.n	800a034 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b06      	cmp	r3, #6
 800a038:	d901      	bls.n	800a03e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a03a:	2306      	movs	r3, #6
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a042:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a048:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	2200      	movs	r2, #0
 800a04e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	3304      	adds	r3, #4
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff f9eb 	bl	8009430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	3318      	adds	r3, #24
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff f9e6 	bl	8009430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a068:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	f1c3 0207 	rsb	r2, r3, #7
 800a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a072:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a078:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	2200      	movs	r2, #0
 800a07e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	69b8      	ldr	r0, [r7, #24]
 800a08e:	f000 ff49 	bl	800af24 <pxPortInitialiseStack>
 800a092:	4602      	mov	r2, r0
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0a4:	bf00      	nop
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0b4:	f001 f866 	bl	800b184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0b8:	4b2a      	ldr	r3, [pc, #168]	; (800a164 <prvAddNewTaskToReadyList+0xb8>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a29      	ldr	r2, [pc, #164]	; (800a164 <prvAddNewTaskToReadyList+0xb8>)
 800a0c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0c2:	4b29      	ldr	r3, [pc, #164]	; (800a168 <prvAddNewTaskToReadyList+0xbc>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0ca:	4a27      	ldr	r2, [pc, #156]	; (800a168 <prvAddNewTaskToReadyList+0xbc>)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <prvAddNewTaskToReadyList+0xb8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d110      	bne.n	800a0fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0d8:	f000 fc54 	bl	800a984 <prvInitialiseTaskLists>
 800a0dc:	e00d      	b.n	800a0fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0de:	4b23      	ldr	r3, [pc, #140]	; (800a16c <prvAddNewTaskToReadyList+0xc0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0e6:	4b20      	ldr	r3, [pc, #128]	; (800a168 <prvAddNewTaskToReadyList+0xbc>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d802      	bhi.n	800a0fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0f4:	4a1c      	ldr	r2, [pc, #112]	; (800a168 <prvAddNewTaskToReadyList+0xbc>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0fa:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <prvAddNewTaskToReadyList+0xc4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3301      	adds	r3, #1
 800a100:	4a1b      	ldr	r2, [pc, #108]	; (800a170 <prvAddNewTaskToReadyList+0xc4>)
 800a102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	2201      	movs	r2, #1
 800a10a:	409a      	lsls	r2, r3
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <prvAddNewTaskToReadyList+0xc8>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4313      	orrs	r3, r2
 800a112:	4a18      	ldr	r2, [pc, #96]	; (800a174 <prvAddNewTaskToReadyList+0xc8>)
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <prvAddNewTaskToReadyList+0xcc>)
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7ff f98c 	bl	800944a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a132:	f001 f857 	bl	800b1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <prvAddNewTaskToReadyList+0xc0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00e      	beq.n	800a15c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a13e:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <prvAddNewTaskToReadyList+0xbc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	429a      	cmp	r2, r3
 800a14a:	d207      	bcs.n	800a15c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a14c:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <prvAddNewTaskToReadyList+0xd0>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20007e94 	.word	0x20007e94
 800a168:	20007d94 	.word	0x20007d94
 800a16c:	20007ea0 	.word	0x20007ea0
 800a170:	20007eb0 	.word	0x20007eb0
 800a174:	20007e9c 	.word	0x20007e9c
 800a178:	20007d98 	.word	0x20007d98
 800a17c:	e000ed04 	.word	0xe000ed04

0800a180 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08a      	sub	sp, #40	; 0x28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <vTaskDelayUntil+0x2a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	617b      	str	r3, [r7, #20]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	613b      	str	r3, [r7, #16]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a1c6:	4b2a      	ldr	r3, [pc, #168]	; (800a270 <vTaskDelayUntil+0xf0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <vTaskDelayUntil+0x64>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a1e4:	f000 f8de 	bl	800a3a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a1e8:	4b22      	ldr	r3, [pc, #136]	; (800a274 <vTaskDelayUntil+0xf4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6a3a      	ldr	r2, [r7, #32]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d20b      	bcs.n	800a21a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d211      	bcs.n	800a230 <vTaskDelayUntil+0xb0>
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	429a      	cmp	r2, r3
 800a212:	d90d      	bls.n	800a230 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a214:	2301      	movs	r3, #1
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
 800a218:	e00a      	b.n	800a230 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	429a      	cmp	r2, r3
 800a222:	d303      	bcc.n	800a22c <vTaskDelayUntil+0xac>
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d901      	bls.n	800a230 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2100      	movs	r1, #0
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fe07 	bl	800ae58 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a24a:	f000 f8b9 	bl	800a3c0 <xTaskResumeAll>
 800a24e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d107      	bne.n	800a266 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <vTaskDelayUntil+0xf8>)
 800a258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a266:	bf00      	nop
 800a268:	3728      	adds	r7, #40	; 0x28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20007ebc 	.word	0x20007ebc
 800a274:	20007e98 	.word	0x20007e98
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d017      	beq.n	800a2be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <vTaskDelay+0x60>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <vTaskDelay+0x30>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	60bb      	str	r3, [r7, #8]
}
 800a2a8:	bf00      	nop
 800a2aa:	e7fe      	b.n	800a2aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2ac:	f000 f87a 	bl	800a3a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fdd0 	bl	800ae58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2b8:	f000 f882 	bl	800a3c0 <xTaskResumeAll>
 800a2bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d107      	bne.n	800a2d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <vTaskDelay+0x64>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20007ebc 	.word	0x20007ebc
 800a2e0:	e000ed04 	.word	0xe000ed04

0800a2e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08a      	sub	sp, #40	; 0x28
 800a2e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	1d39      	adds	r1, r7, #4
 800a2f6:	f107 0308 	add.w	r3, r7, #8
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f8 fac4 	bl	8002888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	9202      	str	r2, [sp, #8]
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	2300      	movs	r3, #0
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	460a      	mov	r2, r1
 800a312:	491e      	ldr	r1, [pc, #120]	; (800a38c <vTaskStartScheduler+0xa8>)
 800a314:	481e      	ldr	r0, [pc, #120]	; (800a390 <vTaskStartScheduler+0xac>)
 800a316:	f7ff fde9 	bl	8009eec <xTaskCreateStatic>
 800a31a:	4603      	mov	r3, r0
 800a31c:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <vTaskStartScheduler+0xb0>)
 800a31e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <vTaskStartScheduler+0xb0>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a328:	2301      	movs	r3, #1
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	e001      	b.n	800a332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d116      	bne.n	800a366 <vTaskStartScheduler+0x82>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	613b      	str	r3, [r7, #16]
}
 800a34a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a34c:	4b12      	ldr	r3, [pc, #72]	; (800a398 <vTaskStartScheduler+0xb4>)
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <vTaskStartScheduler+0xb8>)
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <vTaskStartScheduler+0xbc>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a360:	f000 fe6e 	bl	800b040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a364:	e00e      	b.n	800a384 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a36c:	d10a      	bne.n	800a384 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <vTaskStartScheduler+0x9e>
}
 800a384:	bf00      	nop
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	0800b6a0 	.word	0x0800b6a0
 800a390:	0800a955 	.word	0x0800a955
 800a394:	20007eb8 	.word	0x20007eb8
 800a398:	20007eb4 	.word	0x20007eb4
 800a39c:	20007ea0 	.word	0x20007ea0
 800a3a0:	20007e98 	.word	0x20007e98

0800a3a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a3a8:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <vTaskSuspendAll+0x18>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	4a03      	ldr	r2, [pc, #12]	; (800a3bc <vTaskSuspendAll+0x18>)
 800a3b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a3b2:	bf00      	nop
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20007ebc 	.word	0x20007ebc

0800a3c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3ce:	4b41      	ldr	r3, [pc, #260]	; (800a4d4 <xTaskResumeAll+0x114>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10a      	bne.n	800a3ec <xTaskResumeAll+0x2c>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	603b      	str	r3, [r7, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	e7fe      	b.n	800a3ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3ec:	f000 feca 	bl	800b184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3f0:	4b38      	ldr	r3, [pc, #224]	; (800a4d4 <xTaskResumeAll+0x114>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	4a37      	ldr	r2, [pc, #220]	; (800a4d4 <xTaskResumeAll+0x114>)
 800a3f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3fa:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <xTaskResumeAll+0x114>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d161      	bne.n	800a4c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a402:	4b35      	ldr	r3, [pc, #212]	; (800a4d8 <xTaskResumeAll+0x118>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d05d      	beq.n	800a4c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a40a:	e02e      	b.n	800a46a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40c:	4b33      	ldr	r3, [pc, #204]	; (800a4dc <xTaskResumeAll+0x11c>)
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3318      	adds	r3, #24
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff f873 	bl	8009504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3304      	adds	r3, #4
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff f86e 	bl	8009504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	2201      	movs	r2, #1
 800a42e:	409a      	lsls	r2, r3
 800a430:	4b2b      	ldr	r3, [pc, #172]	; (800a4e0 <xTaskResumeAll+0x120>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4313      	orrs	r3, r2
 800a436:	4a2a      	ldr	r2, [pc, #168]	; (800a4e0 <xTaskResumeAll+0x120>)
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4a27      	ldr	r2, [pc, #156]	; (800a4e4 <xTaskResumeAll+0x124>)
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f7fe fffa 	bl	800944a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45a:	4b23      	ldr	r3, [pc, #140]	; (800a4e8 <xTaskResumeAll+0x128>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	429a      	cmp	r2, r3
 800a462:	d302      	bcc.n	800a46a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a464:	4b21      	ldr	r3, [pc, #132]	; (800a4ec <xTaskResumeAll+0x12c>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a46a:	4b1c      	ldr	r3, [pc, #112]	; (800a4dc <xTaskResumeAll+0x11c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1cc      	bne.n	800a40c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a478:	f000 fafc 	bl	800aa74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a47c:	4b1c      	ldr	r3, [pc, #112]	; (800a4f0 <xTaskResumeAll+0x130>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d010      	beq.n	800a4aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a488:	f000 f846 	bl	800a518 <xTaskIncrementTick>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a492:	4b16      	ldr	r3, [pc, #88]	; (800a4ec <xTaskResumeAll+0x12c>)
 800a494:	2201      	movs	r2, #1
 800a496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f1      	bne.n	800a488 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a4a4:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <xTaskResumeAll+0x130>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4aa:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <xTaskResumeAll+0x12c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	; (800a4f4 <xTaskResumeAll+0x134>)
 800a4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c6:	f000 fe8d 	bl	800b1e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20007ebc 	.word	0x20007ebc
 800a4d8:	20007e94 	.word	0x20007e94
 800a4dc:	20007e54 	.word	0x20007e54
 800a4e0:	20007e9c 	.word	0x20007e9c
 800a4e4:	20007d98 	.word	0x20007d98
 800a4e8:	20007d94 	.word	0x20007d94
 800a4ec:	20007ea8 	.word	0x20007ea8
 800a4f0:	20007ea4 	.word	0x20007ea4
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <xTaskGetTickCount+0x1c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a504:	687b      	ldr	r3, [r7, #4]
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20007e98 	.word	0x20007e98

0800a518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a522:	4b4e      	ldr	r3, [pc, #312]	; (800a65c <xTaskIncrementTick+0x144>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 8088 	bne.w	800a63c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a52c:	4b4c      	ldr	r3, [pc, #304]	; (800a660 <xTaskIncrementTick+0x148>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a534:	4a4a      	ldr	r2, [pc, #296]	; (800a660 <xTaskIncrementTick+0x148>)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d120      	bne.n	800a582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a540:	4b48      	ldr	r3, [pc, #288]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <xTaskIncrementTick+0x48>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	603b      	str	r3, [r7, #0]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <xTaskIncrementTick+0x46>
 800a560:	4b40      	ldr	r3, [pc, #256]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	4b40      	ldr	r3, [pc, #256]	; (800a668 <xTaskIncrementTick+0x150>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3e      	ldr	r2, [pc, #248]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	4a3e      	ldr	r2, [pc, #248]	; (800a668 <xTaskIncrementTick+0x150>)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	4b3d      	ldr	r3, [pc, #244]	; (800a66c <xTaskIncrementTick+0x154>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	4a3c      	ldr	r2, [pc, #240]	; (800a66c <xTaskIncrementTick+0x154>)
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	f000 fa79 	bl	800aa74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a582:	4b3b      	ldr	r3, [pc, #236]	; (800a670 <xTaskIncrementTick+0x158>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d348      	bcc.n	800a61e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a58c:	4b35      	ldr	r3, [pc, #212]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a596:	4b36      	ldr	r3, [pc, #216]	; (800a670 <xTaskIncrementTick+0x158>)
 800a598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a59c:	601a      	str	r2, [r3, #0]
					break;
 800a59e:	e03e      	b.n	800a61e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	4b30      	ldr	r3, [pc, #192]	; (800a664 <xTaskIncrementTick+0x14c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d203      	bcs.n	800a5c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5b8:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <xTaskIncrementTick+0x158>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5be:	e02e      	b.n	800a61e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe ff9d 	bl	8009504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d004      	beq.n	800a5dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe ff94 	bl	8009504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	4b23      	ldr	r3, [pc, #140]	; (800a674 <xTaskIncrementTick+0x15c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	4a22      	ldr	r2, [pc, #136]	; (800a674 <xTaskIncrementTick+0x15c>)
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <xTaskIncrementTick+0x160>)
 800a5fc:	441a      	add	r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	3304      	adds	r3, #4
 800a602:	4619      	mov	r1, r3
 800a604:	4610      	mov	r0, r2
 800a606:	f7fe ff20 	bl	800944a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60e:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <xTaskIncrementTick+0x164>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	429a      	cmp	r2, r3
 800a616:	d3b9      	bcc.n	800a58c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a61c:	e7b6      	b.n	800a58c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a61e:	4b17      	ldr	r3, [pc, #92]	; (800a67c <xTaskIncrementTick+0x164>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a624:	4914      	ldr	r1, [pc, #80]	; (800a678 <xTaskIncrementTick+0x160>)
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d907      	bls.n	800a646 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a636:	2301      	movs	r3, #1
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	e004      	b.n	800a646 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a63c:	4b10      	ldr	r3, [pc, #64]	; (800a680 <xTaskIncrementTick+0x168>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a0f      	ldr	r2, [pc, #60]	; (800a680 <xTaskIncrementTick+0x168>)
 800a644:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a646:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <xTaskIncrementTick+0x16c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a64e:	2301      	movs	r3, #1
 800a650:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a652:	697b      	ldr	r3, [r7, #20]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20007ebc 	.word	0x20007ebc
 800a660:	20007e98 	.word	0x20007e98
 800a664:	20007e4c 	.word	0x20007e4c
 800a668:	20007e50 	.word	0x20007e50
 800a66c:	20007eac 	.word	0x20007eac
 800a670:	20007eb4 	.word	0x20007eb4
 800a674:	20007e9c 	.word	0x20007e9c
 800a678:	20007d98 	.word	0x20007d98
 800a67c:	20007d94 	.word	0x20007d94
 800a680:	20007ea4 	.word	0x20007ea4
 800a684:	20007ea8 	.word	0x20007ea8

0800a688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a68e:	4b27      	ldr	r3, [pc, #156]	; (800a72c <vTaskSwitchContext+0xa4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a696:	4b26      	ldr	r3, [pc, #152]	; (800a730 <vTaskSwitchContext+0xa8>)
 800a698:	2201      	movs	r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a69c:	e03f      	b.n	800a71e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <vTaskSwitchContext+0xa8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a4:	4b23      	ldr	r3, [pc, #140]	; (800a734 <vTaskSwitchContext+0xac>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	fab3 f383 	clz	r3, r3
 800a6b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6b2:	7afb      	ldrb	r3, [r7, #11]
 800a6b4:	f1c3 031f 	rsb	r3, r3, #31
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	491f      	ldr	r1, [pc, #124]	; (800a738 <vTaskSwitchContext+0xb0>)
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vTaskSwitchContext+0x5a>
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4a12      	ldr	r2, [pc, #72]	; (800a738 <vTaskSwitchContext+0xb0>)
 800a6f0:	4413      	add	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	605a      	str	r2, [r3, #4]
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	3308      	adds	r3, #8
 800a706:	429a      	cmp	r2, r3
 800a708:	d104      	bne.n	800a714 <vTaskSwitchContext+0x8c>
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	605a      	str	r2, [r3, #4]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	4a08      	ldr	r2, [pc, #32]	; (800a73c <vTaskSwitchContext+0xb4>)
 800a71c:	6013      	str	r3, [r2, #0]
}
 800a71e:	bf00      	nop
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20007ebc 	.word	0x20007ebc
 800a730:	20007ea8 	.word	0x20007ea8
 800a734:	20007e9c 	.word	0x20007e9c
 800a738:	20007d98 	.word	0x20007d98
 800a73c:	20007d94 	.word	0x20007d94

0800a740 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60fb      	str	r3, [r7, #12]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <vTaskPlaceOnEventList+0x44>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3318      	adds	r3, #24
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7fe fe8f 	bl	8009492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a774:	2101      	movs	r1, #1
 800a776:	6838      	ldr	r0, [r7, #0]
 800a778:	f000 fb6e 	bl	800ae58 <prvAddCurrentTaskToDelayedList>
}
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20007d94 	.word	0x20007d94

0800a788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	3318      	adds	r3, #24
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fe fea3 	bl	8009504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7be:	4b1d      	ldr	r3, [pc, #116]	; (800a834 <xTaskRemoveFromEventList+0xac>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d11c      	bne.n	800a800 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fe9a 	bl	8009504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	409a      	lsls	r2, r3
 800a7d8:	4b17      	ldr	r3, [pc, #92]	; (800a838 <xTaskRemoveFromEventList+0xb0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	4a16      	ldr	r2, [pc, #88]	; (800a838 <xTaskRemoveFromEventList+0xb0>)
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4a13      	ldr	r2, [pc, #76]	; (800a83c <xTaskRemoveFromEventList+0xb4>)
 800a7f0:	441a      	add	r2, r3
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	f7fe fe26 	bl	800944a <vListInsertEnd>
 800a7fe:	e005      	b.n	800a80c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	3318      	adds	r3, #24
 800a804:	4619      	mov	r1, r3
 800a806:	480e      	ldr	r0, [pc, #56]	; (800a840 <xTaskRemoveFromEventList+0xb8>)
 800a808:	f7fe fe1f 	bl	800944a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <xTaskRemoveFromEventList+0xbc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	429a      	cmp	r2, r3
 800a818:	d905      	bls.n	800a826 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a81a:	2301      	movs	r3, #1
 800a81c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a81e:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <xTaskRemoveFromEventList+0xc0>)
 800a820:	2201      	movs	r2, #1
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e001      	b.n	800a82a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a82a:	697b      	ldr	r3, [r7, #20]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20007ebc 	.word	0x20007ebc
 800a838:	20007e9c 	.word	0x20007e9c
 800a83c:	20007d98 	.word	0x20007d98
 800a840:	20007e54 	.word	0x20007e54
 800a844:	20007d94 	.word	0x20007d94
 800a848:	20007ea8 	.word	0x20007ea8

0800a84c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <vTaskInternalSetTimeOutState+0x24>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <vTaskInternalSetTimeOutState+0x28>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	605a      	str	r2, [r3, #4]
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20007eac 	.word	0x20007eac
 800a874:	20007e98 	.word	0x20007e98

0800a878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	613b      	str	r3, [r7, #16]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	60fb      	str	r3, [r7, #12]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8ba:	f000 fc63 	bl	800b184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8be:	4b1d      	ldr	r3, [pc, #116]	; (800a934 <xTaskCheckForTimeOut+0xbc>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8d6:	d102      	bne.n	800a8de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	e023      	b.n	800a926 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <xTaskCheckForTimeOut+0xc0>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d007      	beq.n	800a8fa <xTaskCheckForTimeOut+0x82>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e015      	b.n	800a926 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	429a      	cmp	r2, r3
 800a902:	d20b      	bcs.n	800a91c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff9b 	bl	800a84c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	e004      	b.n	800a926 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a922:	2301      	movs	r3, #1
 800a924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a926:	f000 fc5d 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 800a92a:	69fb      	ldr	r3, [r7, #28]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20007e98 	.word	0x20007e98
 800a938:	20007eac 	.word	0x20007eac

0800a93c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <vTaskMissedYield+0x14>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	20007ea8 	.word	0x20007ea8

0800a954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a95c:	f000 f852 	bl	800aa04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a960:	4b06      	ldr	r3, [pc, #24]	; (800a97c <prvIdleTask+0x28>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d9f9      	bls.n	800a95c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <prvIdleTask+0x2c>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a978:	e7f0      	b.n	800a95c <prvIdleTask+0x8>
 800a97a:	bf00      	nop
 800a97c:	20007d98 	.word	0x20007d98
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a98a:	2300      	movs	r3, #0
 800a98c:	607b      	str	r3, [r7, #4]
 800a98e:	e00c      	b.n	800a9aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4a12      	ldr	r2, [pc, #72]	; (800a9e4 <prvInitialiseTaskLists+0x60>)
 800a99c:	4413      	add	r3, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fd26 	bl	80093f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b06      	cmp	r3, #6
 800a9ae:	d9ef      	bls.n	800a990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9b0:	480d      	ldr	r0, [pc, #52]	; (800a9e8 <prvInitialiseTaskLists+0x64>)
 800a9b2:	f7fe fd1d 	bl	80093f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9b6:	480d      	ldr	r0, [pc, #52]	; (800a9ec <prvInitialiseTaskLists+0x68>)
 800a9b8:	f7fe fd1a 	bl	80093f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9bc:	480c      	ldr	r0, [pc, #48]	; (800a9f0 <prvInitialiseTaskLists+0x6c>)
 800a9be:	f7fe fd17 	bl	80093f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9c2:	480c      	ldr	r0, [pc, #48]	; (800a9f4 <prvInitialiseTaskLists+0x70>)
 800a9c4:	f7fe fd14 	bl	80093f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9c8:	480b      	ldr	r0, [pc, #44]	; (800a9f8 <prvInitialiseTaskLists+0x74>)
 800a9ca:	f7fe fd11 	bl	80093f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ce:	4b0b      	ldr	r3, [pc, #44]	; (800a9fc <prvInitialiseTaskLists+0x78>)
 800a9d0:	4a05      	ldr	r2, [pc, #20]	; (800a9e8 <prvInitialiseTaskLists+0x64>)
 800a9d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <prvInitialiseTaskLists+0x7c>)
 800a9d6:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <prvInitialiseTaskLists+0x68>)
 800a9d8:	601a      	str	r2, [r3, #0]
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20007d98 	.word	0x20007d98
 800a9e8:	20007e24 	.word	0x20007e24
 800a9ec:	20007e38 	.word	0x20007e38
 800a9f0:	20007e54 	.word	0x20007e54
 800a9f4:	20007e68 	.word	0x20007e68
 800a9f8:	20007e80 	.word	0x20007e80
 800a9fc:	20007e4c 	.word	0x20007e4c
 800aa00:	20007e50 	.word	0x20007e50

0800aa04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa0a:	e019      	b.n	800aa40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa0c:	f000 fbba 	bl	800b184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa10:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <prvCheckTasksWaitingTermination+0x50>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fd71 	bl	8009504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa22:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <prvCheckTasksWaitingTermination+0x54>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4a0b      	ldr	r2, [pc, #44]	; (800aa58 <prvCheckTasksWaitingTermination+0x54>)
 800aa2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <prvCheckTasksWaitingTermination+0x58>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <prvCheckTasksWaitingTermination+0x58>)
 800aa34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa36:	f000 fbd5 	bl	800b1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f810 	bl	800aa60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <prvCheckTasksWaitingTermination+0x58>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e1      	bne.n	800aa0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20007e68 	.word	0x20007e68
 800aa58:	20007e94 	.word	0x20007e94
 800aa5c:	20007e7c 	.word	0x20007e7c

0800aa60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa7a:	4b0c      	ldr	r3, [pc, #48]	; (800aaac <prvResetNextTaskUnblockTime+0x38>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d104      	bne.n	800aa8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <prvResetNextTaskUnblockTime+0x3c>)
 800aa86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa8c:	e008      	b.n	800aaa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <prvResetNextTaskUnblockTime+0x38>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <prvResetNextTaskUnblockTime+0x3c>)
 800aa9e:	6013      	str	r3, [r2, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	20007e4c 	.word	0x20007e4c
 800aab0:	20007eb4 	.word	0x20007eb4

0800aab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaba:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <xTaskGetSchedulerState+0x34>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aac2:	2301      	movs	r3, #1
 800aac4:	607b      	str	r3, [r7, #4]
 800aac6:	e008      	b.n	800aada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aac8:	4b08      	ldr	r3, [pc, #32]	; (800aaec <xTaskGetSchedulerState+0x38>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aad0:	2302      	movs	r3, #2
 800aad2:	607b      	str	r3, [r7, #4]
 800aad4:	e001      	b.n	800aada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aad6:	2300      	movs	r3, #0
 800aad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aada:	687b      	ldr	r3, [r7, #4]
	}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20007ea0 	.word	0x20007ea0
 800aaec:	20007ebc 	.word	0x20007ebc

0800aaf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d069      	beq.n	800abda <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	4b36      	ldr	r3, [pc, #216]	; (800abe4 <xTaskPriorityInherit+0xf4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d259      	bcs.n	800abc8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	db06      	blt.n	800ab2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab1c:	4b31      	ldr	r3, [pc, #196]	; (800abe4 <xTaskPriorityInherit+0xf4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	f1c3 0207 	rsb	r2, r3, #7
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6959      	ldr	r1, [r3, #20]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4a2b      	ldr	r2, [pc, #172]	; (800abe8 <xTaskPriorityInherit+0xf8>)
 800ab3c:	4413      	add	r3, r2
 800ab3e:	4299      	cmp	r1, r3
 800ab40:	d13a      	bne.n	800abb8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	3304      	adds	r3, #4
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fcdc 	bl	8009504 <uxListRemove>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d115      	bne.n	800ab7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4924      	ldr	r1, [pc, #144]	; (800abe8 <xTaskPriorityInherit+0xf8>)
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	440b      	add	r3, r1
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <xTaskPriorityInherit+0x8e>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab72:	43da      	mvns	r2, r3
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <xTaskPriorityInherit+0xfc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	4a1c      	ldr	r2, [pc, #112]	; (800abec <xTaskPriorityInherit+0xfc>)
 800ab7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab7e:	4b19      	ldr	r3, [pc, #100]	; (800abe4 <xTaskPriorityInherit+0xf4>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	409a      	lsls	r2, r3
 800ab90:	4b16      	ldr	r3, [pc, #88]	; (800abec <xTaskPriorityInherit+0xfc>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	4a15      	ldr	r2, [pc, #84]	; (800abec <xTaskPriorityInherit+0xfc>)
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4a10      	ldr	r2, [pc, #64]	; (800abe8 <xTaskPriorityInherit+0xf8>)
 800aba8:	441a      	add	r2, r3
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	3304      	adds	r3, #4
 800abae:	4619      	mov	r1, r3
 800abb0:	4610      	mov	r0, r2
 800abb2:	f7fe fc4a 	bl	800944a <vListInsertEnd>
 800abb6:	e004      	b.n	800abc2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <xTaskPriorityInherit+0xf4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abc2:	2301      	movs	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e008      	b.n	800abda <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <xTaskPriorityInherit+0xf4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d201      	bcs.n	800abda <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abda:	68fb      	ldr	r3, [r7, #12]
	}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20007d94 	.word	0x20007d94
 800abe8:	20007d98 	.word	0x20007d98
 800abec:	20007e9c 	.word	0x20007e9c

0800abf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d06e      	beq.n	800ace4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac06:	4b3a      	ldr	r3, [pc, #232]	; (800acf0 <xTaskPriorityDisinherit+0x100>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d00a      	beq.n	800ac26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60bb      	str	r3, [r7, #8]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac48:	1e5a      	subs	r2, r3, #1
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d044      	beq.n	800ace4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d140      	bne.n	800ace4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3304      	adds	r3, #4
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe fc4c 	bl	8009504 <uxListRemove>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d115      	bne.n	800ac9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac76:	491f      	ldr	r1, [pc, #124]	; (800acf4 <xTaskPriorityDisinherit+0x104>)
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	440b      	add	r3, r1
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xTaskPriorityDisinherit+0xae>
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac92:	43da      	mvns	r2, r3
 800ac94:	4b18      	ldr	r3, [pc, #96]	; (800acf8 <xTaskPriorityDisinherit+0x108>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4013      	ands	r3, r2
 800ac9a:	4a17      	ldr	r2, [pc, #92]	; (800acf8 <xTaskPriorityDisinherit+0x108>)
 800ac9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f1c3 0207 	rsb	r2, r3, #7
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	2201      	movs	r2, #1
 800acb8:	409a      	lsls	r2, r3
 800acba:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <xTaskPriorityDisinherit+0x108>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	4a0d      	ldr	r2, [pc, #52]	; (800acf8 <xTaskPriorityDisinherit+0x108>)
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4a08      	ldr	r2, [pc, #32]	; (800acf4 <xTaskPriorityDisinherit+0x104>)
 800acd2:	441a      	add	r2, r3
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	3304      	adds	r3, #4
 800acd8:	4619      	mov	r1, r3
 800acda:	4610      	mov	r0, r2
 800acdc:	f7fe fbb5 	bl	800944a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ace0:	2301      	movs	r3, #1
 800ace2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ace4:	697b      	ldr	r3, [r7, #20]
	}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20007d94 	.word	0x20007d94
 800acf4:	20007d98 	.word	0x20007d98
 800acf8:	20007e9c 	.word	0x20007e9c

0800acfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8083 	beq.w	800ae1c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10a      	bne.n	800ad34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	60fb      	str	r3, [r7, #12]
}
 800ad30:	bf00      	nop
 800ad32:	e7fe      	b.n	800ad32 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d902      	bls.n	800ad44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	e002      	b.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d063      	beq.n	800ae1c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d15e      	bne.n	800ae1c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad5e:	4b31      	ldr	r3, [pc, #196]	; (800ae24 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d10a      	bne.n	800ad7e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	60bb      	str	r3, [r7, #8]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	db04      	blt.n	800ad9c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	f1c3 0207 	rsb	r2, r3, #7
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	6959      	ldr	r1, [r3, #20]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4a1f      	ldr	r2, [pc, #124]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800adac:	4413      	add	r3, r2
 800adae:	4299      	cmp	r1, r3
 800adb0:	d134      	bne.n	800ae1c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fba4 	bl	8009504 <uxListRemove>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d115      	bne.n	800adee <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc6:	4918      	ldr	r1, [pc, #96]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	2201      	movs	r2, #1
 800adde:	fa02 f303 	lsl.w	r3, r2, r3
 800ade2:	43da      	mvns	r2, r3
 800ade4:	4b11      	ldr	r3, [pc, #68]	; (800ae2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4013      	ands	r3, r2
 800adea:	4a10      	ldr	r2, [pc, #64]	; (800ae2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800adec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	2201      	movs	r2, #1
 800adf4:	409a      	lsls	r2, r3
 800adf6:	4b0d      	ldr	r3, [pc, #52]	; (800ae2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	4a0b      	ldr	r2, [pc, #44]	; (800ae2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4a06      	ldr	r2, [pc, #24]	; (800ae28 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae0e:	441a      	add	r2, r3
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7fe fb17 	bl	800944a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae1c:	bf00      	nop
 800ae1e:	3720      	adds	r7, #32
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20007d94 	.word	0x20007d94
 800ae28:	20007d98 	.word	0x20007d98
 800ae2c:	20007e9c 	.word	0x20007e9c

0800ae30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae34:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae42:	3201      	adds	r2, #1
 800ae44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae46:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae48:	681b      	ldr	r3, [r3, #0]
	}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	20007d94 	.word	0x20007d94

0800ae58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae62:	4b29      	ldr	r3, [pc, #164]	; (800af08 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae68:	4b28      	ldr	r3, [pc, #160]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fb48 	bl	8009504 <uxListRemove>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae7a:	4b24      	ldr	r3, [pc, #144]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	2201      	movs	r2, #1
 800ae82:	fa02 f303 	lsl.w	r3, r2, r3
 800ae86:	43da      	mvns	r2, r3
 800ae88:	4b21      	ldr	r3, [pc, #132]	; (800af10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	4a20      	ldr	r2, [pc, #128]	; (800af10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae98:	d10a      	bne.n	800aeb0 <prvAddCurrentTaskToDelayedList+0x58>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d007      	beq.n	800aeb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aea0:	4b1a      	ldr	r3, [pc, #104]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	481a      	ldr	r0, [pc, #104]	; (800af14 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aeaa:	f7fe face 	bl	800944a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aeae:	e026      	b.n	800aefe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeb8:	4b14      	ldr	r3, [pc, #80]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d209      	bcs.n	800aedc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec8:	4b13      	ldr	r3, [pc, #76]	; (800af18 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f7fe fadc 	bl	8009492 <vListInsert>
}
 800aeda:	e010      	b.n	800aefe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <prvAddCurrentTaskToDelayedList+0xc4>)
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3304      	adds	r3, #4
 800aee6:	4619      	mov	r1, r3
 800aee8:	4610      	mov	r0, r2
 800aeea:	f7fe fad2 	bl	8009492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d202      	bcs.n	800aefe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6013      	str	r3, [r2, #0]
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20007e98 	.word	0x20007e98
 800af0c:	20007d94 	.word	0x20007d94
 800af10:	20007e9c 	.word	0x20007e9c
 800af14:	20007e80 	.word	0x20007e80
 800af18:	20007e50 	.word	0x20007e50
 800af1c:	20007e4c 	.word	0x20007e4c
 800af20:	20007eb4 	.word	0x20007eb4

0800af24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3b04      	subs	r3, #4
 800af34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3b04      	subs	r3, #4
 800af42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f023 0201 	bic.w	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3b04      	subs	r3, #4
 800af52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af54:	4a0c      	ldr	r2, [pc, #48]	; (800af88 <pxPortInitialiseStack+0x64>)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3b14      	subs	r3, #20
 800af5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3b04      	subs	r3, #4
 800af6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f06f 0202 	mvn.w	r2, #2
 800af72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3b20      	subs	r3, #32
 800af78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af7a:	68fb      	ldr	r3, [r7, #12]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	0800af8d 	.word	0x0800af8d

0800af8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <prvTaskExitError+0x54>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af9e:	d00a      	beq.n	800afb6 <prvTaskExitError+0x2a>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60fb      	str	r3, [r7, #12]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <prvTaskExitError+0x28>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	60bb      	str	r3, [r7, #8]
}
 800afc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afca:	bf00      	nop
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0fc      	beq.n	800afcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	2000004c 	.word	0x2000004c
	...

0800aff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <pxCurrentTCBConst2>)
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	6808      	ldr	r0, [r1, #0]
 800aff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	f380 8809 	msr	PSP, r0
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f04f 0000 	mov.w	r0, #0
 800b006:	f380 8811 	msr	BASEPRI, r0
 800b00a:	4770      	bx	lr
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst2>:
 800b010:	20007d94 	.word	0x20007d94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b018:	4808      	ldr	r0, [pc, #32]	; (800b03c <prvPortStartFirstTask+0x24>)
 800b01a:	6800      	ldr	r0, [r0, #0]
 800b01c:	6800      	ldr	r0, [r0, #0]
 800b01e:	f380 8808 	msr	MSP, r0
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8814 	msr	CONTROL, r0
 800b02a:	b662      	cpsie	i
 800b02c:	b661      	cpsie	f
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	df00      	svc	0
 800b038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b03a:	bf00      	nop
 800b03c:	e000ed08 	.word	0xe000ed08

0800b040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b046:	4b46      	ldr	r3, [pc, #280]	; (800b160 <xPortStartScheduler+0x120>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a46      	ldr	r2, [pc, #280]	; (800b164 <xPortStartScheduler+0x124>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d10a      	bne.n	800b066 <xPortStartScheduler+0x26>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	613b      	str	r3, [r7, #16]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b066:	4b3e      	ldr	r3, [pc, #248]	; (800b160 <xPortStartScheduler+0x120>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a3f      	ldr	r2, [pc, #252]	; (800b168 <xPortStartScheduler+0x128>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d10a      	bne.n	800b086 <xPortStartScheduler+0x46>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60fb      	str	r3, [r7, #12]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b086:	4b39      	ldr	r3, [pc, #228]	; (800b16c <xPortStartScheduler+0x12c>)
 800b088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	22ff      	movs	r2, #255	; 0xff
 800b096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	4b31      	ldr	r3, [pc, #196]	; (800b170 <xPortStartScheduler+0x130>)
 800b0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0ae:	4b31      	ldr	r3, [pc, #196]	; (800b174 <xPortStartScheduler+0x134>)
 800b0b0:	2207      	movs	r2, #7
 800b0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0b4:	e009      	b.n	800b0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <xPortStartScheduler+0x134>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4a2d      	ldr	r2, [pc, #180]	; (800b174 <xPortStartScheduler+0x134>)
 800b0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ca:	78fb      	ldrb	r3, [r7, #3]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d2:	2b80      	cmp	r3, #128	; 0x80
 800b0d4:	d0ef      	beq.n	800b0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0d6:	4b27      	ldr	r3, [pc, #156]	; (800b174 <xPortStartScheduler+0x134>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f1c3 0307 	rsb	r3, r3, #7
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d00a      	beq.n	800b0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60bb      	str	r3, [r7, #8]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <xPortStartScheduler+0x134>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <xPortStartScheduler+0x134>)
 800b100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b102:	4b1c      	ldr	r3, [pc, #112]	; (800b174 <xPortStartScheduler+0x134>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b10a:	4a1a      	ldr	r2, [pc, #104]	; (800b174 <xPortStartScheduler+0x134>)
 800b10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	b2da      	uxtb	r2, r3
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b116:	4b18      	ldr	r3, [pc, #96]	; (800b178 <xPortStartScheduler+0x138>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a17      	ldr	r2, [pc, #92]	; (800b178 <xPortStartScheduler+0x138>)
 800b11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b122:	4b15      	ldr	r3, [pc, #84]	; (800b178 <xPortStartScheduler+0x138>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a14      	ldr	r2, [pc, #80]	; (800b178 <xPortStartScheduler+0x138>)
 800b128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b12e:	f000 f8dd 	bl	800b2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b132:	4b12      	ldr	r3, [pc, #72]	; (800b17c <xPortStartScheduler+0x13c>)
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b138:	f000 f8fc 	bl	800b334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b13c:	4b10      	ldr	r3, [pc, #64]	; (800b180 <xPortStartScheduler+0x140>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a0f      	ldr	r2, [pc, #60]	; (800b180 <xPortStartScheduler+0x140>)
 800b142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b148:	f7ff ff66 	bl	800b018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b14c:	f7ff fa9c 	bl	800a688 <vTaskSwitchContext>
	prvTaskExitError();
 800b150:	f7ff ff1c 	bl	800af8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	e000ed00 	.word	0xe000ed00
 800b164:	410fc271 	.word	0x410fc271
 800b168:	410fc270 	.word	0x410fc270
 800b16c:	e000e400 	.word	0xe000e400
 800b170:	20007ec0 	.word	0x20007ec0
 800b174:	20007ec4 	.word	0x20007ec4
 800b178:	e000ed20 	.word	0xe000ed20
 800b17c:	2000004c 	.word	0x2000004c
 800b180:	e000ef34 	.word	0xe000ef34

0800b184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	607b      	str	r3, [r7, #4]
}
 800b19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a0d      	ldr	r2, [pc, #52]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1a8:	4b0c      	ldr	r3, [pc, #48]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d10f      	bne.n	800b1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <vPortEnterCritical+0x5c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	603b      	str	r3, [r7, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <vPortEnterCritical+0x4a>
	}
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	2000004c 	.word	0x2000004c
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ea:	4b12      	ldr	r3, [pc, #72]	; (800b234 <vPortExitCritical+0x50>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <vPortExitCritical+0x24>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	607b      	str	r3, [r7, #4]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b208:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <vPortExitCritical+0x50>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	4a09      	ldr	r2, [pc, #36]	; (800b234 <vPortExitCritical+0x50>)
 800b210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <vPortExitCritical+0x42>
 800b21a:	2300      	movs	r3, #0
 800b21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	f383 8811 	msr	BASEPRI, r3
}
 800b224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	2000004c 	.word	0x2000004c
	...

0800b240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b240:	f3ef 8009 	mrs	r0, PSP
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <pxCurrentTCBConst>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f01e 0f10 	tst.w	lr, #16
 800b250:	bf08      	it	eq
 800b252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6010      	str	r0, [r2, #0]
 800b25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b264:	f380 8811 	msr	BASEPRI, r0
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f7ff fa0a 	bl	800a688 <vTaskSwitchContext>
 800b274:	f04f 0000 	mov.w	r0, #0
 800b278:	f380 8811 	msr	BASEPRI, r0
 800b27c:	bc09      	pop	{r0, r3}
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	6808      	ldr	r0, [r1, #0]
 800b282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b286:	f01e 0f10 	tst.w	lr, #16
 800b28a:	bf08      	it	eq
 800b28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b290:	f380 8809 	msr	PSP, r0
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w

0800b2a0 <pxCurrentTCBConst>:
 800b2a0:	20007d94 	.word	0x20007d94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2c2:	f7ff f929 	bl	800a518 <xTaskIncrementTick>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <SysTick_Handler+0x40>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	f383 8811 	msr	BASEPRI, r3
}
 800b2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <vPortSetupTimerInterrupt+0x38>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <vPortSetupTimerInterrupt+0x3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <vPortSetupTimerInterrupt+0x40>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	099b      	lsrs	r3, r3, #6
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <vPortSetupTimerInterrupt+0x44>)
 800b30a:	3b01      	subs	r3, #1
 800b30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010
 800b324:	e000e018 	.word	0xe000e018
 800b328:	20000040 	.word	0x20000040
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	e000e014 	.word	0xe000e014

0800b334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b344 <vPortEnableVFP+0x10>
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b33e:	6001      	str	r1, [r0, #0]
 800b340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b342:	bf00      	nop
 800b344:	e000ed88 	.word	0xe000ed88

0800b348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d914      	bls.n	800b384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b35a:	4a17      	ldr	r2, [pc, #92]	; (800b3b8 <vPortValidateInterruptPriority+0x70>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b364:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <vPortValidateInterruptPriority+0x74>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d20a      	bcs.n	800b384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	607b      	str	r3, [r7, #4]
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b384:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <vPortValidateInterruptPriority+0x78>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <vPortValidateInterruptPriority+0x7c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d90a      	bls.n	800b3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	603b      	str	r3, [r7, #0]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vPortValidateInterruptPriority+0x60>
	}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	e000e3f0 	.word	0xe000e3f0
 800b3bc:	20007ec0 	.word	0x20007ec0
 800b3c0:	e000ed0c 	.word	0xe000ed0c
 800b3c4:	20007ec4 	.word	0x20007ec4

0800b3c8 <__libc_init_array>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	4d0d      	ldr	r5, [pc, #52]	; (800b400 <__libc_init_array+0x38>)
 800b3cc:	4c0d      	ldr	r4, [pc, #52]	; (800b404 <__libc_init_array+0x3c>)
 800b3ce:	1b64      	subs	r4, r4, r5
 800b3d0:	10a4      	asrs	r4, r4, #2
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	42a6      	cmp	r6, r4
 800b3d6:	d109      	bne.n	800b3ec <__libc_init_array+0x24>
 800b3d8:	4d0b      	ldr	r5, [pc, #44]	; (800b408 <__libc_init_array+0x40>)
 800b3da:	4c0c      	ldr	r4, [pc, #48]	; (800b40c <__libc_init_array+0x44>)
 800b3dc:	f000 f82e 	bl	800b43c <_init>
 800b3e0:	1b64      	subs	r4, r4, r5
 800b3e2:	10a4      	asrs	r4, r4, #2
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	42a6      	cmp	r6, r4
 800b3e8:	d105      	bne.n	800b3f6 <__libc_init_array+0x2e>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f0:	4798      	blx	r3
 800b3f2:	3601      	adds	r6, #1
 800b3f4:	e7ee      	b.n	800b3d4 <__libc_init_array+0xc>
 800b3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fa:	4798      	blx	r3
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	e7f2      	b.n	800b3e6 <__libc_init_array+0x1e>
 800b400:	0800b6d8 	.word	0x0800b6d8
 800b404:	0800b6d8 	.word	0x0800b6d8
 800b408:	0800b6d8 	.word	0x0800b6d8
 800b40c:	0800b6dc 	.word	0x0800b6dc

0800b410 <memcpy>:
 800b410:	440a      	add	r2, r1
 800b412:	4291      	cmp	r1, r2
 800b414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b418:	d100      	bne.n	800b41c <memcpy+0xc>
 800b41a:	4770      	bx	lr
 800b41c:	b510      	push	{r4, lr}
 800b41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b426:	4291      	cmp	r1, r2
 800b428:	d1f9      	bne.n	800b41e <memcpy+0xe>
 800b42a:	bd10      	pop	{r4, pc}

0800b42c <memset>:
 800b42c:	4402      	add	r2, r0
 800b42e:	4603      	mov	r3, r0
 800b430:	4293      	cmp	r3, r2
 800b432:	d100      	bne.n	800b436 <memset+0xa>
 800b434:	4770      	bx	lr
 800b436:	f803 1b01 	strb.w	r1, [r3], #1
 800b43a:	e7f9      	b.n	800b430 <memset+0x4>

0800b43c <_init>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	bf00      	nop
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr

0800b448 <_fini>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	bf00      	nop
 800b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44e:	bc08      	pop	{r3}
 800b450:	469e      	mov	lr, r3
 800b452:	4770      	bx	lr
